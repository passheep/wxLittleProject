import { BaseConfiguration, ExtraConfiguration, SuccessParam, WxOptions, WxTask } from './configuration';
import { Listeners } from './listeners';
/**
 * 网络请求的完整生命周期
 * @template TWxOptions 微信操作函数参数类型 // 微信操作函数
 * @template TWxTask 微信操作函数返回值类型 // 微信操作的任务类型
 * @template TInitConfig LifeCycle的初始默认配置项(Defaults)类型 //初始化配置项
 * @template TFullOptions 一个操作完整配置项(全部可接收参数)类型
 */
export declare abstract class LifeCycle<TWxOptions extends WxOptions, TWxTask extends WxTask, TInitConfig extends BaseConfiguration<TFullOptions, TWxOptions>, TFullOptions extends TInitConfig & ExtraConfiguration = TInitConfig & ExtraConfiguration> {
    /**
     * 默认全局配置
     * 对此实例的每个请求生效,优先级低于每个请求的自定义配置
     * 除`header`属性会将请求自定义配置和默认配置进行合并
     * 其余设置会直接覆盖
     */
    readonly Defaults: TInitConfig;
    /**
     * 全局事件监听列表 Listeners
     * 每次触发特定类型事件会通知对应的全部listeners
     * 包括 `onResponse`,`onResponse`,`onComplete`,`onRejected`,`onAbort`
     * 原则上不应该在事件回调中修改数据
     */
    readonly Listeners: Readonly<Listeners<TFullOptions, SuccessParam<TWxOptions>>>;
    /**
     * 微信操作接口
     * @param option 参数
     */
    readonly handle: (option: TWxOptions) => TWxTask;
    /**
     * 新建实列
     * @param operator 操作
     * @param config 全局默认配置
     * @param listeners 事件监听
     */
    protected constructor(operator: (option: TWxOptions) => TWxTask, config: TInitConfig, listeners?: Readonly<Listeners<TFullOptions, SuccessParam<TWxOptions>>>);
    /**
     * 处理请求
     * @param options - 请求参数,不包括默认参数
     */
    protected process<T = SuccessParam<TWxOptions>>(options: TFullOptions): Promise<T>;
    /**
     * 请求发送之前处理数据
     * @param options - 完整参数
     */
    private _onSend;
    /**
     * 发送网络请求,并自动重试
     * @param data - 发送微信参数
     * @param options - 全部配置
     */
    private _send;
    /**
     * 处理服务器返回数据
     * @param res - 返回参数
     * @param options - 全部配置
     */
    private _response;
    /**
     * complete 结束操作 按需注入时间
     * @param res - result
     * @param options - all options
     */
    private _complete;
    /**
     * 请求发送失败
     * @param res - 返回参数
     * @param options - 全部配置
     */
    private _onFail;
    /**
     * 请求完成
     * @param res - 返回参数
     * @param options - 全部配置
     */
    private _onComplete;
    /**
     * 请求完成
     * @param res - 返回参数
     * @param options - 全部配置
     */
    private _onAbort;
}
//# sourceMappingURL=life-cycle.d.ts.map