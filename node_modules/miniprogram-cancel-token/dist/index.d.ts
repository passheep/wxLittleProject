/**
 * ICancelTokenSource
 */
export interface ICancelTokenSource<T = string> {
    /**
     * token
     */
    readonly token: CancelToken;
    /**
     * 取消函数
     */
    cancel(reason?: T): void;
}
/**
 * 为异步Promise和async/await 提供取消接口
 * @example `const cts = CancleToken.source(); cts.cancle()`
 */
export declare class CancelToken {
    /**
     * Promise of CancelToken
     */
    readonly promise: Promise<{
        errMsg: string;
    }>;
    private reason?;
    /**
     * 生成CancelToken
     * @param executor - callback
     */
    private constructor();
    /**
     * Create TokenSoure
     * @returns 生成一个CancelTokenSource
     */
    static source(): ICancelTokenSource;
    /**
     * 是否已取消
     */
    isCancelled(): boolean;
    /**
     * 如果已取消，抛出异常
     * 防止二次取消
     * @throws { errMsg: string }
     */
    throwIfRequested(): void | never;
}
//# sourceMappingURL=index.d.ts.map