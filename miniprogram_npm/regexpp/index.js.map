{"version":3,"sources":["index.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["/*! @author Toru Nagashima <https://github.com/mysticatea> */\n\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n\n\nvar ast = /*#__PURE__*/Object.freeze({\n\n});\n\nfunction isIdStart(cp) {\n    if (cp < 0x41)\n        return false;\n    if (cp < 0x5b)\n        return true;\n    if (cp < 0x61)\n        return false;\n    if (cp < 0x7b)\n        return true;\n    return isLargeIdStart(cp);\n}\nfunction isIdContinue(cp) {\n    if (cp < 0x30)\n        return false;\n    if (cp < 0x3a)\n        return true;\n    if (cp < 0x41)\n        return false;\n    if (cp < 0x5b)\n        return true;\n    if (cp === 0x5f)\n        return true;\n    if (cp < 0x61)\n        return false;\n    if (cp < 0x7b)\n        return true;\n    return isLargeIdStart(cp) || isLargeIdContinue(cp);\n}\nfunction isLargeIdStart(cp) {\n    if (cp < 0x30a1) {\n        if (cp < 0xec0) {\n            if (cp < 0xa35) {\n                if (cp < 0x6e5) {\n                    if (cp < 0x37a) {\n                        if (cp < 0x294) {\n                            if (cp < 0xf8) {\n                                if (cp === 0xaa)\n                                    return true;\n                                if (cp === 0xb5)\n                                    return true;\n                                if (cp === 0xba)\n                                    return true;\n                                if (cp < 0xc0)\n                                    return false;\n                                if (cp < 0xd7)\n                                    return true;\n                                if (cp < 0xd8)\n                                    return false;\n                                if (cp < 0xf7)\n                                    return true;\n                                return false;\n                            }\n                            if (cp < 0x1bb)\n                                return true;\n                            if (cp === 0x1bb)\n                                return true;\n                            if (cp < 0x1bc)\n                                return false;\n                            if (cp < 0x1c0)\n                                return true;\n                            if (cp < 0x1c0)\n                                return false;\n                            if (cp < 0x1c4)\n                                return true;\n                            if (cp < 0x1c4)\n                                return false;\n                            if (cp < 0x294)\n                                return true;\n                            return false;\n                        }\n                        if (cp < 0x2ec) {\n                            if (cp === 0x294)\n                                return true;\n                            if (cp < 0x295)\n                                return false;\n                            if (cp < 0x2b0)\n                                return true;\n                            if (cp < 0x2b0)\n                                return false;\n                            if (cp < 0x2c2)\n                                return true;\n                            if (cp < 0x2c6)\n                                return false;\n                            if (cp < 0x2d2)\n                                return true;\n                            if (cp < 0x2e0)\n                                return false;\n                            if (cp < 0x2e5)\n                                return true;\n                            return false;\n                        }\n                        if (cp === 0x2ec)\n                            return true;\n                        if (cp === 0x2ee)\n                            return true;\n                        if (cp < 0x370)\n                            return false;\n                        if (cp < 0x374)\n                            return true;\n                        if (cp === 0x374)\n                            return true;\n                        if (cp < 0x376)\n                            return false;\n                        if (cp < 0x378)\n                            return true;\n                        return false;\n                    }\n                    if (cp < 0x531) {\n                        if (cp < 0x38c) {\n                            if (cp === 0x37a)\n                                return true;\n                            if (cp < 0x37b)\n                                return false;\n                            if (cp < 0x37e)\n                                return true;\n                            if (cp === 0x37f)\n                                return true;\n                            if (cp === 0x386)\n                                return true;\n                            if (cp < 0x388)\n                                return false;\n                            if (cp < 0x38b)\n                                return true;\n                            return false;\n                        }\n                        if (cp === 0x38c)\n                            return true;\n                        if (cp < 0x38e)\n                            return false;\n                        if (cp < 0x3a2)\n                            return true;\n                        if (cp < 0x3a3)\n                            return false;\n                        if (cp < 0x3f6)\n                            return true;\n                        if (cp < 0x3f7)\n                            return false;\n                        if (cp < 0x482)\n                            return true;\n                        if (cp < 0x48a)\n                            return false;\n                        if (cp < 0x530)\n                            return true;\n                        return false;\n                    }\n                    if (cp < 0x620) {\n                        if (cp < 0x531)\n                            return false;\n                        if (cp < 0x557)\n                            return true;\n                        if (cp === 0x559)\n                            return true;\n                        if (cp < 0x560)\n                            return false;\n                        if (cp < 0x589)\n                            return true;\n                        if (cp < 0x5d0)\n                            return false;\n                        if (cp < 0x5eb)\n                            return true;\n                        if (cp < 0x5ef)\n                            return false;\n                        if (cp < 0x5f3)\n                            return true;\n                        return false;\n                    }\n                    if (cp < 0x640)\n                        return true;\n                    if (cp === 0x640)\n                        return true;\n                    if (cp < 0x641)\n                        return false;\n                    if (cp < 0x64b)\n                        return true;\n                    if (cp < 0x66e)\n                        return false;\n                    if (cp < 0x670)\n                        return true;\n                    if (cp < 0x671)\n                        return false;\n                    if (cp < 0x6d4)\n                        return true;\n                    if (cp === 0x6d5)\n                        return true;\n                    return false;\n                }\n                if (cp < 0x950) {\n                    if (cp < 0x7fa) {\n                        if (cp < 0x712) {\n                            if (cp < 0x6e5)\n                                return false;\n                            if (cp < 0x6e7)\n                                return true;\n                            if (cp < 0x6ee)\n                                return false;\n                            if (cp < 0x6f0)\n                                return true;\n                            if (cp < 0x6fa)\n                                return false;\n                            if (cp < 0x6fd)\n                                return true;\n                            if (cp === 0x6ff)\n                                return true;\n                            if (cp === 0x710)\n                                return true;\n                            return false;\n                        }\n                        if (cp < 0x730)\n                            return true;\n                        if (cp < 0x74d)\n                            return false;\n                        if (cp < 0x7a6)\n                            return true;\n                        if (cp === 0x7b1)\n                            return true;\n                        if (cp < 0x7ca)\n                            return false;\n                        if (cp < 0x7eb)\n                            return true;\n                        if (cp < 0x7f4)\n                            return false;\n                        if (cp < 0x7f6)\n                            return true;\n                        return false;\n                    }\n                    if (cp < 0x840) {\n                        if (cp === 0x7fa)\n                            return true;\n                        if (cp < 0x800)\n                            return false;\n                        if (cp < 0x816)\n                            return true;\n                        if (cp === 0x81a)\n                            return true;\n                        if (cp === 0x824)\n                            return true;\n                        if (cp === 0x828)\n                            return true;\n                        return false;\n                    }\n                    if (cp < 0x859)\n                        return true;\n                    if (cp < 0x860)\n                        return false;\n                    if (cp < 0x86b)\n                        return true;\n                    if (cp < 0x8a0)\n                        return false;\n                    if (cp < 0x8b5)\n                        return true;\n                    if (cp < 0x8b6)\n                        return false;\n                    if (cp < 0x8be)\n                        return true;\n                    if (cp < 0x904)\n                        return false;\n                    if (cp < 0x93a)\n                        return true;\n                    if (cp === 0x93d)\n                        return true;\n                    return false;\n                }\n                if (cp < 0x9bd) {\n                    if (cp < 0x98f) {\n                        if (cp === 0x950)\n                            return true;\n                        if (cp < 0x958)\n                            return false;\n                        if (cp < 0x962)\n                            return true;\n                        if (cp === 0x971)\n                            return true;\n                        if (cp < 0x972)\n                            return false;\n                        if (cp < 0x981)\n                            return true;\n                        if (cp < 0x985)\n                            return false;\n                        if (cp < 0x98d)\n                            return true;\n                        return false;\n                    }\n                    if (cp < 0x991)\n                        return true;\n                    if (cp < 0x993)\n                        return false;\n                    if (cp < 0x9a9)\n                        return true;\n                    if (cp < 0x9aa)\n                        return false;\n                    if (cp < 0x9b1)\n                        return true;\n                    if (cp === 0x9b2)\n                        return true;\n                    if (cp < 0x9b6)\n                        return false;\n                    if (cp < 0x9ba)\n                        return true;\n                    return false;\n                }\n                if (cp < 0x9fc) {\n                    if (cp === 0x9bd)\n                        return true;\n                    if (cp === 0x9ce)\n                        return true;\n                    if (cp < 0x9dc)\n                        return false;\n                    if (cp < 0x9de)\n                        return true;\n                    if (cp < 0x9df)\n                        return false;\n                    if (cp < 0x9e2)\n                        return true;\n                    if (cp < 0x9f0)\n                        return false;\n                    if (cp < 0x9f2)\n                        return true;\n                    return false;\n                }\n                if (cp === 0x9fc)\n                    return true;\n                if (cp < 0xa05)\n                    return false;\n                if (cp < 0xa0b)\n                    return true;\n                if (cp < 0xa0f)\n                    return false;\n                if (cp < 0xa11)\n                    return true;\n                if (cp < 0xa13)\n                    return false;\n                if (cp < 0xa29)\n                    return true;\n                if (cp < 0xa2a)\n                    return false;\n                if (cp < 0xa31)\n                    return true;\n                if (cp < 0xa32)\n                    return false;\n                if (cp < 0xa34)\n                    return true;\n                return false;\n            }\n            if (cp < 0xc60) {\n                if (cp < 0xb3d) {\n                    if (cp < 0xab5) {\n                        if (cp < 0xa85) {\n                            if (cp < 0xa35)\n                                return false;\n                            if (cp < 0xa37)\n                                return true;\n                            if (cp < 0xa38)\n                                return false;\n                            if (cp < 0xa3a)\n                                return true;\n                            if (cp < 0xa59)\n                                return false;\n                            if (cp < 0xa5d)\n                                return true;\n                            if (cp === 0xa5e)\n                                return true;\n                            if (cp < 0xa72)\n                                return false;\n                            if (cp < 0xa75)\n                                return true;\n                            return false;\n                        }\n                        if (cp < 0xa8e)\n                            return true;\n                        if (cp < 0xa8f)\n                            return false;\n                        if (cp < 0xa92)\n                            return true;\n                        if (cp < 0xa93)\n                            return false;\n                        if (cp < 0xaa9)\n                            return true;\n                        if (cp < 0xaaa)\n                            return false;\n                        if (cp < 0xab1)\n                            return true;\n                        if (cp < 0xab2)\n                            return false;\n                        if (cp < 0xab4)\n                            return true;\n                        return false;\n                    }\n                    if (cp < 0xb05) {\n                        if (cp < 0xab5)\n                            return false;\n                        if (cp < 0xaba)\n                            return true;\n                        if (cp === 0xabd)\n                            return true;\n                        if (cp === 0xad0)\n                            return true;\n                        if (cp < 0xae0)\n                            return false;\n                        if (cp < 0xae2)\n                            return true;\n                        if (cp === 0xaf9)\n                            return true;\n                        return false;\n                    }\n                    if (cp < 0xb0d)\n                        return true;\n                    if (cp < 0xb0f)\n                        return false;\n                    if (cp < 0xb11)\n                        return true;\n                    if (cp < 0xb13)\n                        return false;\n                    if (cp < 0xb29)\n                        return true;\n                    if (cp < 0xb2a)\n                        return false;\n                    if (cp < 0xb31)\n                        return true;\n                    if (cp < 0xb32)\n                        return false;\n                    if (cp < 0xb34)\n                        return true;\n                    if (cp < 0xb35)\n                        return false;\n                    if (cp < 0xb3a)\n                        return true;\n                    return false;\n                }\n                if (cp < 0xb9e) {\n                    if (cp < 0xb85) {\n                        if (cp === 0xb3d)\n                            return true;\n                        if (cp < 0xb5c)\n                            return false;\n                        if (cp < 0xb5e)\n                            return true;\n                        if (cp < 0xb5f)\n                            return false;\n                        if (cp < 0xb62)\n                            return true;\n                        if (cp === 0xb71)\n                            return true;\n                        if (cp === 0xb83)\n                            return true;\n                        return false;\n                    }\n                    if (cp < 0xb8b)\n                        return true;\n                    if (cp < 0xb8e)\n                        return false;\n                    if (cp < 0xb91)\n                        return true;\n                    if (cp < 0xb92)\n                        return false;\n                    if (cp < 0xb96)\n                        return true;\n                    if (cp < 0xb99)\n                        return false;\n                    if (cp < 0xb9b)\n                        return true;\n                    if (cp === 0xb9c)\n                        return true;\n                    return false;\n                }\n                if (cp < 0xc05) {\n                    if (cp < 0xb9e)\n                        return false;\n                    if (cp < 0xba0)\n                        return true;\n                    if (cp < 0xba3)\n                        return false;\n                    if (cp < 0xba5)\n                        return true;\n                    if (cp < 0xba8)\n                        return false;\n                    if (cp < 0xbab)\n                        return true;\n                    if (cp < 0xbae)\n                        return false;\n                    if (cp < 0xbba)\n                        return true;\n                    if (cp === 0xbd0)\n                        return true;\n                    return false;\n                }\n                if (cp < 0xc0d)\n                    return true;\n                if (cp < 0xc0e)\n                    return false;\n                if (cp < 0xc11)\n                    return true;\n                if (cp < 0xc12)\n                    return false;\n                if (cp < 0xc29)\n                    return true;\n                if (cp < 0xc2a)\n                    return false;\n                if (cp < 0xc3a)\n                    return true;\n                if (cp === 0xc3d)\n                    return true;\n                if (cp < 0xc58)\n                    return false;\n                if (cp < 0xc5b)\n                    return true;\n                return false;\n            }\n            if (cp < 0xdb3) {\n                if (cp < 0xcf1) {\n                    if (cp < 0xcaa) {\n                        if (cp < 0xc60)\n                            return false;\n                        if (cp < 0xc62)\n                            return true;\n                        if (cp === 0xc80)\n                            return true;\n                        if (cp < 0xc85)\n                            return false;\n                        if (cp < 0xc8d)\n                            return true;\n                        if (cp < 0xc8e)\n                            return false;\n                        if (cp < 0xc91)\n                            return true;\n                        if (cp < 0xc92)\n                            return false;\n                        if (cp < 0xca9)\n                            return true;\n                        return false;\n                    }\n                    if (cp < 0xcb4)\n                        return true;\n                    if (cp < 0xcb5)\n                        return false;\n                    if (cp < 0xcba)\n                        return true;\n                    if (cp === 0xcbd)\n                        return true;\n                    if (cp === 0xcde)\n                        return true;\n                    if (cp < 0xce0)\n                        return false;\n                    if (cp < 0xce2)\n                        return true;\n                    return false;\n                }\n                if (cp < 0xd4e) {\n                    if (cp < 0xcf1)\n                        return false;\n                    if (cp < 0xcf3)\n                        return true;\n                    if (cp < 0xd05)\n                        return false;\n                    if (cp < 0xd0d)\n                        return true;\n                    if (cp < 0xd0e)\n                        return false;\n                    if (cp < 0xd11)\n                        return true;\n                    if (cp < 0xd12)\n                        return false;\n                    if (cp < 0xd3b)\n                        return true;\n                    if (cp === 0xd3d)\n                        return true;\n                    return false;\n                }\n                if (cp === 0xd4e)\n                    return true;\n                if (cp < 0xd54)\n                    return false;\n                if (cp < 0xd57)\n                    return true;\n                if (cp < 0xd5f)\n                    return false;\n                if (cp < 0xd62)\n                    return true;\n                if (cp < 0xd7a)\n                    return false;\n                if (cp < 0xd80)\n                    return true;\n                if (cp < 0xd85)\n                    return false;\n                if (cp < 0xd97)\n                    return true;\n                if (cp < 0xd9a)\n                    return false;\n                if (cp < 0xdb2)\n                    return true;\n                return false;\n            }\n            if (cp < 0xe8a) {\n                if (cp < 0xe40) {\n                    if (cp < 0xdb3)\n                        return false;\n                    if (cp < 0xdbc)\n                        return true;\n                    if (cp === 0xdbd)\n                        return true;\n                    if (cp < 0xdc0)\n                        return false;\n                    if (cp < 0xdc7)\n                        return true;\n                    if (cp < 0xe01)\n                        return false;\n                    if (cp < 0xe31)\n                        return true;\n                    if (cp < 0xe32)\n                        return false;\n                    if (cp < 0xe34)\n                        return true;\n                    return false;\n                }\n                if (cp < 0xe46)\n                    return true;\n                if (cp === 0xe46)\n                    return true;\n                if (cp < 0xe81)\n                    return false;\n                if (cp < 0xe83)\n                    return true;\n                if (cp === 0xe84)\n                    return true;\n                if (cp < 0xe87)\n                    return false;\n                if (cp < 0xe89)\n                    return true;\n                return false;\n            }\n            if (cp < 0xea5) {\n                if (cp === 0xe8a)\n                    return true;\n                if (cp === 0xe8d)\n                    return true;\n                if (cp < 0xe94)\n                    return false;\n                if (cp < 0xe98)\n                    return true;\n                if (cp < 0xe99)\n                    return false;\n                if (cp < 0xea0)\n                    return true;\n                if (cp < 0xea1)\n                    return false;\n                if (cp < 0xea4)\n                    return true;\n                return false;\n            }\n            if (cp === 0xea5)\n                return true;\n            if (cp === 0xea7)\n                return true;\n            if (cp < 0xeaa)\n                return false;\n            if (cp < 0xeac)\n                return true;\n            if (cp < 0xead)\n                return false;\n            if (cp < 0xeb1)\n                return true;\n            if (cp < 0xeb2)\n                return false;\n            if (cp < 0xeb4)\n                return true;\n            if (cp === 0xebd)\n                return true;\n            return false;\n        }\n        if (cp < 0x1ce9) {\n            if (cp < 0x166f) {\n                if (cp < 0x10fd) {\n                    if (cp < 0x105a) {\n                        if (cp < 0xf49) {\n                            if (cp < 0xec0)\n                                return false;\n                            if (cp < 0xec5)\n                                return true;\n                            if (cp === 0xec6)\n                                return true;\n                            if (cp < 0xedc)\n                                return false;\n                            if (cp < 0xee0)\n                                return true;\n                            if (cp === 0xf00)\n                                return true;\n                            if (cp < 0xf40)\n                                return false;\n                            if (cp < 0xf48)\n                                return true;\n                            return false;\n                        }\n                        if (cp < 0xf6d)\n                            return true;\n                        if (cp < 0xf88)\n                            return false;\n                        if (cp < 0xf8d)\n                            return true;\n                        if (cp < 0x1000)\n                            return false;\n                        if (cp < 0x102b)\n                            return true;\n                        if (cp === 0x103f)\n                            return true;\n                        if (cp < 0x1050)\n                            return false;\n                        if (cp < 0x1056)\n                            return true;\n                        return false;\n                    }\n                    if (cp < 0x108e) {\n                        if (cp < 0x105a)\n                            return false;\n                        if (cp < 0x105e)\n                            return true;\n                        if (cp === 0x1061)\n                            return true;\n                        if (cp < 0x1065)\n                            return false;\n                        if (cp < 0x1067)\n                            return true;\n                        if (cp < 0x106e)\n                            return false;\n                        if (cp < 0x1071)\n                            return true;\n                        if (cp < 0x1075)\n                            return false;\n                        if (cp < 0x1082)\n                            return true;\n                        return false;\n                    }\n                    if (cp === 0x108e)\n                        return true;\n                    if (cp < 0x10a0)\n                        return false;\n                    if (cp < 0x10c6)\n                        return true;\n                    if (cp === 0x10c7)\n                        return true;\n                    if (cp === 0x10cd)\n                        return true;\n                    if (cp < 0x10d0)\n                        return false;\n                    if (cp < 0x10fb)\n                        return true;\n                    if (cp === 0x10fc)\n                        return true;\n                    return false;\n                }\n                if (cp < 0x12b8) {\n                    if (cp < 0x125a) {\n                        if (cp < 0x10fd)\n                            return false;\n                        if (cp < 0x1100)\n                            return true;\n                        if (cp < 0x1100)\n                            return false;\n                        if (cp < 0x1249)\n                            return true;\n                        if (cp < 0x124a)\n                            return false;\n                        if (cp < 0x124e)\n                            return true;\n                        if (cp < 0x1250)\n                            return false;\n                        if (cp < 0x1257)\n                            return true;\n                        if (cp === 0x1258)\n                            return true;\n                        return false;\n                    }\n                    if (cp < 0x125e)\n                        return true;\n                    if (cp < 0x1260)\n                        return false;\n                    if (cp < 0x1289)\n                        return true;\n                    if (cp < 0x128a)\n                        return false;\n                    if (cp < 0x128e)\n                        return true;\n                    if (cp < 0x1290)\n                        return false;\n                    if (cp < 0x12b1)\n                        return true;\n                    if (cp < 0x12b2)\n                        return false;\n                    if (cp < 0x12b6)\n                        return true;\n                    return false;\n                }\n                if (cp < 0x1312) {\n                    if (cp < 0x12b8)\n                        return false;\n                    if (cp < 0x12bf)\n                        return true;\n                    if (cp === 0x12c0)\n                        return true;\n                    if (cp < 0x12c2)\n                        return false;\n                    if (cp < 0x12c6)\n                        return true;\n                    if (cp < 0x12c8)\n                        return false;\n                    if (cp < 0x12d7)\n                        return true;\n                    if (cp < 0x12d8)\n                        return false;\n                    if (cp < 0x1311)\n                        return true;\n                    return false;\n                }\n                if (cp < 0x1316)\n                    return true;\n                if (cp < 0x1318)\n                    return false;\n                if (cp < 0x135b)\n                    return true;\n                if (cp < 0x1380)\n                    return false;\n                if (cp < 0x1390)\n                    return true;\n                if (cp < 0x13a0)\n                    return false;\n                if (cp < 0x13f6)\n                    return true;\n                if (cp < 0x13f8)\n                    return false;\n                if (cp < 0x13fe)\n                    return true;\n                if (cp < 0x1401)\n                    return false;\n                if (cp < 0x166d)\n                    return true;\n                return false;\n            }\n            if (cp < 0x18b0) {\n                if (cp < 0x176e) {\n                    if (cp < 0x1700) {\n                        if (cp < 0x166f)\n                            return false;\n                        if (cp < 0x1680)\n                            return true;\n                        if (cp < 0x1681)\n                            return false;\n                        if (cp < 0x169b)\n                            return true;\n                        if (cp < 0x16a0)\n                            return false;\n                        if (cp < 0x16eb)\n                            return true;\n                        if (cp < 0x16ee)\n                            return false;\n                        if (cp < 0x16f1)\n                            return true;\n                        if (cp < 0x16f1)\n                            return false;\n                        if (cp < 0x16f9)\n                            return true;\n                        return false;\n                    }\n                    if (cp < 0x170d)\n                        return true;\n                    if (cp < 0x170e)\n                        return false;\n                    if (cp < 0x1712)\n                        return true;\n                    if (cp < 0x1720)\n                        return false;\n                    if (cp < 0x1732)\n                        return true;\n                    if (cp < 0x1740)\n                        return false;\n                    if (cp < 0x1752)\n                        return true;\n                    if (cp < 0x1760)\n                        return false;\n                    if (cp < 0x176d)\n                        return true;\n                    return false;\n                }\n                if (cp < 0x1843) {\n                    if (cp < 0x176e)\n                        return false;\n                    if (cp < 0x1771)\n                        return true;\n                    if (cp < 0x1780)\n                        return false;\n                    if (cp < 0x17b4)\n                        return true;\n                    if (cp === 0x17d7)\n                        return true;\n                    if (cp === 0x17dc)\n                        return true;\n                    if (cp < 0x1820)\n                        return false;\n                    if (cp < 0x1843)\n                        return true;\n                    return false;\n                }\n                if (cp === 0x1843)\n                    return true;\n                if (cp < 0x1844)\n                    return false;\n                if (cp < 0x1879)\n                    return true;\n                if (cp < 0x1880)\n                    return false;\n                if (cp < 0x1885)\n                    return true;\n                if (cp < 0x1885)\n                    return false;\n                if (cp < 0x1887)\n                    return true;\n                if (cp < 0x1887)\n                    return false;\n                if (cp < 0x18a9)\n                    return true;\n                if (cp === 0x18aa)\n                    return true;\n                return false;\n            }\n            if (cp < 0x1b45) {\n                if (cp < 0x19b0) {\n                    if (cp < 0x18b0)\n                        return false;\n                    if (cp < 0x18f6)\n                        return true;\n                    if (cp < 0x1900)\n                        return false;\n                    if (cp < 0x191f)\n                        return true;\n                    if (cp < 0x1950)\n                        return false;\n                    if (cp < 0x196e)\n                        return true;\n                    if (cp < 0x1970)\n                        return false;\n                    if (cp < 0x1975)\n                        return true;\n                    if (cp < 0x1980)\n                        return false;\n                    if (cp < 0x19ac)\n                        return true;\n                    return false;\n                }\n                if (cp < 0x19ca)\n                    return true;\n                if (cp < 0x1a00)\n                    return false;\n                if (cp < 0x1a17)\n                    return true;\n                if (cp < 0x1a20)\n                    return false;\n                if (cp < 0x1a55)\n                    return true;\n                if (cp === 0x1aa7)\n                    return true;\n                if (cp < 0x1b05)\n                    return false;\n                if (cp < 0x1b34)\n                    return true;\n                return false;\n            }\n            if (cp < 0x1c4d) {\n                if (cp < 0x1b45)\n                    return false;\n                if (cp < 0x1b4c)\n                    return true;\n                if (cp < 0x1b83)\n                    return false;\n                if (cp < 0x1ba1)\n                    return true;\n                if (cp < 0x1bae)\n                    return false;\n                if (cp < 0x1bb0)\n                    return true;\n                if (cp < 0x1bba)\n                    return false;\n                if (cp < 0x1be6)\n                    return true;\n                if (cp < 0x1c00)\n                    return false;\n                if (cp < 0x1c24)\n                    return true;\n                return false;\n            }\n            if (cp < 0x1c50)\n                return true;\n            if (cp < 0x1c5a)\n                return false;\n            if (cp < 0x1c78)\n                return true;\n            if (cp < 0x1c78)\n                return false;\n            if (cp < 0x1c7e)\n                return true;\n            if (cp < 0x1c80)\n                return false;\n            if (cp < 0x1c89)\n                return true;\n            if (cp < 0x1c90)\n                return false;\n            if (cp < 0x1cbb)\n                return true;\n            if (cp < 0x1cbd)\n                return false;\n            if (cp < 0x1cc0)\n                return true;\n            return false;\n        }\n        if (cp < 0x212f) {\n            if (cp < 0x1fc2) {\n                if (cp < 0x1f18) {\n                    if (cp < 0x1d6b) {\n                        if (cp < 0x1ce9)\n                            return false;\n                        if (cp < 0x1ced)\n                            return true;\n                        if (cp < 0x1cee)\n                            return false;\n                        if (cp < 0x1cf2)\n                            return true;\n                        if (cp < 0x1cf5)\n                            return false;\n                        if (cp < 0x1cf7)\n                            return true;\n                        if (cp < 0x1d00)\n                            return false;\n                        if (cp < 0x1d2c)\n                            return true;\n                        if (cp < 0x1d2c)\n                            return false;\n                        if (cp < 0x1d6b)\n                            return true;\n                        return false;\n                    }\n                    if (cp < 0x1d78)\n                        return true;\n                    if (cp === 0x1d78)\n                        return true;\n                    if (cp < 0x1d79)\n                        return false;\n                    if (cp < 0x1d9b)\n                        return true;\n                    if (cp < 0x1d9b)\n                        return false;\n                    if (cp < 0x1dc0)\n                        return true;\n                    if (cp < 0x1e00)\n                        return false;\n                    if (cp < 0x1f16)\n                        return true;\n                    return false;\n                }\n                if (cp < 0x1f5b) {\n                    if (cp < 0x1f18)\n                        return false;\n                    if (cp < 0x1f1e)\n                        return true;\n                    if (cp < 0x1f20)\n                        return false;\n                    if (cp < 0x1f46)\n                        return true;\n                    if (cp < 0x1f48)\n                        return false;\n                    if (cp < 0x1f4e)\n                        return true;\n                    if (cp < 0x1f50)\n                        return false;\n                    if (cp < 0x1f58)\n                        return true;\n                    if (cp === 0x1f59)\n                        return true;\n                    return false;\n                }\n                if (cp === 0x1f5b)\n                    return true;\n                if (cp === 0x1f5d)\n                    return true;\n                if (cp < 0x1f5f)\n                    return false;\n                if (cp < 0x1f7e)\n                    return true;\n                if (cp < 0x1f80)\n                    return false;\n                if (cp < 0x1fb5)\n                    return true;\n                if (cp < 0x1fb6)\n                    return false;\n                if (cp < 0x1fbd)\n                    return true;\n                if (cp === 0x1fbe)\n                    return true;\n                return false;\n            }\n            if (cp < 0x2102) {\n                if (cp < 0x1ff2) {\n                    if (cp < 0x1fc2)\n                        return false;\n                    if (cp < 0x1fc5)\n                        return true;\n                    if (cp < 0x1fc6)\n                        return false;\n                    if (cp < 0x1fcd)\n                        return true;\n                    if (cp < 0x1fd0)\n                        return false;\n                    if (cp < 0x1fd4)\n                        return true;\n                    if (cp < 0x1fd6)\n                        return false;\n                    if (cp < 0x1fdc)\n                        return true;\n                    if (cp < 0x1fe0)\n                        return false;\n                    if (cp < 0x1fed)\n                        return true;\n                    return false;\n                }\n                if (cp < 0x1ff5)\n                    return true;\n                if (cp < 0x1ff6)\n                    return false;\n                if (cp < 0x1ffd)\n                    return true;\n                if (cp === 0x2071)\n                    return true;\n                if (cp === 0x207f)\n                    return true;\n                if (cp < 0x2090)\n                    return false;\n                if (cp < 0x209d)\n                    return true;\n                return false;\n            }\n            if (cp < 0x2119) {\n                if (cp === 0x2102)\n                    return true;\n                if (cp === 0x2107)\n                    return true;\n                if (cp < 0x210a)\n                    return false;\n                if (cp < 0x2114)\n                    return true;\n                if (cp === 0x2115)\n                    return true;\n                if (cp === 0x2118)\n                    return true;\n                return false;\n            }\n            if (cp < 0x211e)\n                return true;\n            if (cp === 0x2124)\n                return true;\n            if (cp === 0x2126)\n                return true;\n            if (cp === 0x2128)\n                return true;\n            if (cp < 0x212a)\n                return false;\n            if (cp < 0x212e)\n                return true;\n            if (cp === 0x212e)\n                return true;\n            return false;\n        }\n        if (cp < 0x2d80) {\n            if (cp < 0x2c30) {\n                if (cp < 0x214e) {\n                    if (cp < 0x212f)\n                        return false;\n                    if (cp < 0x2135)\n                        return true;\n                    if (cp < 0x2135)\n                        return false;\n                    if (cp < 0x2139)\n                        return true;\n                    if (cp === 0x2139)\n                        return true;\n                    if (cp < 0x213c)\n                        return false;\n                    if (cp < 0x2140)\n                        return true;\n                    if (cp < 0x2145)\n                        return false;\n                    if (cp < 0x214a)\n                        return true;\n                    return false;\n                }\n                if (cp === 0x214e)\n                    return true;\n                if (cp < 0x2160)\n                    return false;\n                if (cp < 0x2183)\n                    return true;\n                if (cp < 0x2183)\n                    return false;\n                if (cp < 0x2185)\n                    return true;\n                if (cp < 0x2185)\n                    return false;\n                if (cp < 0x2189)\n                    return true;\n                if (cp < 0x2c00)\n                    return false;\n                if (cp < 0x2c2f)\n                    return true;\n                return false;\n            }\n            if (cp < 0x2cf2) {\n                if (cp < 0x2c30)\n                    return false;\n                if (cp < 0x2c5f)\n                    return true;\n                if (cp < 0x2c60)\n                    return false;\n                if (cp < 0x2c7c)\n                    return true;\n                if (cp < 0x2c7c)\n                    return false;\n                if (cp < 0x2c7e)\n                    return true;\n                if (cp < 0x2c7e)\n                    return false;\n                if (cp < 0x2ce5)\n                    return true;\n                if (cp < 0x2ceb)\n                    return false;\n                if (cp < 0x2cef)\n                    return true;\n                return false;\n            }\n            if (cp < 0x2cf4)\n                return true;\n            if (cp < 0x2d00)\n                return false;\n            if (cp < 0x2d26)\n                return true;\n            if (cp === 0x2d27)\n                return true;\n            if (cp === 0x2d2d)\n                return true;\n            if (cp < 0x2d30)\n                return false;\n            if (cp < 0x2d68)\n                return true;\n            if (cp === 0x2d6f)\n                return true;\n            return false;\n        }\n        if (cp < 0x3006) {\n            if (cp < 0x2dc0) {\n                if (cp < 0x2d80)\n                    return false;\n                if (cp < 0x2d97)\n                    return true;\n                if (cp < 0x2da0)\n                    return false;\n                if (cp < 0x2da7)\n                    return true;\n                if (cp < 0x2da8)\n                    return false;\n                if (cp < 0x2daf)\n                    return true;\n                if (cp < 0x2db0)\n                    return false;\n                if (cp < 0x2db7)\n                    return true;\n                if (cp < 0x2db8)\n                    return false;\n                if (cp < 0x2dbf)\n                    return true;\n                return false;\n            }\n            if (cp < 0x2dc7)\n                return true;\n            if (cp < 0x2dc8)\n                return false;\n            if (cp < 0x2dcf)\n                return true;\n            if (cp < 0x2dd0)\n                return false;\n            if (cp < 0x2dd7)\n                return true;\n            if (cp < 0x2dd8)\n                return false;\n            if (cp < 0x2ddf)\n                return true;\n            if (cp === 0x3005)\n                return true;\n            return false;\n        }\n        if (cp < 0x303b) {\n            if (cp === 0x3006)\n                return true;\n            if (cp === 0x3007)\n                return true;\n            if (cp < 0x3021)\n                return false;\n            if (cp < 0x302a)\n                return true;\n            if (cp < 0x3031)\n                return false;\n            if (cp < 0x3036)\n                return true;\n            if (cp < 0x3038)\n                return false;\n            if (cp < 0x303b)\n                return true;\n            return false;\n        }\n        if (cp === 0x303b)\n            return true;\n        if (cp === 0x303c)\n            return true;\n        if (cp < 0x3041)\n            return false;\n        if (cp < 0x3097)\n            return true;\n        if (cp < 0x309b)\n            return false;\n        if (cp < 0x309d)\n            return true;\n        if (cp < 0x309d)\n            return false;\n        if (cp < 0x309f)\n            return true;\n        if (cp === 0x309f)\n            return true;\n        return false;\n    }\n    if (cp < 0x10b60) {\n        if (cp < 0xd7b0) {\n            if (cp < 0xa882) {\n                if (cp < 0xa67f) {\n                    if (cp < 0xa015) {\n                        if (cp < 0x31a0) {\n                            if (cp < 0x30a1)\n                                return false;\n                            if (cp < 0x30fb)\n                                return true;\n                            if (cp < 0x30fc)\n                                return false;\n                            if (cp < 0x30ff)\n                                return true;\n                            if (cp === 0x30ff)\n                                return true;\n                            if (cp < 0x3105)\n                                return false;\n                            if (cp < 0x3130)\n                                return true;\n                            if (cp < 0x3131)\n                                return false;\n                            if (cp < 0x318f)\n                                return true;\n                            return false;\n                        }\n                        if (cp < 0x31bb)\n                            return true;\n                        if (cp < 0x31f0)\n                            return false;\n                        if (cp < 0x3200)\n                            return true;\n                        if (cp < 0x3400)\n                            return false;\n                        if (cp < 0x4db6)\n                            return true;\n                        if (cp < 0x4e00)\n                            return false;\n                        if (cp < 0x9ff0)\n                            return true;\n                        if (cp < 0xa000)\n                            return false;\n                        if (cp < 0xa015)\n                            return true;\n                        return false;\n                    }\n                    if (cp < 0xa60c) {\n                        if (cp === 0xa015)\n                            return true;\n                        if (cp < 0xa016)\n                            return false;\n                        if (cp < 0xa48d)\n                            return true;\n                        if (cp < 0xa4d0)\n                            return false;\n                        if (cp < 0xa4f8)\n                            return true;\n                        if (cp < 0xa4f8)\n                            return false;\n                        if (cp < 0xa4fe)\n                            return true;\n                        if (cp < 0xa500)\n                            return false;\n                        if (cp < 0xa60c)\n                            return true;\n                        return false;\n                    }\n                    if (cp === 0xa60c)\n                        return true;\n                    if (cp < 0xa610)\n                        return false;\n                    if (cp < 0xa620)\n                        return true;\n                    if (cp < 0xa62a)\n                        return false;\n                    if (cp < 0xa62c)\n                        return true;\n                    if (cp < 0xa640)\n                        return false;\n                    if (cp < 0xa66e)\n                        return true;\n                    if (cp === 0xa66e)\n                        return true;\n                    return false;\n                }\n                if (cp < 0xa78b) {\n                    if (cp < 0xa717) {\n                        if (cp === 0xa67f)\n                            return true;\n                        if (cp < 0xa680)\n                            return false;\n                        if (cp < 0xa69c)\n                            return true;\n                        if (cp < 0xa69c)\n                            return false;\n                        if (cp < 0xa69e)\n                            return true;\n                        if (cp < 0xa6a0)\n                            return false;\n                        if (cp < 0xa6e6)\n                            return true;\n                        if (cp < 0xa6e6)\n                            return false;\n                        if (cp < 0xa6f0)\n                            return true;\n                        return false;\n                    }\n                    if (cp < 0xa720)\n                        return true;\n                    if (cp < 0xa722)\n                        return false;\n                    if (cp < 0xa770)\n                        return true;\n                    if (cp === 0xa770)\n                        return true;\n                    if (cp < 0xa771)\n                        return false;\n                    if (cp < 0xa788)\n                        return true;\n                    if (cp === 0xa788)\n                        return true;\n                    return false;\n                }\n                if (cp < 0xa7fa) {\n                    if (cp < 0xa78b)\n                        return false;\n                    if (cp < 0xa78f)\n                        return true;\n                    if (cp === 0xa78f)\n                        return true;\n                    if (cp < 0xa790)\n                        return false;\n                    if (cp < 0xa7ba)\n                        return true;\n                    if (cp === 0xa7f7)\n                        return true;\n                    if (cp < 0xa7f8)\n                        return false;\n                    if (cp < 0xa7fa)\n                        return true;\n                    return false;\n                }\n                if (cp === 0xa7fa)\n                    return true;\n                if (cp < 0xa7fb)\n                    return false;\n                if (cp < 0xa802)\n                    return true;\n                if (cp < 0xa803)\n                    return false;\n                if (cp < 0xa806)\n                    return true;\n                if (cp < 0xa807)\n                    return false;\n                if (cp < 0xa80b)\n                    return true;\n                if (cp < 0xa80c)\n                    return false;\n                if (cp < 0xa823)\n                    return true;\n                if (cp < 0xa840)\n                    return false;\n                if (cp < 0xa874)\n                    return true;\n                return false;\n            }\n            if (cp < 0xaab1) {\n                if (cp < 0xa9e6) {\n                    if (cp < 0xa930) {\n                        if (cp < 0xa882)\n                            return false;\n                        if (cp < 0xa8b4)\n                            return true;\n                        if (cp < 0xa8f2)\n                            return false;\n                        if (cp < 0xa8f8)\n                            return true;\n                        if (cp === 0xa8fb)\n                            return true;\n                        if (cp < 0xa8fd)\n                            return false;\n                        if (cp < 0xa8ff)\n                            return true;\n                        if (cp < 0xa90a)\n                            return false;\n                        if (cp < 0xa926)\n                            return true;\n                        return false;\n                    }\n                    if (cp < 0xa947)\n                        return true;\n                    if (cp < 0xa960)\n                        return false;\n                    if (cp < 0xa97d)\n                        return true;\n                    if (cp < 0xa984)\n                        return false;\n                    if (cp < 0xa9b3)\n                        return true;\n                    if (cp === 0xa9cf)\n                        return true;\n                    if (cp < 0xa9e0)\n                        return false;\n                    if (cp < 0xa9e5)\n                        return true;\n                    return false;\n                }\n                if (cp < 0xaa44) {\n                    if (cp === 0xa9e6)\n                        return true;\n                    if (cp < 0xa9e7)\n                        return false;\n                    if (cp < 0xa9f0)\n                        return true;\n                    if (cp < 0xa9fa)\n                        return false;\n                    if (cp < 0xa9ff)\n                        return true;\n                    if (cp < 0xaa00)\n                        return false;\n                    if (cp < 0xaa29)\n                        return true;\n                    if (cp < 0xaa40)\n                        return false;\n                    if (cp < 0xaa43)\n                        return true;\n                    return false;\n                }\n                if (cp < 0xaa4c)\n                    return true;\n                if (cp < 0xaa60)\n                    return false;\n                if (cp < 0xaa70)\n                    return true;\n                if (cp === 0xaa70)\n                    return true;\n                if (cp < 0xaa71)\n                    return false;\n                if (cp < 0xaa77)\n                    return true;\n                if (cp === 0xaa7a)\n                    return true;\n                if (cp < 0xaa7e)\n                    return false;\n                if (cp < 0xaab0)\n                    return true;\n                return false;\n            }\n            if (cp < 0xab01) {\n                if (cp < 0xaadb) {\n                    if (cp === 0xaab1)\n                        return true;\n                    if (cp < 0xaab5)\n                        return false;\n                    if (cp < 0xaab7)\n                        return true;\n                    if (cp < 0xaab9)\n                        return false;\n                    if (cp < 0xaabe)\n                        return true;\n                    if (cp === 0xaac0)\n                        return true;\n                    if (cp === 0xaac2)\n                        return true;\n                    return false;\n                }\n                if (cp < 0xaadd)\n                    return true;\n                if (cp === 0xaadd)\n                    return true;\n                if (cp < 0xaae0)\n                    return false;\n                if (cp < 0xaaeb)\n                    return true;\n                if (cp === 0xaaf2)\n                    return true;\n                if (cp < 0xaaf3)\n                    return false;\n                if (cp < 0xaaf5)\n                    return true;\n                return false;\n            }\n            if (cp < 0xab30) {\n                if (cp < 0xab01)\n                    return false;\n                if (cp < 0xab07)\n                    return true;\n                if (cp < 0xab09)\n                    return false;\n                if (cp < 0xab0f)\n                    return true;\n                if (cp < 0xab11)\n                    return false;\n                if (cp < 0xab17)\n                    return true;\n                if (cp < 0xab20)\n                    return false;\n                if (cp < 0xab27)\n                    return true;\n                if (cp < 0xab28)\n                    return false;\n                if (cp < 0xab2f)\n                    return true;\n                return false;\n            }\n            if (cp < 0xab5b)\n                return true;\n            if (cp < 0xab5c)\n                return false;\n            if (cp < 0xab60)\n                return true;\n            if (cp < 0xab60)\n                return false;\n            if (cp < 0xab66)\n                return true;\n            if (cp < 0xab70)\n                return false;\n            if (cp < 0xabc0)\n                return true;\n            if (cp < 0xabc0)\n                return false;\n            if (cp < 0xabe3)\n                return true;\n            if (cp < 0xac00)\n                return false;\n            if (cp < 0xd7a4)\n                return true;\n            return false;\n        }\n        if (cp < 0x1032d) {\n            if (cp < 0xff41) {\n                if (cp < 0xfb3e) {\n                    if (cp < 0xfb13) {\n                        if (cp < 0xd7b0)\n                            return false;\n                        if (cp < 0xd7c7)\n                            return true;\n                        if (cp < 0xd7cb)\n                            return false;\n                        if (cp < 0xd7fc)\n                            return true;\n                        if (cp < 0xf900)\n                            return false;\n                        if (cp < 0xfa6e)\n                            return true;\n                        if (cp < 0xfa70)\n                            return false;\n                        if (cp < 0xfada)\n                            return true;\n                        if (cp < 0xfb00)\n                            return false;\n                        if (cp < 0xfb07)\n                            return true;\n                        return false;\n                    }\n                    if (cp < 0xfb18)\n                        return true;\n                    if (cp === 0xfb1d)\n                        return true;\n                    if (cp < 0xfb1f)\n                        return false;\n                    if (cp < 0xfb29)\n                        return true;\n                    if (cp < 0xfb2a)\n                        return false;\n                    if (cp < 0xfb37)\n                        return true;\n                    if (cp < 0xfb38)\n                        return false;\n                    if (cp < 0xfb3d)\n                        return true;\n                    return false;\n                }\n                if (cp < 0xfd50) {\n                    if (cp === 0xfb3e)\n                        return true;\n                    if (cp < 0xfb40)\n                        return false;\n                    if (cp < 0xfb42)\n                        return true;\n                    if (cp < 0xfb43)\n                        return false;\n                    if (cp < 0xfb45)\n                        return true;\n                    if (cp < 0xfb46)\n                        return false;\n                    if (cp < 0xfbb2)\n                        return true;\n                    if (cp < 0xfbd3)\n                        return false;\n                    if (cp < 0xfd3e)\n                        return true;\n                    return false;\n                }\n                if (cp < 0xfd90)\n                    return true;\n                if (cp < 0xfd92)\n                    return false;\n                if (cp < 0xfdc8)\n                    return true;\n                if (cp < 0xfdf0)\n                    return false;\n                if (cp < 0xfdfc)\n                    return true;\n                if (cp < 0xfe70)\n                    return false;\n                if (cp < 0xfe75)\n                    return true;\n                if (cp < 0xfe76)\n                    return false;\n                if (cp < 0xfefd)\n                    return true;\n                if (cp < 0xff21)\n                    return false;\n                if (cp < 0xff3b)\n                    return true;\n                return false;\n            }\n            if (cp < 0x10000) {\n                if (cp < 0xffa0) {\n                    if (cp < 0xff41)\n                        return false;\n                    if (cp < 0xff5b)\n                        return true;\n                    if (cp < 0xff66)\n                        return false;\n                    if (cp < 0xff70)\n                        return true;\n                    if (cp === 0xff70)\n                        return true;\n                    if (cp < 0xff71)\n                        return false;\n                    if (cp < 0xff9e)\n                        return true;\n                    if (cp < 0xff9e)\n                        return false;\n                    if (cp < 0xffa0)\n                        return true;\n                    return false;\n                }\n                if (cp < 0xffbf)\n                    return true;\n                if (cp < 0xffc2)\n                    return false;\n                if (cp < 0xffc8)\n                    return true;\n                if (cp < 0xffca)\n                    return false;\n                if (cp < 0xffd0)\n                    return true;\n                if (cp < 0xffd2)\n                    return false;\n                if (cp < 0xffd8)\n                    return true;\n                if (cp < 0xffda)\n                    return false;\n                if (cp < 0xffdd)\n                    return true;\n                return false;\n            }\n            if (cp < 0x10050) {\n                if (cp < 0x10000)\n                    return false;\n                if (cp < 0x1000c)\n                    return true;\n                if (cp < 0x1000d)\n                    return false;\n                if (cp < 0x10027)\n                    return true;\n                if (cp < 0x10028)\n                    return false;\n                if (cp < 0x1003b)\n                    return true;\n                if (cp < 0x1003c)\n                    return false;\n                if (cp < 0x1003e)\n                    return true;\n                if (cp < 0x1003f)\n                    return false;\n                if (cp < 0x1004e)\n                    return true;\n                return false;\n            }\n            if (cp < 0x1005e)\n                return true;\n            if (cp < 0x10080)\n                return false;\n            if (cp < 0x100fb)\n                return true;\n            if (cp < 0x10140)\n                return false;\n            if (cp < 0x10175)\n                return true;\n            if (cp < 0x10280)\n                return false;\n            if (cp < 0x1029d)\n                return true;\n            if (cp < 0x102a0)\n                return false;\n            if (cp < 0x102d1)\n                return true;\n            if (cp < 0x10300)\n                return false;\n            if (cp < 0x10320)\n                return true;\n            return false;\n        }\n        if (cp < 0x10837) {\n            if (cp < 0x10450) {\n                if (cp < 0x10380) {\n                    if (cp < 0x1032d)\n                        return false;\n                    if (cp < 0x10341)\n                        return true;\n                    if (cp === 0x10341)\n                        return true;\n                    if (cp < 0x10342)\n                        return false;\n                    if (cp < 0x1034a)\n                        return true;\n                    if (cp === 0x1034a)\n                        return true;\n                    if (cp < 0x10350)\n                        return false;\n                    if (cp < 0x10376)\n                        return true;\n                    return false;\n                }\n                if (cp < 0x1039e)\n                    return true;\n                if (cp < 0x103a0)\n                    return false;\n                if (cp < 0x103c4)\n                    return true;\n                if (cp < 0x103c8)\n                    return false;\n                if (cp < 0x103d0)\n                    return true;\n                if (cp < 0x103d1)\n                    return false;\n                if (cp < 0x103d6)\n                    return true;\n                if (cp < 0x10400)\n                    return false;\n                if (cp < 0x10450)\n                    return true;\n                return false;\n            }\n            if (cp < 0x10600) {\n                if (cp < 0x10450)\n                    return false;\n                if (cp < 0x1049e)\n                    return true;\n                if (cp < 0x104b0)\n                    return false;\n                if (cp < 0x104d4)\n                    return true;\n                if (cp < 0x104d8)\n                    return false;\n                if (cp < 0x104fc)\n                    return true;\n                if (cp < 0x10500)\n                    return false;\n                if (cp < 0x10528)\n                    return true;\n                if (cp < 0x10530)\n                    return false;\n                if (cp < 0x10564)\n                    return true;\n                return false;\n            }\n            if (cp < 0x10737)\n                return true;\n            if (cp < 0x10740)\n                return false;\n            if (cp < 0x10756)\n                return true;\n            if (cp < 0x10760)\n                return false;\n            if (cp < 0x10768)\n                return true;\n            if (cp < 0x10800)\n                return false;\n            if (cp < 0x10806)\n                return true;\n            if (cp === 0x10808)\n                return true;\n            if (cp < 0x1080a)\n                return false;\n            if (cp < 0x10836)\n                return true;\n            return false;\n        }\n        if (cp < 0x109be) {\n            if (cp < 0x108e0) {\n                if (cp < 0x10837)\n                    return false;\n                if (cp < 0x10839)\n                    return true;\n                if (cp === 0x1083c)\n                    return true;\n                if (cp < 0x1083f)\n                    return false;\n                if (cp < 0x10856)\n                    return true;\n                if (cp < 0x10860)\n                    return false;\n                if (cp < 0x10877)\n                    return true;\n                if (cp < 0x10880)\n                    return false;\n                if (cp < 0x1089f)\n                    return true;\n                return false;\n            }\n            if (cp < 0x108f3)\n                return true;\n            if (cp < 0x108f4)\n                return false;\n            if (cp < 0x108f6)\n                return true;\n            if (cp < 0x10900)\n                return false;\n            if (cp < 0x10916)\n                return true;\n            if (cp < 0x10920)\n                return false;\n            if (cp < 0x1093a)\n                return true;\n            if (cp < 0x10980)\n                return false;\n            if (cp < 0x109b8)\n                return true;\n            return false;\n        }\n        if (cp < 0x10a60) {\n            if (cp < 0x109be)\n                return false;\n            if (cp < 0x109c0)\n                return true;\n            if (cp === 0x10a00)\n                return true;\n            if (cp < 0x10a10)\n                return false;\n            if (cp < 0x10a14)\n                return true;\n            if (cp < 0x10a15)\n                return false;\n            if (cp < 0x10a18)\n                return true;\n            if (cp < 0x10a19)\n                return false;\n            if (cp < 0x10a36)\n                return true;\n            return false;\n        }\n        if (cp < 0x10a7d)\n            return true;\n        if (cp < 0x10a80)\n            return false;\n        if (cp < 0x10a9d)\n            return true;\n        if (cp < 0x10ac0)\n            return false;\n        if (cp < 0x10ac8)\n            return true;\n        if (cp < 0x10ac9)\n            return false;\n        if (cp < 0x10ae5)\n            return true;\n        if (cp < 0x10b00)\n            return false;\n        if (cp < 0x10b36)\n            return true;\n        if (cp < 0x10b40)\n            return false;\n        if (cp < 0x10b56)\n            return true;\n        return false;\n    }\n    if (cp < 0x16e40) {\n        if (cp < 0x11580) {\n            if (cp < 0x11213) {\n                if (cp < 0x11083) {\n                    if (cp < 0x10d00) {\n                        if (cp < 0x10b60)\n                            return false;\n                        if (cp < 0x10b73)\n                            return true;\n                        if (cp < 0x10b80)\n                            return false;\n                        if (cp < 0x10b92)\n                            return true;\n                        if (cp < 0x10c00)\n                            return false;\n                        if (cp < 0x10c49)\n                            return true;\n                        if (cp < 0x10c80)\n                            return false;\n                        if (cp < 0x10cb3)\n                            return true;\n                        if (cp < 0x10cc0)\n                            return false;\n                        if (cp < 0x10cf3)\n                            return true;\n                        return false;\n                    }\n                    if (cp < 0x10d24)\n                        return true;\n                    if (cp < 0x10f00)\n                        return false;\n                    if (cp < 0x10f1d)\n                        return true;\n                    if (cp === 0x10f27)\n                        return true;\n                    if (cp < 0x10f30)\n                        return false;\n                    if (cp < 0x10f46)\n                        return true;\n                    if (cp < 0x11003)\n                        return false;\n                    if (cp < 0x11038)\n                        return true;\n                    return false;\n                }\n                if (cp < 0x11176) {\n                    if (cp < 0x11083)\n                        return false;\n                    if (cp < 0x110b0)\n                        return true;\n                    if (cp < 0x110d0)\n                        return false;\n                    if (cp < 0x110e9)\n                        return true;\n                    if (cp < 0x11103)\n                        return false;\n                    if (cp < 0x11127)\n                        return true;\n                    if (cp === 0x11144)\n                        return true;\n                    if (cp < 0x11150)\n                        return false;\n                    if (cp < 0x11173)\n                        return true;\n                    return false;\n                }\n                if (cp === 0x11176)\n                    return true;\n                if (cp < 0x11183)\n                    return false;\n                if (cp < 0x111b3)\n                    return true;\n                if (cp < 0x111c1)\n                    return false;\n                if (cp < 0x111c5)\n                    return true;\n                if (cp === 0x111da)\n                    return true;\n                if (cp === 0x111dc)\n                    return true;\n                if (cp < 0x11200)\n                    return false;\n                if (cp < 0x11212)\n                    return true;\n                return false;\n            }\n            if (cp < 0x1132a) {\n                if (cp < 0x1129f) {\n                    if (cp < 0x11213)\n                        return false;\n                    if (cp < 0x1122c)\n                        return true;\n                    if (cp < 0x11280)\n                        return false;\n                    if (cp < 0x11287)\n                        return true;\n                    if (cp === 0x11288)\n                        return true;\n                    if (cp < 0x1128a)\n                        return false;\n                    if (cp < 0x1128e)\n                        return true;\n                    if (cp < 0x1128f)\n                        return false;\n                    if (cp < 0x1129e)\n                        return true;\n                    return false;\n                }\n                if (cp < 0x112a9)\n                    return true;\n                if (cp < 0x112b0)\n                    return false;\n                if (cp < 0x112df)\n                    return true;\n                if (cp < 0x11305)\n                    return false;\n                if (cp < 0x1130d)\n                    return true;\n                if (cp < 0x1130f)\n                    return false;\n                if (cp < 0x11311)\n                    return true;\n                if (cp < 0x11313)\n                    return false;\n                if (cp < 0x11329)\n                    return true;\n                return false;\n            }\n            if (cp < 0x1135d) {\n                if (cp < 0x1132a)\n                    return false;\n                if (cp < 0x11331)\n                    return true;\n                if (cp < 0x11332)\n                    return false;\n                if (cp < 0x11334)\n                    return true;\n                if (cp < 0x11335)\n                    return false;\n                if (cp < 0x1133a)\n                    return true;\n                if (cp === 0x1133d)\n                    return true;\n                if (cp === 0x11350)\n                    return true;\n                return false;\n            }\n            if (cp < 0x11362)\n                return true;\n            if (cp < 0x11400)\n                return false;\n            if (cp < 0x11435)\n                return true;\n            if (cp < 0x11447)\n                return false;\n            if (cp < 0x1144b)\n                return true;\n            if (cp < 0x11480)\n                return false;\n            if (cp < 0x114b0)\n                return true;\n            if (cp < 0x114c4)\n                return false;\n            if (cp < 0x114c6)\n                return true;\n            if (cp === 0x114c7)\n                return true;\n            return false;\n        }\n        if (cp < 0x11d00) {\n            if (cp < 0x11a0b) {\n                if (cp < 0x11700) {\n                    if (cp < 0x11580)\n                        return false;\n                    if (cp < 0x115af)\n                        return true;\n                    if (cp < 0x115d8)\n                        return false;\n                    if (cp < 0x115dc)\n                        return true;\n                    if (cp < 0x11600)\n                        return false;\n                    if (cp < 0x11630)\n                        return true;\n                    if (cp === 0x11644)\n                        return true;\n                    if (cp < 0x11680)\n                        return false;\n                    if (cp < 0x116ab)\n                        return true;\n                    return false;\n                }\n                if (cp < 0x1171b)\n                    return true;\n                if (cp < 0x11800)\n                    return false;\n                if (cp < 0x1182c)\n                    return true;\n                if (cp < 0x118a0)\n                    return false;\n                if (cp < 0x118e0)\n                    return true;\n                if (cp === 0x118ff)\n                    return true;\n                if (cp === 0x11a00)\n                    return true;\n                return false;\n            }\n            if (cp < 0x11a9d) {\n                if (cp < 0x11a0b)\n                    return false;\n                if (cp < 0x11a33)\n                    return true;\n                if (cp === 0x11a3a)\n                    return true;\n                if (cp === 0x11a50)\n                    return true;\n                if (cp < 0x11a5c)\n                    return false;\n                if (cp < 0x11a84)\n                    return true;\n                if (cp < 0x11a86)\n                    return false;\n                if (cp < 0x11a8a)\n                    return true;\n                return false;\n            }\n            if (cp === 0x11a9d)\n                return true;\n            if (cp < 0x11ac0)\n                return false;\n            if (cp < 0x11af9)\n                return true;\n            if (cp < 0x11c00)\n                return false;\n            if (cp < 0x11c09)\n                return true;\n            if (cp < 0x11c0a)\n                return false;\n            if (cp < 0x11c2f)\n                return true;\n            if (cp === 0x11c40)\n                return true;\n            if (cp < 0x11c72)\n                return false;\n            if (cp < 0x11c90)\n                return true;\n            return false;\n        }\n        if (cp < 0x12400) {\n            if (cp < 0x11d67) {\n                if (cp < 0x11d00)\n                    return false;\n                if (cp < 0x11d07)\n                    return true;\n                if (cp < 0x11d08)\n                    return false;\n                if (cp < 0x11d0a)\n                    return true;\n                if (cp < 0x11d0b)\n                    return false;\n                if (cp < 0x11d31)\n                    return true;\n                if (cp === 0x11d46)\n                    return true;\n                if (cp < 0x11d60)\n                    return false;\n                if (cp < 0x11d66)\n                    return true;\n                return false;\n            }\n            if (cp < 0x11d69)\n                return true;\n            if (cp < 0x11d6a)\n                return false;\n            if (cp < 0x11d8a)\n                return true;\n            if (cp === 0x11d98)\n                return true;\n            if (cp < 0x11ee0)\n                return false;\n            if (cp < 0x11ef3)\n                return true;\n            if (cp < 0x12000)\n                return false;\n            if (cp < 0x1239a)\n                return true;\n            return false;\n        }\n        if (cp < 0x16a40) {\n            if (cp < 0x12400)\n                return false;\n            if (cp < 0x1246f)\n                return true;\n            if (cp < 0x12480)\n                return false;\n            if (cp < 0x12544)\n                return true;\n            if (cp < 0x13000)\n                return false;\n            if (cp < 0x1342f)\n                return true;\n            if (cp < 0x14400)\n                return false;\n            if (cp < 0x14647)\n                return true;\n            if (cp < 0x16800)\n                return false;\n            if (cp < 0x16a39)\n                return true;\n            return false;\n        }\n        if (cp < 0x16a5f)\n            return true;\n        if (cp < 0x16ad0)\n            return false;\n        if (cp < 0x16aee)\n            return true;\n        if (cp < 0x16b00)\n            return false;\n        if (cp < 0x16b30)\n            return true;\n        if (cp < 0x16b40)\n            return false;\n        if (cp < 0x16b44)\n            return true;\n        if (cp < 0x16b63)\n            return false;\n        if (cp < 0x16b78)\n            return true;\n        if (cp < 0x16b7d)\n            return false;\n        if (cp < 0x16b90)\n            return true;\n        return false;\n    }\n    if (cp < 0x1d7c4) {\n        if (cp < 0x1d4bd) {\n            if (cp < 0x1bc70) {\n                if (cp < 0x17000) {\n                    if (cp < 0x16e40)\n                        return false;\n                    if (cp < 0x16e80)\n                        return true;\n                    if (cp < 0x16f00)\n                        return false;\n                    if (cp < 0x16f45)\n                        return true;\n                    if (cp === 0x16f50)\n                        return true;\n                    if (cp < 0x16f93)\n                        return false;\n                    if (cp < 0x16fa0)\n                        return true;\n                    if (cp < 0x16fe0)\n                        return false;\n                    if (cp < 0x16fe2)\n                        return true;\n                    return false;\n                }\n                if (cp < 0x187f2)\n                    return true;\n                if (cp < 0x18800)\n                    return false;\n                if (cp < 0x18af3)\n                    return true;\n                if (cp < 0x1b000)\n                    return false;\n                if (cp < 0x1b11f)\n                    return true;\n                if (cp < 0x1b170)\n                    return false;\n                if (cp < 0x1b2fc)\n                    return true;\n                if (cp < 0x1bc00)\n                    return false;\n                if (cp < 0x1bc6b)\n                    return true;\n                return false;\n            }\n            if (cp < 0x1d49e) {\n                if (cp < 0x1bc70)\n                    return false;\n                if (cp < 0x1bc7d)\n                    return true;\n                if (cp < 0x1bc80)\n                    return false;\n                if (cp < 0x1bc89)\n                    return true;\n                if (cp < 0x1bc90)\n                    return false;\n                if (cp < 0x1bc9a)\n                    return true;\n                if (cp < 0x1d400)\n                    return false;\n                if (cp < 0x1d455)\n                    return true;\n                if (cp < 0x1d456)\n                    return false;\n                if (cp < 0x1d49d)\n                    return true;\n                return false;\n            }\n            if (cp < 0x1d4a0)\n                return true;\n            if (cp === 0x1d4a2)\n                return true;\n            if (cp < 0x1d4a5)\n                return false;\n            if (cp < 0x1d4a7)\n                return true;\n            if (cp < 0x1d4a9)\n                return false;\n            if (cp < 0x1d4ad)\n                return true;\n            if (cp < 0x1d4ae)\n                return false;\n            if (cp < 0x1d4ba)\n                return true;\n            if (cp === 0x1d4bb)\n                return true;\n            return false;\n        }\n        if (cp < 0x1d552) {\n            if (cp < 0x1d51e) {\n                if (cp < 0x1d4bd)\n                    return false;\n                if (cp < 0x1d4c4)\n                    return true;\n                if (cp < 0x1d4c5)\n                    return false;\n                if (cp < 0x1d506)\n                    return true;\n                if (cp < 0x1d507)\n                    return false;\n                if (cp < 0x1d50b)\n                    return true;\n                if (cp < 0x1d50d)\n                    return false;\n                if (cp < 0x1d515)\n                    return true;\n                if (cp < 0x1d516)\n                    return false;\n                if (cp < 0x1d51d)\n                    return true;\n                return false;\n            }\n            if (cp < 0x1d53a)\n                return true;\n            if (cp < 0x1d53b)\n                return false;\n            if (cp < 0x1d53f)\n                return true;\n            if (cp < 0x1d540)\n                return false;\n            if (cp < 0x1d545)\n                return true;\n            if (cp === 0x1d546)\n                return true;\n            if (cp < 0x1d54a)\n                return false;\n            if (cp < 0x1d551)\n                return true;\n            return false;\n        }\n        if (cp < 0x1d716) {\n            if (cp < 0x1d552)\n                return false;\n            if (cp < 0x1d6a6)\n                return true;\n            if (cp < 0x1d6a8)\n                return false;\n            if (cp < 0x1d6c1)\n                return true;\n            if (cp < 0x1d6c2)\n                return false;\n            if (cp < 0x1d6db)\n                return true;\n            if (cp < 0x1d6dc)\n                return false;\n            if (cp < 0x1d6fb)\n                return true;\n            if (cp < 0x1d6fc)\n                return false;\n            if (cp < 0x1d715)\n                return true;\n            return false;\n        }\n        if (cp < 0x1d735)\n            return true;\n        if (cp < 0x1d736)\n            return false;\n        if (cp < 0x1d74f)\n            return true;\n        if (cp < 0x1d750)\n            return false;\n        if (cp < 0x1d76f)\n            return true;\n        if (cp < 0x1d770)\n            return false;\n        if (cp < 0x1d789)\n            return true;\n        if (cp < 0x1d78a)\n            return false;\n        if (cp < 0x1d7a9)\n            return true;\n        if (cp < 0x1d7aa)\n            return false;\n        if (cp < 0x1d7c3)\n            return true;\n        return false;\n    }\n    if (cp < 0x1ee5b) {\n        if (cp < 0x1ee39) {\n            if (cp < 0x1ee21) {\n                if (cp < 0x1d7c4)\n                    return false;\n                if (cp < 0x1d7cc)\n                    return true;\n                if (cp < 0x1e800)\n                    return false;\n                if (cp < 0x1e8c5)\n                    return true;\n                if (cp < 0x1e900)\n                    return false;\n                if (cp < 0x1e944)\n                    return true;\n                if (cp < 0x1ee00)\n                    return false;\n                if (cp < 0x1ee04)\n                    return true;\n                if (cp < 0x1ee05)\n                    return false;\n                if (cp < 0x1ee20)\n                    return true;\n                return false;\n            }\n            if (cp < 0x1ee23)\n                return true;\n            if (cp === 0x1ee24)\n                return true;\n            if (cp === 0x1ee27)\n                return true;\n            if (cp < 0x1ee29)\n                return false;\n            if (cp < 0x1ee33)\n                return true;\n            if (cp < 0x1ee34)\n                return false;\n            if (cp < 0x1ee38)\n                return true;\n            return false;\n        }\n        if (cp < 0x1ee4b) {\n            if (cp === 0x1ee39)\n                return true;\n            if (cp === 0x1ee3b)\n                return true;\n            if (cp === 0x1ee42)\n                return true;\n            if (cp === 0x1ee47)\n                return true;\n            if (cp === 0x1ee49)\n                return true;\n            return false;\n        }\n        if (cp === 0x1ee4b)\n            return true;\n        if (cp < 0x1ee4d)\n            return false;\n        if (cp < 0x1ee50)\n            return true;\n        if (cp < 0x1ee51)\n            return false;\n        if (cp < 0x1ee53)\n            return true;\n        if (cp === 0x1ee54)\n            return true;\n        if (cp === 0x1ee57)\n            return true;\n        if (cp === 0x1ee59)\n            return true;\n        return false;\n    }\n    if (cp < 0x1ee80) {\n        if (cp < 0x1ee67) {\n            if (cp === 0x1ee5b)\n                return true;\n            if (cp === 0x1ee5d)\n                return true;\n            if (cp === 0x1ee5f)\n                return true;\n            if (cp < 0x1ee61)\n                return false;\n            if (cp < 0x1ee63)\n                return true;\n            if (cp === 0x1ee64)\n                return true;\n            return false;\n        }\n        if (cp < 0x1ee6b)\n            return true;\n        if (cp < 0x1ee6c)\n            return false;\n        if (cp < 0x1ee73)\n            return true;\n        if (cp < 0x1ee74)\n            return false;\n        if (cp < 0x1ee78)\n            return true;\n        if (cp < 0x1ee79)\n            return false;\n        if (cp < 0x1ee7d)\n            return true;\n        if (cp === 0x1ee7e)\n            return true;\n        return false;\n    }\n    if (cp < 0x20000) {\n        if (cp < 0x1ee80)\n            return false;\n        if (cp < 0x1ee8a)\n            return true;\n        if (cp < 0x1ee8b)\n            return false;\n        if (cp < 0x1ee9c)\n            return true;\n        if (cp < 0x1eea1)\n            return false;\n        if (cp < 0x1eea4)\n            return true;\n        if (cp < 0x1eea5)\n            return false;\n        if (cp < 0x1eeaa)\n            return true;\n        if (cp < 0x1eeab)\n            return false;\n        if (cp < 0x1eebc)\n            return true;\n        return false;\n    }\n    if (cp < 0x2a6d7)\n        return true;\n    if (cp < 0x2a700)\n        return false;\n    if (cp < 0x2b735)\n        return true;\n    if (cp < 0x2b740)\n        return false;\n    if (cp < 0x2b81e)\n        return true;\n    if (cp < 0x2b820)\n        return false;\n    if (cp < 0x2cea2)\n        return true;\n    if (cp < 0x2ceb0)\n        return false;\n    if (cp < 0x2ebe1)\n        return true;\n    if (cp < 0x2f800)\n        return false;\n    if (cp < 0x2fa1e)\n        return true;\n    return false;\n}\nfunction isLargeIdContinue(cp) {\n    if (cp < 0x1cd0) {\n        if (cp < 0xd82) {\n            if (cp < 0xa83) {\n                if (cp < 0x93b) {\n                    if (cp < 0x6ea) {\n                        if (cp < 0x5c7) {\n                            if (cp === 0xb7)\n                                return true;\n                            if (cp < 0x300)\n                                return false;\n                            if (cp < 0x370)\n                                return true;\n                            if (cp === 0x387)\n                                return true;\n                            if (cp < 0x483)\n                                return false;\n                            if (cp < 0x488)\n                                return true;\n                            if (cp < 0x591)\n                                return false;\n                            if (cp < 0x5be)\n                                return true;\n                            if (cp === 0x5bf)\n                                return true;\n                            if (cp < 0x5c1)\n                                return false;\n                            if (cp < 0x5c3)\n                                return true;\n                            if (cp < 0x5c4)\n                                return false;\n                            if (cp < 0x5c6)\n                                return true;\n                            return false;\n                        }\n                        if (cp === 0x5c7)\n                            return true;\n                        if (cp < 0x610)\n                            return false;\n                        if (cp < 0x61b)\n                            return true;\n                        if (cp < 0x64b)\n                            return false;\n                        if (cp < 0x660)\n                            return true;\n                        if (cp < 0x660)\n                            return false;\n                        if (cp < 0x66a)\n                            return true;\n                        if (cp === 0x670)\n                            return true;\n                        if (cp < 0x6d6)\n                            return false;\n                        if (cp < 0x6dd)\n                            return true;\n                        if (cp < 0x6df)\n                            return false;\n                        if (cp < 0x6e5)\n                            return true;\n                        if (cp < 0x6e7)\n                            return false;\n                        if (cp < 0x6e9)\n                            return true;\n                        return false;\n                    }\n                    if (cp < 0x816) {\n                        if (cp < 0x6ea)\n                            return false;\n                        if (cp < 0x6ee)\n                            return true;\n                        if (cp < 0x6f0)\n                            return false;\n                        if (cp < 0x6fa)\n                            return true;\n                        if (cp === 0x711)\n                            return true;\n                        if (cp < 0x730)\n                            return false;\n                        if (cp < 0x74b)\n                            return true;\n                        if (cp < 0x7a6)\n                            return false;\n                        if (cp < 0x7b1)\n                            return true;\n                        if (cp < 0x7c0)\n                            return false;\n                        if (cp < 0x7ca)\n                            return true;\n                        if (cp < 0x7eb)\n                            return false;\n                        if (cp < 0x7f4)\n                            return true;\n                        if (cp === 0x7fd)\n                            return true;\n                        return false;\n                    }\n                    if (cp < 0x81a)\n                        return true;\n                    if (cp < 0x81b)\n                        return false;\n                    if (cp < 0x824)\n                        return true;\n                    if (cp < 0x825)\n                        return false;\n                    if (cp < 0x828)\n                        return true;\n                    if (cp < 0x829)\n                        return false;\n                    if (cp < 0x82e)\n                        return true;\n                    if (cp < 0x859)\n                        return false;\n                    if (cp < 0x85c)\n                        return true;\n                    if (cp < 0x8d3)\n                        return false;\n                    if (cp < 0x8e2)\n                        return true;\n                    if (cp < 0x8e3)\n                        return false;\n                    if (cp < 0x903)\n                        return true;\n                    if (cp === 0x903)\n                        return true;\n                    if (cp === 0x93a)\n                        return true;\n                    return false;\n                }\n                if (cp < 0x9cd) {\n                    if (cp < 0x962) {\n                        if (cp === 0x93b)\n                            return true;\n                        if (cp === 0x93c)\n                            return true;\n                        if (cp < 0x93e)\n                            return false;\n                        if (cp < 0x941)\n                            return true;\n                        if (cp < 0x941)\n                            return false;\n                        if (cp < 0x949)\n                            return true;\n                        if (cp < 0x949)\n                            return false;\n                        if (cp < 0x94d)\n                            return true;\n                        if (cp === 0x94d)\n                            return true;\n                        if (cp < 0x94e)\n                            return false;\n                        if (cp < 0x950)\n                            return true;\n                        if (cp < 0x951)\n                            return false;\n                        if (cp < 0x958)\n                            return true;\n                        return false;\n                    }\n                    if (cp < 0x964)\n                        return true;\n                    if (cp < 0x966)\n                        return false;\n                    if (cp < 0x970)\n                        return true;\n                    if (cp === 0x981)\n                        return true;\n                    if (cp < 0x982)\n                        return false;\n                    if (cp < 0x984)\n                        return true;\n                    if (cp === 0x9bc)\n                        return true;\n                    if (cp < 0x9be)\n                        return false;\n                    if (cp < 0x9c1)\n                        return true;\n                    if (cp < 0x9c1)\n                        return false;\n                    if (cp < 0x9c5)\n                        return true;\n                    if (cp < 0x9c7)\n                        return false;\n                    if (cp < 0x9c9)\n                        return true;\n                    if (cp < 0x9cb)\n                        return false;\n                    if (cp < 0x9cd)\n                        return true;\n                    return false;\n                }\n                if (cp < 0xa3e) {\n                    if (cp === 0x9cd)\n                        return true;\n                    if (cp === 0x9d7)\n                        return true;\n                    if (cp < 0x9e2)\n                        return false;\n                    if (cp < 0x9e4)\n                        return true;\n                    if (cp < 0x9e6)\n                        return false;\n                    if (cp < 0x9f0)\n                        return true;\n                    if (cp === 0x9fe)\n                        return true;\n                    if (cp < 0xa01)\n                        return false;\n                    if (cp < 0xa03)\n                        return true;\n                    if (cp === 0xa03)\n                        return true;\n                    if (cp === 0xa3c)\n                        return true;\n                    return false;\n                }\n                if (cp < 0xa41)\n                    return true;\n                if (cp < 0xa41)\n                    return false;\n                if (cp < 0xa43)\n                    return true;\n                if (cp < 0xa47)\n                    return false;\n                if (cp < 0xa49)\n                    return true;\n                if (cp < 0xa4b)\n                    return false;\n                if (cp < 0xa4e)\n                    return true;\n                if (cp === 0xa51)\n                    return true;\n                if (cp < 0xa66)\n                    return false;\n                if (cp < 0xa70)\n                    return true;\n                if (cp < 0xa70)\n                    return false;\n                if (cp < 0xa72)\n                    return true;\n                if (cp === 0xa75)\n                    return true;\n                if (cp < 0xa81)\n                    return false;\n                if (cp < 0xa83)\n                    return true;\n                return false;\n            }\n            if (cp < 0xc00) {\n                if (cp < 0xb41) {\n                    if (cp < 0xae2) {\n                        if (cp === 0xa83)\n                            return true;\n                        if (cp === 0xabc)\n                            return true;\n                        if (cp < 0xabe)\n                            return false;\n                        if (cp < 0xac1)\n                            return true;\n                        if (cp < 0xac1)\n                            return false;\n                        if (cp < 0xac6)\n                            return true;\n                        if (cp < 0xac7)\n                            return false;\n                        if (cp < 0xac9)\n                            return true;\n                        if (cp === 0xac9)\n                            return true;\n                        if (cp < 0xacb)\n                            return false;\n                        if (cp < 0xacd)\n                            return true;\n                        if (cp === 0xacd)\n                            return true;\n                        return false;\n                    }\n                    if (cp < 0xae4)\n                        return true;\n                    if (cp < 0xae6)\n                        return false;\n                    if (cp < 0xaf0)\n                        return true;\n                    if (cp < 0xafa)\n                        return false;\n                    if (cp < 0xb00)\n                        return true;\n                    if (cp === 0xb01)\n                        return true;\n                    if (cp < 0xb02)\n                        return false;\n                    if (cp < 0xb04)\n                        return true;\n                    if (cp === 0xb3c)\n                        return true;\n                    if (cp === 0xb3e)\n                        return true;\n                    if (cp === 0xb3f)\n                        return true;\n                    if (cp === 0xb40)\n                        return true;\n                    return false;\n                }\n                if (cp < 0xb82) {\n                    if (cp < 0xb41)\n                        return false;\n                    if (cp < 0xb45)\n                        return true;\n                    if (cp < 0xb47)\n                        return false;\n                    if (cp < 0xb49)\n                        return true;\n                    if (cp < 0xb4b)\n                        return false;\n                    if (cp < 0xb4d)\n                        return true;\n                    if (cp === 0xb4d)\n                        return true;\n                    if (cp === 0xb56)\n                        return true;\n                    if (cp === 0xb57)\n                        return true;\n                    if (cp < 0xb62)\n                        return false;\n                    if (cp < 0xb64)\n                        return true;\n                    if (cp < 0xb66)\n                        return false;\n                    if (cp < 0xb70)\n                        return true;\n                    return false;\n                }\n                if (cp === 0xb82)\n                    return true;\n                if (cp < 0xbbe)\n                    return false;\n                if (cp < 0xbc0)\n                    return true;\n                if (cp === 0xbc0)\n                    return true;\n                if (cp < 0xbc1)\n                    return false;\n                if (cp < 0xbc3)\n                    return true;\n                if (cp < 0xbc6)\n                    return false;\n                if (cp < 0xbc9)\n                    return true;\n                if (cp < 0xbca)\n                    return false;\n                if (cp < 0xbcd)\n                    return true;\n                if (cp === 0xbcd)\n                    return true;\n                if (cp === 0xbd7)\n                    return true;\n                if (cp < 0xbe6)\n                    return false;\n                if (cp < 0xbf0)\n                    return true;\n                return false;\n            }\n            if (cp < 0xcc7) {\n                if (cp < 0xc62) {\n                    if (cp === 0xc00)\n                        return true;\n                    if (cp < 0xc01)\n                        return false;\n                    if (cp < 0xc04)\n                        return true;\n                    if (cp === 0xc04)\n                        return true;\n                    if (cp < 0xc3e)\n                        return false;\n                    if (cp < 0xc41)\n                        return true;\n                    if (cp < 0xc41)\n                        return false;\n                    if (cp < 0xc45)\n                        return true;\n                    if (cp < 0xc46)\n                        return false;\n                    if (cp < 0xc49)\n                        return true;\n                    if (cp < 0xc4a)\n                        return false;\n                    if (cp < 0xc4e)\n                        return true;\n                    if (cp < 0xc55)\n                        return false;\n                    if (cp < 0xc57)\n                        return true;\n                    return false;\n                }\n                if (cp < 0xc64)\n                    return true;\n                if (cp < 0xc66)\n                    return false;\n                if (cp < 0xc70)\n                    return true;\n                if (cp === 0xc81)\n                    return true;\n                if (cp < 0xc82)\n                    return false;\n                if (cp < 0xc84)\n                    return true;\n                if (cp === 0xcbc)\n                    return true;\n                if (cp === 0xcbe)\n                    return true;\n                if (cp === 0xcbf)\n                    return true;\n                if (cp < 0xcc0)\n                    return false;\n                if (cp < 0xcc5)\n                    return true;\n                if (cp === 0xcc6)\n                    return true;\n                return false;\n            }\n            if (cp < 0xd3b) {\n                if (cp < 0xcc7)\n                    return false;\n                if (cp < 0xcc9)\n                    return true;\n                if (cp < 0xcca)\n                    return false;\n                if (cp < 0xccc)\n                    return true;\n                if (cp < 0xccc)\n                    return false;\n                if (cp < 0xcce)\n                    return true;\n                if (cp < 0xcd5)\n                    return false;\n                if (cp < 0xcd7)\n                    return true;\n                if (cp < 0xce2)\n                    return false;\n                if (cp < 0xce4)\n                    return true;\n                if (cp < 0xce6)\n                    return false;\n                if (cp < 0xcf0)\n                    return true;\n                if (cp < 0xd00)\n                    return false;\n                if (cp < 0xd02)\n                    return true;\n                if (cp < 0xd02)\n                    return false;\n                if (cp < 0xd04)\n                    return true;\n                return false;\n            }\n            if (cp < 0xd3d)\n                return true;\n            if (cp < 0xd3e)\n                return false;\n            if (cp < 0xd41)\n                return true;\n            if (cp < 0xd41)\n                return false;\n            if (cp < 0xd45)\n                return true;\n            if (cp < 0xd46)\n                return false;\n            if (cp < 0xd49)\n                return true;\n            if (cp < 0xd4a)\n                return false;\n            if (cp < 0xd4d)\n                return true;\n            if (cp === 0xd4d)\n                return true;\n            if (cp === 0xd57)\n                return true;\n            if (cp < 0xd62)\n                return false;\n            if (cp < 0xd64)\n                return true;\n            if (cp < 0xd66)\n                return false;\n            if (cp < 0xd70)\n                return true;\n            return false;\n        }\n        if (cp < 0x17e0) {\n            if (cp < 0x1038) {\n                if (cp < 0xf18) {\n                    if (cp < 0xe31) {\n                        if (cp < 0xd82)\n                            return false;\n                        if (cp < 0xd84)\n                            return true;\n                        if (cp === 0xdca)\n                            return true;\n                        if (cp < 0xdcf)\n                            return false;\n                        if (cp < 0xdd2)\n                            return true;\n                        if (cp < 0xdd2)\n                            return false;\n                        if (cp < 0xdd5)\n                            return true;\n                        if (cp === 0xdd6)\n                            return true;\n                        if (cp < 0xdd8)\n                            return false;\n                        if (cp < 0xde0)\n                            return true;\n                        if (cp < 0xde6)\n                            return false;\n                        if (cp < 0xdf0)\n                            return true;\n                        if (cp < 0xdf2)\n                            return false;\n                        if (cp < 0xdf4)\n                            return true;\n                        return false;\n                    }\n                    if (cp === 0xe31)\n                        return true;\n                    if (cp < 0xe34)\n                        return false;\n                    if (cp < 0xe3b)\n                        return true;\n                    if (cp < 0xe47)\n                        return false;\n                    if (cp < 0xe4f)\n                        return true;\n                    if (cp < 0xe50)\n                        return false;\n                    if (cp < 0xe5a)\n                        return true;\n                    if (cp === 0xeb1)\n                        return true;\n                    if (cp < 0xeb4)\n                        return false;\n                    if (cp < 0xeba)\n                        return true;\n                    if (cp < 0xebb)\n                        return false;\n                    if (cp < 0xebd)\n                        return true;\n                    if (cp < 0xec8)\n                        return false;\n                    if (cp < 0xece)\n                        return true;\n                    if (cp < 0xed0)\n                        return false;\n                    if (cp < 0xeda)\n                        return true;\n                    return false;\n                }\n                if (cp < 0xf80) {\n                    if (cp < 0xf18)\n                        return false;\n                    if (cp < 0xf1a)\n                        return true;\n                    if (cp < 0xf20)\n                        return false;\n                    if (cp < 0xf2a)\n                        return true;\n                    if (cp === 0xf35)\n                        return true;\n                    if (cp === 0xf37)\n                        return true;\n                    if (cp === 0xf39)\n                        return true;\n                    if (cp < 0xf3e)\n                        return false;\n                    if (cp < 0xf40)\n                        return true;\n                    if (cp < 0xf71)\n                        return false;\n                    if (cp < 0xf7f)\n                        return true;\n                    if (cp === 0xf7f)\n                        return true;\n                    return false;\n                }\n                if (cp < 0xf85)\n                    return true;\n                if (cp < 0xf86)\n                    return false;\n                if (cp < 0xf88)\n                    return true;\n                if (cp < 0xf8d)\n                    return false;\n                if (cp < 0xf98)\n                    return true;\n                if (cp < 0xf99)\n                    return false;\n                if (cp < 0xfbd)\n                    return true;\n                if (cp === 0xfc6)\n                    return true;\n                if (cp < 0x102b)\n                    return false;\n                if (cp < 0x102d)\n                    return true;\n                if (cp < 0x102d)\n                    return false;\n                if (cp < 0x1031)\n                    return true;\n                if (cp === 0x1031)\n                    return true;\n                if (cp < 0x1032)\n                    return false;\n                if (cp < 0x1038)\n                    return true;\n                return false;\n            }\n            if (cp < 0x1090) {\n                if (cp < 0x1062) {\n                    if (cp === 0x1038)\n                        return true;\n                    if (cp < 0x1039)\n                        return false;\n                    if (cp < 0x103b)\n                        return true;\n                    if (cp < 0x103b)\n                        return false;\n                    if (cp < 0x103d)\n                        return true;\n                    if (cp < 0x103d)\n                        return false;\n                    if (cp < 0x103f)\n                        return true;\n                    if (cp < 0x1040)\n                        return false;\n                    if (cp < 0x104a)\n                        return true;\n                    if (cp < 0x1056)\n                        return false;\n                    if (cp < 0x1058)\n                        return true;\n                    if (cp < 0x1058)\n                        return false;\n                    if (cp < 0x105a)\n                        return true;\n                    if (cp < 0x105e)\n                        return false;\n                    if (cp < 0x1061)\n                        return true;\n                    return false;\n                }\n                if (cp < 0x1065)\n                    return true;\n                if (cp < 0x1067)\n                    return false;\n                if (cp < 0x106e)\n                    return true;\n                if (cp < 0x1071)\n                    return false;\n                if (cp < 0x1075)\n                    return true;\n                if (cp === 0x1082)\n                    return true;\n                if (cp < 0x1083)\n                    return false;\n                if (cp < 0x1085)\n                    return true;\n                if (cp < 0x1085)\n                    return false;\n                if (cp < 0x1087)\n                    return true;\n                if (cp < 0x1087)\n                    return false;\n                if (cp < 0x108d)\n                    return true;\n                if (cp === 0x108d)\n                    return true;\n                if (cp === 0x108f)\n                    return true;\n                return false;\n            }\n            if (cp < 0x1772) {\n                if (cp < 0x1090)\n                    return false;\n                if (cp < 0x109a)\n                    return true;\n                if (cp < 0x109a)\n                    return false;\n                if (cp < 0x109d)\n                    return true;\n                if (cp === 0x109d)\n                    return true;\n                if (cp < 0x135d)\n                    return false;\n                if (cp < 0x1360)\n                    return true;\n                if (cp < 0x1369)\n                    return false;\n                if (cp < 0x1372)\n                    return true;\n                if (cp < 0x1712)\n                    return false;\n                if (cp < 0x1715)\n                    return true;\n                if (cp < 0x1732)\n                    return false;\n                if (cp < 0x1735)\n                    return true;\n                if (cp < 0x1752)\n                    return false;\n                if (cp < 0x1754)\n                    return true;\n                return false;\n            }\n            if (cp < 0x1774)\n                return true;\n            if (cp < 0x17b4)\n                return false;\n            if (cp < 0x17b6)\n                return true;\n            if (cp === 0x17b6)\n                return true;\n            if (cp < 0x17b7)\n                return false;\n            if (cp < 0x17be)\n                return true;\n            if (cp < 0x17be)\n                return false;\n            if (cp < 0x17c6)\n                return true;\n            if (cp === 0x17c6)\n                return true;\n            if (cp < 0x17c7)\n                return false;\n            if (cp < 0x17c9)\n                return true;\n            if (cp < 0x17c9)\n                return false;\n            if (cp < 0x17d4)\n                return true;\n            if (cp === 0x17dd)\n                return true;\n            return false;\n        }\n        if (cp < 0x1b04) {\n            if (cp < 0x1a1b) {\n                if (cp < 0x1930) {\n                    if (cp < 0x17e0)\n                        return false;\n                    if (cp < 0x17ea)\n                        return true;\n                    if (cp < 0x180b)\n                        return false;\n                    if (cp < 0x180e)\n                        return true;\n                    if (cp < 0x1810)\n                        return false;\n                    if (cp < 0x181a)\n                        return true;\n                    if (cp === 0x18a9)\n                        return true;\n                    if (cp < 0x1920)\n                        return false;\n                    if (cp < 0x1923)\n                        return true;\n                    if (cp < 0x1923)\n                        return false;\n                    if (cp < 0x1927)\n                        return true;\n                    if (cp < 0x1927)\n                        return false;\n                    if (cp < 0x1929)\n                        return true;\n                    if (cp < 0x1929)\n                        return false;\n                    if (cp < 0x192c)\n                        return true;\n                    return false;\n                }\n                if (cp < 0x1932)\n                    return true;\n                if (cp === 0x1932)\n                    return true;\n                if (cp < 0x1933)\n                    return false;\n                if (cp < 0x1939)\n                    return true;\n                if (cp < 0x1939)\n                    return false;\n                if (cp < 0x193c)\n                    return true;\n                if (cp < 0x1946)\n                    return false;\n                if (cp < 0x1950)\n                    return true;\n                if (cp < 0x19d0)\n                    return false;\n                if (cp < 0x19da)\n                    return true;\n                if (cp === 0x19da)\n                    return true;\n                if (cp < 0x1a17)\n                    return false;\n                if (cp < 0x1a19)\n                    return true;\n                if (cp < 0x1a19)\n                    return false;\n                if (cp < 0x1a1b)\n                    return true;\n                return false;\n            }\n            if (cp < 0x1a63) {\n                if (cp === 0x1a1b)\n                    return true;\n                if (cp === 0x1a55)\n                    return true;\n                if (cp === 0x1a56)\n                    return true;\n                if (cp === 0x1a57)\n                    return true;\n                if (cp < 0x1a58)\n                    return false;\n                if (cp < 0x1a5f)\n                    return true;\n                if (cp === 0x1a60)\n                    return true;\n                if (cp === 0x1a61)\n                    return true;\n                if (cp === 0x1a62)\n                    return true;\n                return false;\n            }\n            if (cp < 0x1a65)\n                return true;\n            if (cp < 0x1a65)\n                return false;\n            if (cp < 0x1a6d)\n                return true;\n            if (cp < 0x1a6d)\n                return false;\n            if (cp < 0x1a73)\n                return true;\n            if (cp < 0x1a73)\n                return false;\n            if (cp < 0x1a7d)\n                return true;\n            if (cp === 0x1a7f)\n                return true;\n            if (cp < 0x1a80)\n                return false;\n            if (cp < 0x1a8a)\n                return true;\n            if (cp < 0x1a90)\n                return false;\n            if (cp < 0x1a9a)\n                return true;\n            if (cp < 0x1ab0)\n                return false;\n            if (cp < 0x1abe)\n                return true;\n            if (cp < 0x1b00)\n                return false;\n            if (cp < 0x1b04)\n                return true;\n            return false;\n        }\n        if (cp < 0x1baa) {\n            if (cp < 0x1b43) {\n                if (cp === 0x1b04)\n                    return true;\n                if (cp === 0x1b34)\n                    return true;\n                if (cp === 0x1b35)\n                    return true;\n                if (cp < 0x1b36)\n                    return false;\n                if (cp < 0x1b3b)\n                    return true;\n                if (cp === 0x1b3b)\n                    return true;\n                if (cp === 0x1b3c)\n                    return true;\n                if (cp < 0x1b3d)\n                    return false;\n                if (cp < 0x1b42)\n                    return true;\n                if (cp === 0x1b42)\n                    return true;\n                return false;\n            }\n            if (cp < 0x1b45)\n                return true;\n            if (cp < 0x1b50)\n                return false;\n            if (cp < 0x1b5a)\n                return true;\n            if (cp < 0x1b6b)\n                return false;\n            if (cp < 0x1b74)\n                return true;\n            if (cp < 0x1b80)\n                return false;\n            if (cp < 0x1b82)\n                return true;\n            if (cp === 0x1b82)\n                return true;\n            if (cp === 0x1ba1)\n                return true;\n            if (cp < 0x1ba2)\n                return false;\n            if (cp < 0x1ba6)\n                return true;\n            if (cp < 0x1ba6)\n                return false;\n            if (cp < 0x1ba8)\n                return true;\n            if (cp < 0x1ba8)\n                return false;\n            if (cp < 0x1baa)\n                return true;\n            return false;\n        }\n        if (cp < 0x1bee) {\n            if (cp === 0x1baa)\n                return true;\n            if (cp < 0x1bab)\n                return false;\n            if (cp < 0x1bae)\n                return true;\n            if (cp < 0x1bb0)\n                return false;\n            if (cp < 0x1bba)\n                return true;\n            if (cp === 0x1be6)\n                return true;\n            if (cp === 0x1be7)\n                return true;\n            if (cp < 0x1be8)\n                return false;\n            if (cp < 0x1bea)\n                return true;\n            if (cp < 0x1bea)\n                return false;\n            if (cp < 0x1bed)\n                return true;\n            if (cp === 0x1bed)\n                return true;\n            return false;\n        }\n        if (cp === 0x1bee)\n            return true;\n        if (cp < 0x1bef)\n            return false;\n        if (cp < 0x1bf2)\n            return true;\n        if (cp < 0x1bf2)\n            return false;\n        if (cp < 0x1bf4)\n            return true;\n        if (cp < 0x1c24)\n            return false;\n        if (cp < 0x1c2c)\n            return true;\n        if (cp < 0x1c2c)\n            return false;\n        if (cp < 0x1c34)\n            return true;\n        if (cp < 0x1c34)\n            return false;\n        if (cp < 0x1c36)\n            return true;\n        if (cp < 0x1c36)\n            return false;\n        if (cp < 0x1c38)\n            return true;\n        if (cp < 0x1c40)\n            return false;\n        if (cp < 0x1c4a)\n            return true;\n        if (cp < 0x1c50)\n            return false;\n        if (cp < 0x1c5a)\n            return true;\n        return false;\n    }\n    if (cp < 0x1123e) {\n        if (cp < 0xaab7) {\n            if (cp < 0xa8b4) {\n                if (cp < 0x2d7f) {\n                    if (cp < 0x1cf8) {\n                        if (cp < 0x1cd0)\n                            return false;\n                        if (cp < 0x1cd3)\n                            return true;\n                        if (cp < 0x1cd4)\n                            return false;\n                        if (cp < 0x1ce1)\n                            return true;\n                        if (cp === 0x1ce1)\n                            return true;\n                        if (cp < 0x1ce2)\n                            return false;\n                        if (cp < 0x1ce9)\n                            return true;\n                        if (cp === 0x1ced)\n                            return true;\n                        if (cp < 0x1cf2)\n                            return false;\n                        if (cp < 0x1cf4)\n                            return true;\n                        if (cp === 0x1cf4)\n                            return true;\n                        if (cp === 0x1cf7)\n                            return true;\n                        return false;\n                    }\n                    if (cp < 0x1cfa)\n                        return true;\n                    if (cp < 0x1dc0)\n                        return false;\n                    if (cp < 0x1dfa)\n                        return true;\n                    if (cp < 0x1dfb)\n                        return false;\n                    if (cp < 0x1e00)\n                        return true;\n                    if (cp < 0x203f)\n                        return false;\n                    if (cp < 0x2041)\n                        return true;\n                    if (cp === 0x2054)\n                        return true;\n                    if (cp < 0x20d0)\n                        return false;\n                    if (cp < 0x20dd)\n                        return true;\n                    if (cp === 0x20e1)\n                        return true;\n                    if (cp < 0x20e5)\n                        return false;\n                    if (cp < 0x20f1)\n                        return true;\n                    if (cp < 0x2cef)\n                        return false;\n                    if (cp < 0x2cf2)\n                        return true;\n                    return false;\n                }\n                if (cp < 0xa69e) {\n                    if (cp === 0x2d7f)\n                        return true;\n                    if (cp < 0x2de0)\n                        return false;\n                    if (cp < 0x2e00)\n                        return true;\n                    if (cp < 0x302a)\n                        return false;\n                    if (cp < 0x302e)\n                        return true;\n                    if (cp < 0x302e)\n                        return false;\n                    if (cp < 0x3030)\n                        return true;\n                    if (cp < 0x3099)\n                        return false;\n                    if (cp < 0x309b)\n                        return true;\n                    if (cp < 0xa620)\n                        return false;\n                    if (cp < 0xa62a)\n                        return true;\n                    if (cp === 0xa66f)\n                        return true;\n                    if (cp < 0xa674)\n                        return false;\n                    if (cp < 0xa67e)\n                        return true;\n                    return false;\n                }\n                if (cp < 0xa6a0)\n                    return true;\n                if (cp < 0xa6f0)\n                    return false;\n                if (cp < 0xa6f2)\n                    return true;\n                if (cp === 0xa802)\n                    return true;\n                if (cp === 0xa806)\n                    return true;\n                if (cp === 0xa80b)\n                    return true;\n                if (cp < 0xa823)\n                    return false;\n                if (cp < 0xa825)\n                    return true;\n                if (cp < 0xa825)\n                    return false;\n                if (cp < 0xa827)\n                    return true;\n                if (cp === 0xa827)\n                    return true;\n                if (cp < 0xa880)\n                    return false;\n                if (cp < 0xa882)\n                    return true;\n                return false;\n            }\n            if (cp < 0xa9d0) {\n                if (cp < 0xa952) {\n                    if (cp < 0xa8b4)\n                        return false;\n                    if (cp < 0xa8c4)\n                        return true;\n                    if (cp < 0xa8c4)\n                        return false;\n                    if (cp < 0xa8c6)\n                        return true;\n                    if (cp < 0xa8d0)\n                        return false;\n                    if (cp < 0xa8da)\n                        return true;\n                    if (cp < 0xa8e0)\n                        return false;\n                    if (cp < 0xa8f2)\n                        return true;\n                    if (cp === 0xa8ff)\n                        return true;\n                    if (cp < 0xa900)\n                        return false;\n                    if (cp < 0xa90a)\n                        return true;\n                    if (cp < 0xa926)\n                        return false;\n                    if (cp < 0xa92e)\n                        return true;\n                    if (cp < 0xa947)\n                        return false;\n                    if (cp < 0xa952)\n                        return true;\n                    return false;\n                }\n                if (cp < 0xa954)\n                    return true;\n                if (cp < 0xa980)\n                    return false;\n                if (cp < 0xa983)\n                    return true;\n                if (cp === 0xa983)\n                    return true;\n                if (cp === 0xa9b3)\n                    return true;\n                if (cp < 0xa9b4)\n                    return false;\n                if (cp < 0xa9b6)\n                    return true;\n                if (cp < 0xa9b6)\n                    return false;\n                if (cp < 0xa9ba)\n                    return true;\n                if (cp < 0xa9ba)\n                    return false;\n                if (cp < 0xa9bc)\n                    return true;\n                if (cp === 0xa9bc)\n                    return true;\n                if (cp < 0xa9bd)\n                    return false;\n                if (cp < 0xa9c1)\n                    return true;\n                return false;\n            }\n            if (cp < 0xaa43) {\n                if (cp < 0xa9d0)\n                    return false;\n                if (cp < 0xa9da)\n                    return true;\n                if (cp === 0xa9e5)\n                    return true;\n                if (cp < 0xa9f0)\n                    return false;\n                if (cp < 0xa9fa)\n                    return true;\n                if (cp < 0xaa29)\n                    return false;\n                if (cp < 0xaa2f)\n                    return true;\n                if (cp < 0xaa2f)\n                    return false;\n                if (cp < 0xaa31)\n                    return true;\n                if (cp < 0xaa31)\n                    return false;\n                if (cp < 0xaa33)\n                    return true;\n                if (cp < 0xaa33)\n                    return false;\n                if (cp < 0xaa35)\n                    return true;\n                if (cp < 0xaa35)\n                    return false;\n                if (cp < 0xaa37)\n                    return true;\n                return false;\n            }\n            if (cp === 0xaa43)\n                return true;\n            if (cp === 0xaa4c)\n                return true;\n            if (cp === 0xaa4d)\n                return true;\n            if (cp < 0xaa50)\n                return false;\n            if (cp < 0xaa5a)\n                return true;\n            if (cp === 0xaa7b)\n                return true;\n            if (cp === 0xaa7c)\n                return true;\n            if (cp === 0xaa7d)\n                return true;\n            if (cp === 0xaab0)\n                return true;\n            if (cp < 0xaab2)\n                return false;\n            if (cp < 0xaab5)\n                return true;\n            return false;\n        }\n        if (cp < 0x10d30) {\n            if (cp < 0xfe00) {\n                if (cp < 0xabe3) {\n                    if (cp < 0xaab7)\n                        return false;\n                    if (cp < 0xaab9)\n                        return true;\n                    if (cp < 0xaabe)\n                        return false;\n                    if (cp < 0xaac0)\n                        return true;\n                    if (cp === 0xaac1)\n                        return true;\n                    if (cp === 0xaaeb)\n                        return true;\n                    if (cp < 0xaaec)\n                        return false;\n                    if (cp < 0xaaee)\n                        return true;\n                    if (cp < 0xaaee)\n                        return false;\n                    if (cp < 0xaaf0)\n                        return true;\n                    if (cp === 0xaaf5)\n                        return true;\n                    if (cp === 0xaaf6)\n                        return true;\n                    return false;\n                }\n                if (cp < 0xabe5)\n                    return true;\n                if (cp === 0xabe5)\n                    return true;\n                if (cp < 0xabe6)\n                    return false;\n                if (cp < 0xabe8)\n                    return true;\n                if (cp === 0xabe8)\n                    return true;\n                if (cp < 0xabe9)\n                    return false;\n                if (cp < 0xabeb)\n                    return true;\n                if (cp === 0xabec)\n                    return true;\n                if (cp === 0xabed)\n                    return true;\n                if (cp < 0xabf0)\n                    return false;\n                if (cp < 0xabfa)\n                    return true;\n                if (cp === 0xfb1e)\n                    return true;\n                return false;\n            }\n            if (cp < 0x10376) {\n                if (cp < 0xfe00)\n                    return false;\n                if (cp < 0xfe10)\n                    return true;\n                if (cp < 0xfe20)\n                    return false;\n                if (cp < 0xfe30)\n                    return true;\n                if (cp < 0xfe33)\n                    return false;\n                if (cp < 0xfe35)\n                    return true;\n                if (cp < 0xfe4d)\n                    return false;\n                if (cp < 0xfe50)\n                    return true;\n                if (cp < 0xff10)\n                    return false;\n                if (cp < 0xff1a)\n                    return true;\n                if (cp === 0xff3f)\n                    return true;\n                if (cp === 0x101fd)\n                    return true;\n                if (cp === 0x102e0)\n                    return true;\n                return false;\n            }\n            if (cp < 0x1037b)\n                return true;\n            if (cp < 0x104a0)\n                return false;\n            if (cp < 0x104aa)\n                return true;\n            if (cp < 0x10a01)\n                return false;\n            if (cp < 0x10a04)\n                return true;\n            if (cp < 0x10a05)\n                return false;\n            if (cp < 0x10a07)\n                return true;\n            if (cp < 0x10a0c)\n                return false;\n            if (cp < 0x10a10)\n                return true;\n            if (cp < 0x10a38)\n                return false;\n            if (cp < 0x10a3b)\n                return true;\n            if (cp === 0x10a3f)\n                return true;\n            if (cp < 0x10ae5)\n                return false;\n            if (cp < 0x10ae7)\n                return true;\n            if (cp < 0x10d24)\n                return false;\n            if (cp < 0x10d28)\n                return true;\n            return false;\n        }\n        if (cp < 0x1112d) {\n            if (cp < 0x11082) {\n                if (cp < 0x10d30)\n                    return false;\n                if (cp < 0x10d3a)\n                    return true;\n                if (cp < 0x10f46)\n                    return false;\n                if (cp < 0x10f51)\n                    return true;\n                if (cp === 0x11000)\n                    return true;\n                if (cp === 0x11001)\n                    return true;\n                if (cp === 0x11002)\n                    return true;\n                if (cp < 0x11038)\n                    return false;\n                if (cp < 0x11047)\n                    return true;\n                if (cp < 0x11066)\n                    return false;\n                if (cp < 0x11070)\n                    return true;\n                if (cp < 0x1107f)\n                    return false;\n                if (cp < 0x11082)\n                    return true;\n                return false;\n            }\n            if (cp === 0x11082)\n                return true;\n            if (cp < 0x110b0)\n                return false;\n            if (cp < 0x110b3)\n                return true;\n            if (cp < 0x110b3)\n                return false;\n            if (cp < 0x110b7)\n                return true;\n            if (cp < 0x110b7)\n                return false;\n            if (cp < 0x110b9)\n                return true;\n            if (cp < 0x110b9)\n                return false;\n            if (cp < 0x110bb)\n                return true;\n            if (cp < 0x110f0)\n                return false;\n            if (cp < 0x110fa)\n                return true;\n            if (cp < 0x11100)\n                return false;\n            if (cp < 0x11103)\n                return true;\n            if (cp < 0x11127)\n                return false;\n            if (cp < 0x1112c)\n                return true;\n            if (cp === 0x1112c)\n                return true;\n            return false;\n        }\n        if (cp < 0x111bf) {\n            if (cp < 0x1112d)\n                return false;\n            if (cp < 0x11135)\n                return true;\n            if (cp < 0x11136)\n                return false;\n            if (cp < 0x11140)\n                return true;\n            if (cp < 0x11145)\n                return false;\n            if (cp < 0x11147)\n                return true;\n            if (cp === 0x11173)\n                return true;\n            if (cp < 0x11180)\n                return false;\n            if (cp < 0x11182)\n                return true;\n            if (cp === 0x11182)\n                return true;\n            if (cp < 0x111b3)\n                return false;\n            if (cp < 0x111b6)\n                return true;\n            if (cp < 0x111b6)\n                return false;\n            if (cp < 0x111bf)\n                return true;\n            return false;\n        }\n        if (cp < 0x111c1)\n            return true;\n        if (cp < 0x111c9)\n            return false;\n        if (cp < 0x111cd)\n            return true;\n        if (cp < 0x111d0)\n            return false;\n        if (cp < 0x111da)\n            return true;\n        if (cp < 0x1122c)\n            return false;\n        if (cp < 0x1122f)\n            return true;\n        if (cp < 0x1122f)\n            return false;\n        if (cp < 0x11232)\n            return true;\n        if (cp < 0x11232)\n            return false;\n        if (cp < 0x11234)\n            return true;\n        if (cp === 0x11234)\n            return true;\n        if (cp === 0x11235)\n            return true;\n        if (cp < 0x11236)\n            return false;\n        if (cp < 0x11238)\n            return true;\n        return false;\n    }\n    if (cp < 0x11a33) {\n        if (cp < 0x115af) {\n            if (cp < 0x11435) {\n                if (cp < 0x1133e) {\n                    if (cp === 0x1123e)\n                        return true;\n                    if (cp === 0x112df)\n                        return true;\n                    if (cp < 0x112e0)\n                        return false;\n                    if (cp < 0x112e3)\n                        return true;\n                    if (cp < 0x112e3)\n                        return false;\n                    if (cp < 0x112eb)\n                        return true;\n                    if (cp < 0x112f0)\n                        return false;\n                    if (cp < 0x112fa)\n                        return true;\n                    if (cp < 0x11300)\n                        return false;\n                    if (cp < 0x11302)\n                        return true;\n                    if (cp < 0x11302)\n                        return false;\n                    if (cp < 0x11304)\n                        return true;\n                    if (cp < 0x1133b)\n                        return false;\n                    if (cp < 0x1133d)\n                        return true;\n                    return false;\n                }\n                if (cp < 0x11340)\n                    return true;\n                if (cp === 0x11340)\n                    return true;\n                if (cp < 0x11341)\n                    return false;\n                if (cp < 0x11345)\n                    return true;\n                if (cp < 0x11347)\n                    return false;\n                if (cp < 0x11349)\n                    return true;\n                if (cp < 0x1134b)\n                    return false;\n                if (cp < 0x1134e)\n                    return true;\n                if (cp === 0x11357)\n                    return true;\n                if (cp < 0x11362)\n                    return false;\n                if (cp < 0x11364)\n                    return true;\n                if (cp < 0x11366)\n                    return false;\n                if (cp < 0x1136d)\n                    return true;\n                if (cp < 0x11370)\n                    return false;\n                if (cp < 0x11375)\n                    return true;\n                return false;\n            }\n            if (cp < 0x114b0) {\n                if (cp < 0x11435)\n                    return false;\n                if (cp < 0x11438)\n                    return true;\n                if (cp < 0x11438)\n                    return false;\n                if (cp < 0x11440)\n                    return true;\n                if (cp < 0x11440)\n                    return false;\n                if (cp < 0x11442)\n                    return true;\n                if (cp < 0x11442)\n                    return false;\n                if (cp < 0x11445)\n                    return true;\n                if (cp === 0x11445)\n                    return true;\n                if (cp === 0x11446)\n                    return true;\n                if (cp < 0x11450)\n                    return false;\n                if (cp < 0x1145a)\n                    return true;\n                if (cp === 0x1145e)\n                    return true;\n                return false;\n            }\n            if (cp < 0x114b3)\n                return true;\n            if (cp < 0x114b3)\n                return false;\n            if (cp < 0x114b9)\n                return true;\n            if (cp === 0x114b9)\n                return true;\n            if (cp === 0x114ba)\n                return true;\n            if (cp < 0x114bb)\n                return false;\n            if (cp < 0x114bf)\n                return true;\n            if (cp < 0x114bf)\n                return false;\n            if (cp < 0x114c1)\n                return true;\n            if (cp === 0x114c1)\n                return true;\n            if (cp < 0x114c2)\n                return false;\n            if (cp < 0x114c4)\n                return true;\n            if (cp < 0x114d0)\n                return false;\n            if (cp < 0x114da)\n                return true;\n            return false;\n        }\n        if (cp < 0x116ae) {\n            if (cp < 0x11633) {\n                if (cp < 0x115af)\n                    return false;\n                if (cp < 0x115b2)\n                    return true;\n                if (cp < 0x115b2)\n                    return false;\n                if (cp < 0x115b6)\n                    return true;\n                if (cp < 0x115b8)\n                    return false;\n                if (cp < 0x115bc)\n                    return true;\n                if (cp < 0x115bc)\n                    return false;\n                if (cp < 0x115be)\n                    return true;\n                if (cp === 0x115be)\n                    return true;\n                if (cp < 0x115bf)\n                    return false;\n                if (cp < 0x115c1)\n                    return true;\n                if (cp < 0x115dc)\n                    return false;\n                if (cp < 0x115de)\n                    return true;\n                if (cp < 0x11630)\n                    return false;\n                if (cp < 0x11633)\n                    return true;\n                return false;\n            }\n            if (cp < 0x1163b)\n                return true;\n            if (cp < 0x1163b)\n                return false;\n            if (cp < 0x1163d)\n                return true;\n            if (cp === 0x1163d)\n                return true;\n            if (cp === 0x1163e)\n                return true;\n            if (cp < 0x1163f)\n                return false;\n            if (cp < 0x11641)\n                return true;\n            if (cp < 0x11650)\n                return false;\n            if (cp < 0x1165a)\n                return true;\n            if (cp === 0x116ab)\n                return true;\n            if (cp === 0x116ac)\n                return true;\n            if (cp === 0x116ad)\n                return true;\n            return false;\n        }\n        if (cp < 0x11726) {\n            if (cp < 0x116ae)\n                return false;\n            if (cp < 0x116b0)\n                return true;\n            if (cp < 0x116b0)\n                return false;\n            if (cp < 0x116b6)\n                return true;\n            if (cp === 0x116b6)\n                return true;\n            if (cp === 0x116b7)\n                return true;\n            if (cp < 0x116c0)\n                return false;\n            if (cp < 0x116ca)\n                return true;\n            if (cp < 0x1171d)\n                return false;\n            if (cp < 0x11720)\n                return true;\n            if (cp < 0x11720)\n                return false;\n            if (cp < 0x11722)\n                return true;\n            if (cp < 0x11722)\n                return false;\n            if (cp < 0x11726)\n                return true;\n            return false;\n        }\n        if (cp === 0x11726)\n            return true;\n        if (cp < 0x11727)\n            return false;\n        if (cp < 0x1172c)\n            return true;\n        if (cp < 0x11730)\n            return false;\n        if (cp < 0x1173a)\n            return true;\n        if (cp < 0x1182c)\n            return false;\n        if (cp < 0x1182f)\n            return true;\n        if (cp < 0x1182f)\n            return false;\n        if (cp < 0x11838)\n            return true;\n        if (cp === 0x11838)\n            return true;\n        if (cp < 0x11839)\n            return false;\n        if (cp < 0x1183b)\n            return true;\n        if (cp < 0x118e0)\n            return false;\n        if (cp < 0x118ea)\n            return true;\n        if (cp < 0x11a01)\n            return false;\n        if (cp < 0x11a0b)\n            return true;\n        return false;\n    }\n    if (cp < 0x11d97) {\n        if (cp < 0x11ca9) {\n            if (cp < 0x11a97) {\n                if (cp < 0x11a33)\n                    return false;\n                if (cp < 0x11a39)\n                    return true;\n                if (cp === 0x11a39)\n                    return true;\n                if (cp < 0x11a3b)\n                    return false;\n                if (cp < 0x11a3f)\n                    return true;\n                if (cp === 0x11a47)\n                    return true;\n                if (cp < 0x11a51)\n                    return false;\n                if (cp < 0x11a57)\n                    return true;\n                if (cp < 0x11a57)\n                    return false;\n                if (cp < 0x11a59)\n                    return true;\n                if (cp < 0x11a59)\n                    return false;\n                if (cp < 0x11a5c)\n                    return true;\n                if (cp < 0x11a8a)\n                    return false;\n                if (cp < 0x11a97)\n                    return true;\n                return false;\n            }\n            if (cp === 0x11a97)\n                return true;\n            if (cp < 0x11a98)\n                return false;\n            if (cp < 0x11a9a)\n                return true;\n            if (cp === 0x11c2f)\n                return true;\n            if (cp < 0x11c30)\n                return false;\n            if (cp < 0x11c37)\n                return true;\n            if (cp < 0x11c38)\n                return false;\n            if (cp < 0x11c3e)\n                return true;\n            if (cp === 0x11c3e)\n                return true;\n            if (cp === 0x11c3f)\n                return true;\n            if (cp < 0x11c50)\n                return false;\n            if (cp < 0x11c5a)\n                return true;\n            if (cp < 0x11c92)\n                return false;\n            if (cp < 0x11ca8)\n                return true;\n            return false;\n        }\n        if (cp < 0x11d3c) {\n            if (cp === 0x11ca9)\n                return true;\n            if (cp < 0x11caa)\n                return false;\n            if (cp < 0x11cb1)\n                return true;\n            if (cp === 0x11cb1)\n                return true;\n            if (cp < 0x11cb2)\n                return false;\n            if (cp < 0x11cb4)\n                return true;\n            if (cp === 0x11cb4)\n                return true;\n            if (cp < 0x11cb5)\n                return false;\n            if (cp < 0x11cb7)\n                return true;\n            if (cp < 0x11d31)\n                return false;\n            if (cp < 0x11d37)\n                return true;\n            if (cp === 0x11d3a)\n                return true;\n            return false;\n        }\n        if (cp < 0x11d3e)\n            return true;\n        if (cp < 0x11d3f)\n            return false;\n        if (cp < 0x11d46)\n            return true;\n        if (cp === 0x11d47)\n            return true;\n        if (cp < 0x11d50)\n            return false;\n        if (cp < 0x11d5a)\n            return true;\n        if (cp < 0x11d8a)\n            return false;\n        if (cp < 0x11d8f)\n            return true;\n        if (cp < 0x11d90)\n            return false;\n        if (cp < 0x11d92)\n            return true;\n        if (cp < 0x11d93)\n            return false;\n        if (cp < 0x11d95)\n            return true;\n        if (cp === 0x11d95)\n            return true;\n        if (cp === 0x11d96)\n            return true;\n        return false;\n    }\n    if (cp < 0x1d242) {\n        if (cp < 0x16f51) {\n            if (cp === 0x11d97)\n                return true;\n            if (cp < 0x11da0)\n                return false;\n            if (cp < 0x11daa)\n                return true;\n            if (cp < 0x11ef3)\n                return false;\n            if (cp < 0x11ef5)\n                return true;\n            if (cp < 0x11ef5)\n                return false;\n            if (cp < 0x11ef7)\n                return true;\n            if (cp < 0x16a60)\n                return false;\n            if (cp < 0x16a6a)\n                return true;\n            if (cp < 0x16af0)\n                return false;\n            if (cp < 0x16af5)\n                return true;\n            if (cp < 0x16b30)\n                return false;\n            if (cp < 0x16b37)\n                return true;\n            if (cp < 0x16b50)\n                return false;\n            if (cp < 0x16b5a)\n                return true;\n            return false;\n        }\n        if (cp < 0x16f7f)\n            return true;\n        if (cp < 0x16f8f)\n            return false;\n        if (cp < 0x16f93)\n            return true;\n        if (cp < 0x1bc9d)\n            return false;\n        if (cp < 0x1bc9f)\n            return true;\n        if (cp < 0x1d165)\n            return false;\n        if (cp < 0x1d167)\n            return true;\n        if (cp < 0x1d167)\n            return false;\n        if (cp < 0x1d16a)\n            return true;\n        if (cp < 0x1d16d)\n            return false;\n        if (cp < 0x1d173)\n            return true;\n        if (cp < 0x1d17b)\n            return false;\n        if (cp < 0x1d183)\n            return true;\n        if (cp < 0x1d185)\n            return false;\n        if (cp < 0x1d18c)\n            return true;\n        if (cp < 0x1d1aa)\n            return false;\n        if (cp < 0x1d1ae)\n            return true;\n        return false;\n    }\n    if (cp < 0x1e000) {\n        if (cp < 0x1d242)\n            return false;\n        if (cp < 0x1d245)\n            return true;\n        if (cp < 0x1d7ce)\n            return false;\n        if (cp < 0x1d800)\n            return true;\n        if (cp < 0x1da00)\n            return false;\n        if (cp < 0x1da37)\n            return true;\n        if (cp < 0x1da3b)\n            return false;\n        if (cp < 0x1da6d)\n            return true;\n        if (cp === 0x1da75)\n            return true;\n        if (cp === 0x1da84)\n            return true;\n        if (cp < 0x1da9b)\n            return false;\n        if (cp < 0x1daa0)\n            return true;\n        if (cp < 0x1daa1)\n            return false;\n        if (cp < 0x1dab0)\n            return true;\n        return false;\n    }\n    if (cp < 0x1e007)\n        return true;\n    if (cp < 0x1e008)\n        return false;\n    if (cp < 0x1e019)\n        return true;\n    if (cp < 0x1e01b)\n        return false;\n    if (cp < 0x1e022)\n        return true;\n    if (cp < 0x1e023)\n        return false;\n    if (cp < 0x1e025)\n        return true;\n    if (cp < 0x1e026)\n        return false;\n    if (cp < 0x1e02b)\n        return true;\n    if (cp < 0x1e8d0)\n        return false;\n    if (cp < 0x1e8d7)\n        return true;\n    if (cp < 0x1e944)\n        return false;\n    if (cp < 0x1e94b)\n        return true;\n    if (cp < 0x1e950)\n        return false;\n    if (cp < 0x1e95a)\n        return true;\n    if (cp < 0xe0100)\n        return false;\n    if (cp < 0xe01f0)\n        return true;\n    return false;\n}\n\nconst PropertyData = {\n    $LONE: new Set([\n        \"ASCII\",\n        \"ASCII_Hex_Digit\",\n        \"AHex\",\n        \"Alphabetic\",\n        \"Alpha\",\n        \"Any\",\n        \"Assigned\",\n        \"Bidi_Control\",\n        \"Bidi_C\",\n        \"Bidi_Mirrored\",\n        \"Bidi_M\",\n        \"Case_Ignorable\",\n        \"CI\",\n        \"Cased\",\n        \"Changes_When_Casefolded\",\n        \"CWCF\",\n        \"Changes_When_Casemapped\",\n        \"CWCM\",\n        \"Changes_When_Lowercased\",\n        \"CWL\",\n        \"Changes_When_NFKC_Casefolded\",\n        \"CWKCF\",\n        \"Changes_When_Titlecased\",\n        \"CWT\",\n        \"Changes_When_Uppercased\",\n        \"CWU\",\n        \"Dash\",\n        \"Default_Ignorable_Code_Point\",\n        \"DI\",\n        \"Deprecated\",\n        \"Dep\",\n        \"Diacritic\",\n        \"Dia\",\n        \"Emoji\",\n        \"Emoji_Component\",\n        \"Emoji_Modifier\",\n        \"Emoji_Modifier_Base\",\n        \"Emoji_Presentation\",\n        \"Extender\",\n        \"Ext\",\n        \"Grapheme_Base\",\n        \"Gr_Base\",\n        \"Grapheme_Extend\",\n        \"Gr_Ext\",\n        \"Hex_Digit\",\n        \"Hex\",\n        \"IDS_Binary_Operator\",\n        \"IDSB\",\n        \"IDS_Trinary_Operator\",\n        \"IDST\",\n        \"ID_Continue\",\n        \"IDC\",\n        \"ID_Start\",\n        \"IDS\",\n        \"Ideographic\",\n        \"Ideo\",\n        \"Join_Control\",\n        \"Join_C\",\n        \"Logical_Order_Exception\",\n        \"LOE\",\n        \"Lowercase\",\n        \"Lower\",\n        \"Math\",\n        \"Noncharacter_Code_Point\",\n        \"NChar\",\n        \"Pattern_Syntax\",\n        \"Pat_Syn\",\n        \"Pattern_White_Space\",\n        \"Pat_WS\",\n        \"Quotation_Mark\",\n        \"QMark\",\n        \"Radical\",\n        \"Regional_Indicator\",\n        \"RI\",\n        \"Sentence_Terminal\",\n        \"STerm\",\n        \"Soft_Dotted\",\n        \"SD\",\n        \"Terminal_Punctuation\",\n        \"Term\",\n        \"Unified_Ideograph\",\n        \"UIdeo\",\n        \"Uppercase\",\n        \"Upper\",\n        \"Variation_Selector\",\n        \"VS\",\n        \"White_Space\",\n        \"space\",\n        \"XID_Continue\",\n        \"XIDC\",\n        \"XID_Start\",\n        \"XIDS\",\n    ]),\n    General_Category: new Set([\n        \"Cased_Letter\",\n        \"LC\",\n        \"Close_Punctuation\",\n        \"Pe\",\n        \"Connector_Punctuation\",\n        \"Pc\",\n        \"Control\",\n        \"Cc\",\n        \"cntrl\",\n        \"Currency_Symbol\",\n        \"Sc\",\n        \"Dash_Punctuation\",\n        \"Pd\",\n        \"Decimal_Number\",\n        \"Nd\",\n        \"digit\",\n        \"Enclosing_Mark\",\n        \"Me\",\n        \"Final_Punctuation\",\n        \"Pf\",\n        \"Format\",\n        \"Cf\",\n        \"Initial_Punctuation\",\n        \"Pi\",\n        \"Letter\",\n        \"L\",\n        \"Letter_Number\",\n        \"Nl\",\n        \"Line_Separator\",\n        \"Zl\",\n        \"Lowercase_Letter\",\n        \"Ll\",\n        \"Mark\",\n        \"M\",\n        \"Combining_Mark\",\n        \"Math_Symbol\",\n        \"Sm\",\n        \"Modifier_Letter\",\n        \"Lm\",\n        \"Modifier_Symbol\",\n        \"Sk\",\n        \"Nonspacing_Mark\",\n        \"Mn\",\n        \"Number\",\n        \"N\",\n        \"Open_Punctuation\",\n        \"Ps\",\n        \"Other\",\n        \"C\",\n        \"Other_Letter\",\n        \"Lo\",\n        \"Other_Number\",\n        \"No\",\n        \"Other_Punctuation\",\n        \"Po\",\n        \"Other_Symbol\",\n        \"So\",\n        \"Paragraph_Separator\",\n        \"Zp\",\n        \"Private_Use\",\n        \"Co\",\n        \"Punctuation\",\n        \"P\",\n        \"punct\",\n        \"Separator\",\n        \"Z\",\n        \"Space_Separator\",\n        \"Zs\",\n        \"Spacing_Mark\",\n        \"Mc\",\n        \"Surrogate\",\n        \"Cs\",\n        \"Symbol\",\n        \"S\",\n        \"Titlecase_Letter\",\n        \"Lt\",\n        \"Unassigned\",\n        \"Cn\",\n        \"Uppercase_Letter\",\n        \"Lu\",\n    ]),\n    Script: new Set([\n        \"Adlam\",\n        \"Adlm\",\n        \"Ahom\",\n        \"Anatolian_Hieroglyphs\",\n        \"Hluw\",\n        \"Arabic\",\n        \"Arab\",\n        \"Armenian\",\n        \"Armn\",\n        \"Avestan\",\n        \"Avst\",\n        \"Balinese\",\n        \"Bali\",\n        \"Bamum\",\n        \"Bamu\",\n        \"Bassa_Vah\",\n        \"Bass\",\n        \"Batak\",\n        \"Batk\",\n        \"Bengali\",\n        \"Beng\",\n        \"Bhaiksuki\",\n        \"Bhks\",\n        \"Bopomofo\",\n        \"Bopo\",\n        \"Brahmi\",\n        \"Brah\",\n        \"Braille\",\n        \"Brai\",\n        \"Buginese\",\n        \"Bugi\",\n        \"Buhid\",\n        \"Buhd\",\n        \"Canadian_Aboriginal\",\n        \"Cans\",\n        \"Carian\",\n        \"Cari\",\n        \"Caucasian_Albanian\",\n        \"Aghb\",\n        \"Chakma\",\n        \"Cakm\",\n        \"Cham\",\n        \"Cherokee\",\n        \"Cher\",\n        \"Common\",\n        \"Zyyy\",\n        \"Coptic\",\n        \"Copt\",\n        \"Qaac\",\n        \"Cuneiform\",\n        \"Xsux\",\n        \"Cypriot\",\n        \"Cprt\",\n        \"Cyrillic\",\n        \"Cyrl\",\n        \"Deseret\",\n        \"Dsrt\",\n        \"Devanagari\",\n        \"Deva\",\n        \"Duployan\",\n        \"Dupl\",\n        \"Egyptian_Hieroglyphs\",\n        \"Egyp\",\n        \"Elbasan\",\n        \"Elba\",\n        \"Ethiopic\",\n        \"Ethi\",\n        \"Georgian\",\n        \"Geor\",\n        \"Glagolitic\",\n        \"Glag\",\n        \"Gothic\",\n        \"Goth\",\n        \"Grantha\",\n        \"Gran\",\n        \"Greek\",\n        \"Grek\",\n        \"Gujarati\",\n        \"Gujr\",\n        \"Gurmukhi\",\n        \"Guru\",\n        \"Han\",\n        \"Hani\",\n        \"Hangul\",\n        \"Hang\",\n        \"Hanunoo\",\n        \"Hano\",\n        \"Hatran\",\n        \"Hatr\",\n        \"Hebrew\",\n        \"Hebr\",\n        \"Hiragana\",\n        \"Hira\",\n        \"Imperial_Aramaic\",\n        \"Armi\",\n        \"Inherited\",\n        \"Zinh\",\n        \"Qaai\",\n        \"Inscriptional_Pahlavi\",\n        \"Phli\",\n        \"Inscriptional_Parthian\",\n        \"Prti\",\n        \"Javanese\",\n        \"Java\",\n        \"Kaithi\",\n        \"Kthi\",\n        \"Kannada\",\n        \"Knda\",\n        \"Katakana\",\n        \"Kana\",\n        \"Kayah_Li\",\n        \"Kali\",\n        \"Kharoshthi\",\n        \"Khar\",\n        \"Khmer\",\n        \"Khmr\",\n        \"Khojki\",\n        \"Khoj\",\n        \"Khudawadi\",\n        \"Sind\",\n        \"Lao\",\n        \"Laoo\",\n        \"Latin\",\n        \"Latn\",\n        \"Lepcha\",\n        \"Lepc\",\n        \"Limbu\",\n        \"Limb\",\n        \"Linear_A\",\n        \"Lina\",\n        \"Linear_B\",\n        \"Linb\",\n        \"Lisu\",\n        \"Lycian\",\n        \"Lyci\",\n        \"Lydian\",\n        \"Lydi\",\n        \"Mahajani\",\n        \"Mahj\",\n        \"Malayalam\",\n        \"Mlym\",\n        \"Mandaic\",\n        \"Mand\",\n        \"Manichaean\",\n        \"Mani\",\n        \"Marchen\",\n        \"Marc\",\n        \"Masaram_Gondi\",\n        \"Gonm\",\n        \"Meetei_Mayek\",\n        \"Mtei\",\n        \"Mende_Kikakui\",\n        \"Mend\",\n        \"Meroitic_Cursive\",\n        \"Merc\",\n        \"Meroitic_Hieroglyphs\",\n        \"Mero\",\n        \"Miao\",\n        \"Plrd\",\n        \"Modi\",\n        \"Mongolian\",\n        \"Mong\",\n        \"Mro\",\n        \"Mroo\",\n        \"Multani\",\n        \"Mult\",\n        \"Myanmar\",\n        \"Mymr\",\n        \"Nabataean\",\n        \"Nbat\",\n        \"New_Tai_Lue\",\n        \"Talu\",\n        \"Newa\",\n        \"Nko\",\n        \"Nkoo\",\n        \"Nushu\",\n        \"Nshu\",\n        \"Ogham\",\n        \"Ogam\",\n        \"Ol_Chiki\",\n        \"Olck\",\n        \"Old_Hungarian\",\n        \"Hung\",\n        \"Old_Italic\",\n        \"Ital\",\n        \"Old_North_Arabian\",\n        \"Narb\",\n        \"Old_Permic\",\n        \"Perm\",\n        \"Old_Persian\",\n        \"Xpeo\",\n        \"Old_South_Arabian\",\n        \"Sarb\",\n        \"Old_Turkic\",\n        \"Orkh\",\n        \"Oriya\",\n        \"Orya\",\n        \"Osage\",\n        \"Osge\",\n        \"Osmanya\",\n        \"Osma\",\n        \"Pahawh_Hmong\",\n        \"Hmng\",\n        \"Palmyrene\",\n        \"Palm\",\n        \"Pau_Cin_Hau\",\n        \"Pauc\",\n        \"Phags_Pa\",\n        \"Phag\",\n        \"Phoenician\",\n        \"Phnx\",\n        \"Psalter_Pahlavi\",\n        \"Phlp\",\n        \"Rejang\",\n        \"Rjng\",\n        \"Runic\",\n        \"Runr\",\n        \"Samaritan\",\n        \"Samr\",\n        \"Saurashtra\",\n        \"Saur\",\n        \"Sharada\",\n        \"Shrd\",\n        \"Shavian\",\n        \"Shaw\",\n        \"Siddham\",\n        \"Sidd\",\n        \"SignWriting\",\n        \"Sgnw\",\n        \"Sinhala\",\n        \"Sinh\",\n        \"Sora_Sompeng\",\n        \"Sora\",\n        \"Soyombo\",\n        \"Soyo\",\n        \"Sundanese\",\n        \"Sund\",\n        \"Syloti_Nagri\",\n        \"Sylo\",\n        \"Syriac\",\n        \"Syrc\",\n        \"Tagalog\",\n        \"Tglg\",\n        \"Tagbanwa\",\n        \"Tagb\",\n        \"Tai_Le\",\n        \"Tale\",\n        \"Tai_Tham\",\n        \"Lana\",\n        \"Tai_Viet\",\n        \"Tavt\",\n        \"Takri\",\n        \"Takr\",\n        \"Tamil\",\n        \"Taml\",\n        \"Tangut\",\n        \"Tang\",\n        \"Telugu\",\n        \"Telu\",\n        \"Thaana\",\n        \"Thaa\",\n        \"Thai\",\n        \"Tibetan\",\n        \"Tibt\",\n        \"Tifinagh\",\n        \"Tfng\",\n        \"Tirhuta\",\n        \"Tirh\",\n        \"Ugaritic\",\n        \"Ugar\",\n        \"Vai\",\n        \"Vaii\",\n        \"Warang_Citi\",\n        \"Wara\",\n        \"Yi\",\n        \"Yiii\",\n        \"Zanabazar_Square\",\n        \"Zanb\",\n    ]),\n};\nPropertyData.gc = PropertyData.General_Category;\nPropertyData.sc = PropertyData.Script_Extensions = PropertyData.scx =\n    PropertyData.Script;\n\nconst Backspace = 0x08;\nconst CharacterTabulation = 0x09;\nconst LineFeed = 0x0a;\nconst LineTabulation = 0x0b;\nconst FormFeed = 0x0c;\nconst CarriageReturn = 0x0d;\nconst ExclamationMark = 0x21;\nconst DollarSign = 0x24;\nconst LeftParenthesis = 0x28;\nconst RightParenthesis = 0x29;\nconst Asterisk = 0x2a;\nconst PlusSign = 0x2b;\nconst Comma = 0x2c;\nconst HyphenMinus = 0x2d;\nconst FullStop = 0x2e;\nconst Solidus = 0x2f;\nconst DigitZero = 0x30;\nconst DigitOne = 0x31;\nconst DigitSeven = 0x37;\nconst DigitNine = 0x39;\nconst Colon = 0x3a;\nconst LessThanSign = 0x3c;\nconst EqualsSign = 0x3d;\nconst GreaterThanSign = 0x3e;\nconst QuestionMark = 0x3f;\nconst LatinCapitalLetterA = 0x41;\nconst LatinCapitalLetterB = 0x42;\nconst LatinCapitalLetterD = 0x44;\nconst LatinCapitalLetterF = 0x46;\nconst LatinCapitalLetterP = 0x50;\nconst LatinCapitalLetterS = 0x53;\nconst LatinCapitalLetterW = 0x57;\nconst LatinCapitalLetterZ = 0x5a;\nconst LowLine = 0x5f;\nconst LatinSmallLetterA = 0x61;\nconst LatinSmallLetterB = 0x62;\nconst LatinSmallLetterC = 0x63;\nconst LatinSmallLetterD = 0x64;\nconst LatinSmallLetterF = 0x66;\nconst LatinSmallLetterG = 0x67;\nconst LatinSmallLetterI = 0x69;\nconst LatinSmallLetterK = 0x6b;\nconst LatinSmallLetterM = 0x6d;\nconst LatinSmallLetterN = 0x6e;\nconst LatinSmallLetterP = 0x70;\nconst LatinSmallLetterR = 0x72;\nconst LatinSmallLetterS = 0x73;\nconst LatinSmallLetterT = 0x74;\nconst LatinSmallLetterU = 0x75;\nconst LatinSmallLetterV = 0x76;\nconst LatinSmallLetterW = 0x77;\nconst LatinSmallLetterX = 0x78;\nconst LatinSmallLetterY = 0x79;\nconst LatinSmallLetterZ = 0x7a;\nconst LeftSquareBracket = 0x5b;\nconst ReverseSolidus = 0x5c;\nconst RightSquareBracket = 0x5d;\nconst CircumflexAccent = 0x5e;\nconst LeftCurlyBracket = 0x7b;\nconst VerticalLine = 0x7c;\nconst RightCurlyBracket = 0x7d;\nconst ZeroWidthNonJoiner = 0x200c;\nconst ZeroWidthJoiner = 0x200d;\nconst LineSeparator = 0x2028;\nconst ParagraphSeparator = 0x2029;\nconst MinCodePoint = 0x00;\nconst MaxCodePoint = 0x10ffff;\nfunction isLatinLetter(code) {\n    return ((code >= LatinCapitalLetterA && code <= LatinCapitalLetterZ) ||\n        (code >= LatinSmallLetterA && code <= LatinSmallLetterZ));\n}\nfunction isDecimalDigit(code) {\n    return code >= DigitZero && code <= DigitNine;\n}\nfunction isOctalDigit(code) {\n    return code >= DigitZero && code <= DigitSeven;\n}\nfunction isHexDigit(code) {\n    return ((code >= DigitZero && code <= DigitNine) ||\n        (code >= LatinCapitalLetterA && code <= LatinCapitalLetterF) ||\n        (code >= LatinSmallLetterA && code <= LatinSmallLetterF));\n}\nfunction isLineTerminator(code) {\n    return (code === LineFeed ||\n        code === CarriageReturn ||\n        code === LineSeparator ||\n        code === ParagraphSeparator);\n}\nfunction isValidUnicode(code) {\n    return code >= MinCodePoint && code <= MaxCodePoint;\n}\nfunction digitToInt(code) {\n    if (code >= LatinSmallLetterA && code <= LatinSmallLetterF) {\n        return code - LatinSmallLetterA + 10;\n    }\n    if (code >= LatinCapitalLetterA && code <= LatinCapitalLetterF) {\n        return code - LatinCapitalLetterA + 10;\n    }\n    return code - DigitZero;\n}\n\nconst legacyImpl = {\n    at(s, end, i) {\n        return i < end ? s.charCodeAt(i) : -1;\n    },\n    width(c) {\n        return 1;\n    },\n};\nconst unicodeImpl = {\n    at(s, end, i) {\n        return i < end ? s.codePointAt(i) : -1;\n    },\n    width(c) {\n        return c > 0xffff ? 2 : 1;\n    },\n};\nclass Reader {\n    constructor() {\n        this._impl = legacyImpl;\n        this._s = \"\";\n        this._i = 0;\n        this._end = 0;\n        this._cp1 = -1;\n        this._w1 = 1;\n        this._cp2 = -1;\n        this._w2 = 1;\n        this._cp3 = -1;\n        this._w3 = 1;\n        this._cp4 = -1;\n    }\n    get source() {\n        return this._s;\n    }\n    get index() {\n        return this._i;\n    }\n    get currentCodePoint() {\n        return this._cp1;\n    }\n    get nextCodePoint() {\n        return this._cp2;\n    }\n    get nextCodePoint2() {\n        return this._cp3;\n    }\n    get nextCodePoint3() {\n        return this._cp4;\n    }\n    reset(source, start, end, uFlag) {\n        this._impl = uFlag ? unicodeImpl : legacyImpl;\n        this._s = source;\n        this._end = end;\n        this.rewind(start);\n    }\n    rewind(index) {\n        const impl = this._impl;\n        this._i = index;\n        this._cp1 = impl.at(this._s, this._end, index);\n        this._w1 = impl.width(this._cp1);\n        this._cp2 = impl.at(this._s, this._end, index + this._w1);\n        this._w2 = impl.width(this._cp2);\n        this._cp3 = impl.at(this._s, this._end, index + this._w1 + this._w2);\n        this._w3 = impl.width(this._cp3);\n        this._cp4 = impl.at(this._s, this._end, index + this._w1 + this._w2 + this._w3);\n    }\n    advance() {\n        if (this._cp1 !== -1) {\n            const impl = this._impl;\n            this._i += this._w1;\n            this._cp1 = this._cp2;\n            this._w1 = this._w2;\n            this._cp2 = this._cp3;\n            this._w2 = impl.width(this._cp2);\n            this._cp3 = this._cp4;\n            this._w3 = impl.width(this._cp3);\n            this._cp4 = impl.at(this._s, this._end, this._i + this._w1 + this._w2 + this._w3);\n        }\n    }\n    eat(cp) {\n        if (this._cp1 === cp) {\n            this.advance();\n            return true;\n        }\n        return false;\n    }\n    eat2(cp1, cp2) {\n        if (this._cp1 === cp1 && this._cp2 === cp2) {\n            this.advance();\n            this.advance();\n            return true;\n        }\n        return false;\n    }\n    eat3(cp1, cp2, cp3) {\n        if (this._cp1 === cp1 && this._cp2 === cp2 && this._cp3 === cp3) {\n            this.advance();\n            this.advance();\n            this.advance();\n            return true;\n        }\n        return false;\n    }\n}\n\nclass RegExpSyntaxError extends SyntaxError {\n    constructor(source, uFlag, index, message) {\n        if (source) {\n            if (source[0] !== \"/\") {\n                source = `/${source}/${uFlag ? \"u\" : \"\"}`;\n            }\n            source = `: ${source}`;\n        }\n        super(`Invalid regular expression${source}: ${message}`);\n        this.index = index;\n    }\n}\n\nfunction isSyntaxCharacter(cp) {\n    return (cp === CircumflexAccent ||\n        cp === DollarSign ||\n        cp === ReverseSolidus ||\n        cp === FullStop ||\n        cp === Asterisk ||\n        cp === PlusSign ||\n        cp === QuestionMark ||\n        cp === LeftParenthesis ||\n        cp === RightParenthesis ||\n        cp === LeftSquareBracket ||\n        cp === RightSquareBracket ||\n        cp === LeftCurlyBracket ||\n        cp === RightCurlyBracket ||\n        cp === VerticalLine);\n}\nfunction isRegExpIdentifierStart(cp) {\n    return isIdStart(cp) || cp === DollarSign || cp === LowLine;\n}\nfunction isRegExpIdentifierPart(cp) {\n    return (isIdContinue(cp) ||\n        cp === DollarSign ||\n        cp === LowLine ||\n        cp === ZeroWidthNonJoiner ||\n        cp === ZeroWidthJoiner);\n}\nfunction isUnicodePropertyNameCharacter(cp) {\n    return isLatinLetter(cp) || cp === LowLine;\n}\nfunction isUnicodePropertyValueCharacter(cp) {\n    return isUnicodePropertyNameCharacter(cp) || isDecimalDigit(cp);\n}\nfunction isValidUnicodeProperty(name, value) {\n    return PropertyData.hasOwnProperty(name) && PropertyData[name].has(value);\n}\nfunction isValidUnicodePropertyName(name) {\n    return PropertyData.$LONE.has(name);\n}\nclass RegExpValidator {\n    constructor(options) {\n        this._reader = new Reader();\n        this._uFlag = false;\n        this._nFlag = false;\n        this._lastIntValue = 0;\n        this._lastMinValue = 0;\n        this._lastMaxValue = 0;\n        this._lastStrValue = \"\";\n        this._lastKeyValue = \"\";\n        this._lastValValue = \"\";\n        this._lastAssertionIsQuantifiable = false;\n        this._numCapturingParens = 0;\n        this._groupNames = new Set();\n        this._backreferenceNames = new Set();\n        this._options = options || {};\n    }\n    validateLiteral(source, start = 0, end = source.length) {\n        this._uFlag = this._nFlag = false;\n        this.reset(source, start, end);\n        this.onLiteralEnter(start);\n        if (this.eat(Solidus) && this.eatRegExpBody() && this.eat(Solidus)) {\n            const flagStart = this.index;\n            const uFlag = source.indexOf(\"u\", flagStart) !== -1;\n            this.validateFlags(source, flagStart, end);\n            this.validatePattern(source, start + 1, flagStart - 1, uFlag);\n        }\n        else if (start >= end) {\n            this.raise(\"Empty\");\n        }\n        else {\n            const c = String.fromCodePoint(this.currentCodePoint);\n            this.raise(`Unexpected character '${c}'`);\n        }\n        this.onLiteralLeave(start, end);\n    }\n    validateFlags(source, start = 0, end = source.length) {\n        const existingFlags = new Set();\n        let global = false;\n        let ignoreCase = false;\n        let multiline = false;\n        let sticky = false;\n        let unicode = false;\n        let dotAll = false;\n        for (let i = start; i < end; ++i) {\n            const flag = source.charCodeAt(i);\n            if (existingFlags.has(flag)) {\n                this.raise(`Duplicated flag '${source[i]}'`);\n            }\n            existingFlags.add(flag);\n            if (flag === LatinSmallLetterG) {\n                global = true;\n            }\n            else if (flag === LatinSmallLetterI) {\n                ignoreCase = true;\n            }\n            else if (flag === LatinSmallLetterM) {\n                multiline = true;\n            }\n            else if (flag === LatinSmallLetterU && this.ecmaVersion >= 2015) {\n                unicode = true;\n            }\n            else if (flag === LatinSmallLetterY && this.ecmaVersion >= 2015) {\n                sticky = true;\n            }\n            else if (flag === LatinSmallLetterS && this.ecmaVersion >= 2018) {\n                dotAll = true;\n            }\n            else {\n                this.raise(`Invalid flag '${source[i]}'`);\n            }\n        }\n        this.onFlags(start, end, global, ignoreCase, multiline, unicode, sticky, dotAll);\n    }\n    validatePattern(source, start = 0, end = source.length, uFlag = false) {\n        this._uFlag = uFlag && this.ecmaVersion >= 2015;\n        this._nFlag = uFlag && this.ecmaVersion >= 2018;\n        this.reset(source, start, end);\n        this.pattern();\n        if (!this._nFlag &&\n            this.ecmaVersion >= 2018 &&\n            this._groupNames.size > 0) {\n            this._nFlag = true;\n            this.rewind(start);\n            this.pattern();\n        }\n    }\n    get strict() {\n        return Boolean(this._options.strict || this._uFlag);\n    }\n    get ecmaVersion() {\n        return this._options.ecmaVersion || 2018;\n    }\n    onLiteralEnter(start) {\n        if (this._options.onLiteralEnter) {\n            this._options.onLiteralEnter(start);\n        }\n    }\n    onLiteralLeave(start, end) {\n        if (this._options.onLiteralLeave) {\n            this._options.onLiteralLeave(start, end);\n        }\n    }\n    onFlags(start, end, global, ignoreCase, multiline, unicode, sticky, dotAll) {\n        if (this._options.onFlags) {\n            this._options.onFlags(start, end, global, ignoreCase, multiline, unicode, sticky, dotAll);\n        }\n    }\n    onPatternEnter(start) {\n        if (this._options.onPatternEnter) {\n            this._options.onPatternEnter(start);\n        }\n    }\n    onPatternLeave(start, end) {\n        if (this._options.onPatternLeave) {\n            this._options.onPatternLeave(start, end);\n        }\n    }\n    onDisjunctionEnter(start) {\n        if (this._options.onDisjunctionEnter) {\n            this._options.onDisjunctionEnter(start);\n        }\n    }\n    onDisjunctionLeave(start, end) {\n        if (this._options.onDisjunctionLeave) {\n            this._options.onDisjunctionLeave(start, end);\n        }\n    }\n    onAlternativeEnter(start, index) {\n        if (this._options.onAlternativeEnter) {\n            this._options.onAlternativeEnter(start, index);\n        }\n    }\n    onAlternativeLeave(start, end, index) {\n        if (this._options.onAlternativeLeave) {\n            this._options.onAlternativeLeave(start, end, index);\n        }\n    }\n    onGroupEnter(start) {\n        if (this._options.onGroupEnter) {\n            this._options.onGroupEnter(start);\n        }\n    }\n    onGroupLeave(start, end) {\n        if (this._options.onGroupLeave) {\n            this._options.onGroupLeave(start, end);\n        }\n    }\n    onCapturingGroupEnter(start, name) {\n        if (this._options.onCapturingGroupEnter) {\n            this._options.onCapturingGroupEnter(start, name);\n        }\n    }\n    onCapturingGroupLeave(start, end, name) {\n        if (this._options.onCapturingGroupLeave) {\n            this._options.onCapturingGroupLeave(start, end, name);\n        }\n    }\n    onQuantifier(start, end, min, max, greedy) {\n        if (this._options.onQuantifier) {\n            this._options.onQuantifier(start, end, min, max, greedy);\n        }\n    }\n    onLookaroundAssertionEnter(start, kind, negate) {\n        if (this._options.onLookaroundAssertionEnter) {\n            this._options.onLookaroundAssertionEnter(start, kind, negate);\n        }\n    }\n    onLookaroundAssertionLeave(start, end, kind, negate) {\n        if (this._options.onLookaroundAssertionLeave) {\n            this._options.onLookaroundAssertionLeave(start, end, kind, negate);\n        }\n    }\n    onEdgeAssertion(start, end, kind) {\n        if (this._options.onEdgeAssertion) {\n            this._options.onEdgeAssertion(start, end, kind);\n        }\n    }\n    onWordBoundaryAssertion(start, end, kind, negate) {\n        if (this._options.onWordBoundaryAssertion) {\n            this._options.onWordBoundaryAssertion(start, end, kind, negate);\n        }\n    }\n    onAnyCharacterSet(start, end, kind) {\n        if (this._options.onAnyCharacterSet) {\n            this._options.onAnyCharacterSet(start, end, kind);\n        }\n    }\n    onEscapeCharacterSet(start, end, kind, negate) {\n        if (this._options.onEscapeCharacterSet) {\n            this._options.onEscapeCharacterSet(start, end, kind, negate);\n        }\n    }\n    onUnicodePropertyCharacterSet(start, end, kind, key, value, negate) {\n        if (this._options.onUnicodePropertyCharacterSet) {\n            this._options.onUnicodePropertyCharacterSet(start, end, kind, key, value, negate);\n        }\n    }\n    onCharacter(start, end, value) {\n        if (this._options.onCharacter) {\n            this._options.onCharacter(start, end, value);\n        }\n    }\n    onBackreference(start, end, ref) {\n        if (this._options.onBackreference) {\n            this._options.onBackreference(start, end, ref);\n        }\n    }\n    onCharacterClassEnter(start, negate) {\n        if (this._options.onCharacterClassEnter) {\n            this._options.onCharacterClassEnter(start, negate);\n        }\n    }\n    onCharacterClassLeave(start, end, negate) {\n        if (this._options.onCharacterClassLeave) {\n            this._options.onCharacterClassLeave(start, end, negate);\n        }\n    }\n    onCharacterClassRange(start, end, min, max) {\n        if (this._options.onCharacterClassRange) {\n            this._options.onCharacterClassRange(start, end, min, max);\n        }\n    }\n    get source() {\n        return this._reader.source;\n    }\n    get index() {\n        return this._reader.index;\n    }\n    get currentCodePoint() {\n        return this._reader.currentCodePoint;\n    }\n    get nextCodePoint() {\n        return this._reader.nextCodePoint;\n    }\n    get nextCodePoint2() {\n        return this._reader.nextCodePoint2;\n    }\n    get nextCodePoint3() {\n        return this._reader.nextCodePoint3;\n    }\n    reset(source, start, end) {\n        this._reader.reset(source, start, end, this._uFlag);\n    }\n    rewind(index) {\n        this._reader.rewind(index);\n    }\n    advance() {\n        this._reader.advance();\n    }\n    eat(cp) {\n        return this._reader.eat(cp);\n    }\n    eat2(cp1, cp2) {\n        return this._reader.eat2(cp1, cp2);\n    }\n    eat3(cp1, cp2, cp3) {\n        return this._reader.eat3(cp1, cp2, cp3);\n    }\n    raise(message) {\n        throw new RegExpSyntaxError(this.source, this._uFlag, this.index, message);\n    }\n    eatRegExpBody() {\n        const start = this.index;\n        let inClass = false;\n        let escaped = false;\n        for (;;) {\n            const cp = this.currentCodePoint;\n            if (cp === -1 || isLineTerminator(cp)) {\n                const kind = inClass ? \"character class\" : \"regular expression\";\n                this.raise(`Unterminated ${kind}`);\n            }\n            if (escaped) {\n                escaped = false;\n            }\n            else if (cp === ReverseSolidus) {\n                escaped = true;\n            }\n            else if (cp === LeftSquareBracket) {\n                inClass = true;\n            }\n            else if (cp === RightSquareBracket) {\n                inClass = false;\n            }\n            else if ((cp === Solidus && !inClass) ||\n                (cp === Asterisk && this.index === start)) {\n                break;\n            }\n            this.advance();\n        }\n        return this.index !== start;\n    }\n    pattern() {\n        const start = this.index;\n        this._numCapturingParens = this.countCapturingParens();\n        this._groupNames.clear();\n        this._backreferenceNames.clear();\n        this.onPatternEnter(start);\n        this.disjunction();\n        const cp = this.currentCodePoint;\n        if (this.currentCodePoint !== -1) {\n            if (cp === RightParenthesis) {\n                this.raise(\"Unmatched ')'\");\n            }\n            if (cp === ReverseSolidus) {\n                this.raise(\"\\\\ at end of pattern\");\n            }\n            if (cp === RightSquareBracket || cp === RightCurlyBracket) {\n                this.raise(\"Lone quantifier brackets\");\n            }\n            const c = String.fromCodePoint(cp);\n            this.raise(`Unexpected character '${c}'`);\n        }\n        for (const name of this._backreferenceNames) {\n            if (!this._groupNames.has(name)) {\n                this.raise(\"Invalid named capture referenced\");\n            }\n        }\n        this.onPatternLeave(start, this.index);\n    }\n    countCapturingParens() {\n        const start = this.index;\n        let inClass = false;\n        let escaped = false;\n        let count = 0;\n        let cp = 0;\n        while ((cp = this.currentCodePoint) !== -1) {\n            if (escaped) {\n                escaped = false;\n            }\n            else if (cp === ReverseSolidus) {\n                escaped = true;\n            }\n            else if (cp === LeftSquareBracket) {\n                inClass = true;\n            }\n            else if (cp === RightSquareBracket) {\n                inClass = false;\n            }\n            else if (cp === LeftParenthesis &&\n                !inClass &&\n                (this.nextCodePoint !== QuestionMark ||\n                    (this.nextCodePoint2 === LessThanSign &&\n                        this.nextCodePoint3 !== EqualsSign &&\n                        this.nextCodePoint3 !== ExclamationMark))) {\n                count += 1;\n            }\n            this.advance();\n        }\n        this.rewind(start);\n        return count;\n    }\n    disjunction() {\n        const start = this.index;\n        let i = 0;\n        this.onDisjunctionEnter(start);\n        this.alternative(i++);\n        while (this.eat(VerticalLine)) {\n            this.alternative(i++);\n        }\n        if (this.eatQuantifier(true)) {\n            this.raise(\"Nothing to repeat\");\n        }\n        if (this.eat(LeftCurlyBracket)) {\n            this.raise(\"Lone quantifier brackets\");\n        }\n        this.onDisjunctionLeave(start, this.index);\n    }\n    alternative(i) {\n        const start = this.index;\n        this.onAlternativeEnter(start, i);\n        while (this.currentCodePoint !== -1 && this.eatTerm()) {\n        }\n        this.onAlternativeLeave(start, this.index, i);\n    }\n    eatTerm() {\n        if (this.eatAssertion()) {\n            if (this._lastAssertionIsQuantifiable) {\n                this.eatQuantifier();\n            }\n            return true;\n        }\n        if (this.strict ? this.eatAtom() : this.eatExtendedAtom()) {\n            this.eatQuantifier();\n            return true;\n        }\n        return false;\n    }\n    eatAssertion() {\n        const start = this.index;\n        this._lastAssertionIsQuantifiable = false;\n        if (this.eat(CircumflexAccent)) {\n            this.onEdgeAssertion(start, this.index, \"start\");\n            return true;\n        }\n        if (this.eat(DollarSign)) {\n            this.onEdgeAssertion(start, this.index, \"end\");\n            return true;\n        }\n        if (this.eat2(ReverseSolidus, LatinCapitalLetterB)) {\n            this.onWordBoundaryAssertion(start, this.index, \"word\", true);\n            return true;\n        }\n        if (this.eat2(ReverseSolidus, LatinSmallLetterB)) {\n            this.onWordBoundaryAssertion(start, this.index, \"word\", false);\n            return true;\n        }\n        if (this.eat2(LeftParenthesis, QuestionMark)) {\n            const lookbehind = this.ecmaVersion >= 2018 && this.eat(LessThanSign);\n            let negate = false;\n            if (this.eat(EqualsSign) || (negate = this.eat(ExclamationMark))) {\n                const kind = lookbehind ? \"lookbehind\" : \"lookahead\";\n                this.onLookaroundAssertionEnter(start, kind, negate);\n                this.disjunction();\n                if (!this.eat(RightParenthesis)) {\n                    this.raise(\"Unterminated group\");\n                }\n                this._lastAssertionIsQuantifiable = !lookbehind && !this.strict;\n                this.onLookaroundAssertionLeave(start, this.index, kind, negate);\n                return true;\n            }\n            this.rewind(start);\n        }\n        return false;\n    }\n    eatQuantifier(noError = false) {\n        const start = this.index;\n        let min = 0;\n        let max = 0;\n        let greedy = false;\n        if (this.eat(Asterisk)) {\n            min = 0;\n            max = Number.POSITIVE_INFINITY;\n        }\n        else if (this.eat(PlusSign)) {\n            min = 1;\n            max = Number.POSITIVE_INFINITY;\n        }\n        else if (this.eat(QuestionMark)) {\n            min = 0;\n            max = 1;\n        }\n        else if (this.eatBracedQuantifier(noError)) {\n            min = this._lastMinValue;\n            max = this._lastMaxValue;\n        }\n        else {\n            return false;\n        }\n        greedy = !this.eat(QuestionMark);\n        if (!noError) {\n            this.onQuantifier(start, this.index, min, max, greedy);\n        }\n        return true;\n    }\n    eatBracedQuantifier(noError) {\n        const start = this.index;\n        if (this.eat(LeftCurlyBracket)) {\n            this._lastMinValue = 0;\n            this._lastMaxValue = Number.POSITIVE_INFINITY;\n            if (this.eatDecimalDigits()) {\n                this._lastMinValue = this._lastMaxValue = this._lastIntValue;\n                if (this.eat(Comma)) {\n                    this._lastMaxValue = this.eatDecimalDigits()\n                        ? this._lastIntValue\n                        : Number.POSITIVE_INFINITY;\n                }\n                if (this.eat(RightCurlyBracket)) {\n                    if (!noError && this._lastMaxValue < this._lastMinValue) {\n                        this.raise(\"numbers out of order in {} quantifier\");\n                    }\n                    return true;\n                }\n            }\n            if (!noError && this.strict) {\n                this.raise(\"Incomplete quantifier\");\n            }\n            this.rewind(start);\n        }\n        return false;\n    }\n    eatAtom() {\n        return (this.eatPatternCharacter() ||\n            this.eatDot() ||\n            this.eatReverseSolidusAtomEscape() ||\n            this.eatCharacterClass() ||\n            this.eatUncapturingGroup() ||\n            this.eatCapturingGroup());\n    }\n    eatDot() {\n        if (this.eat(FullStop)) {\n            this.onAnyCharacterSet(this.index - 1, this.index, \"any\");\n            return true;\n        }\n        return false;\n    }\n    eatReverseSolidusAtomEscape() {\n        const start = this.index;\n        if (this.eat(ReverseSolidus)) {\n            if (this.eatAtomEscape()) {\n                return true;\n            }\n            this.rewind(start);\n        }\n        return false;\n    }\n    eatUncapturingGroup() {\n        const start = this.index;\n        if (this.eat3(LeftParenthesis, QuestionMark, Colon)) {\n            this.onGroupEnter(start);\n            this.disjunction();\n            if (!this.eat(RightParenthesis)) {\n                this.raise(\"Unterminated group\");\n            }\n            this.onGroupLeave(start, this.index);\n            return true;\n        }\n        return false;\n    }\n    eatCapturingGroup() {\n        const start = this.index;\n        if (this.eat(LeftParenthesis)) {\n            this._lastStrValue = \"\";\n            if (this.ecmaVersion >= 2018) {\n                this.groupSpecifier();\n            }\n            else if (this.currentCodePoint === QuestionMark) {\n                this.raise(\"Invalid group\");\n            }\n            const name = this._lastStrValue || null;\n            this.onCapturingGroupEnter(start, name);\n            this.disjunction();\n            if (!this.eat(RightParenthesis)) {\n                this.raise(\"Unterminated group\");\n            }\n            this.onCapturingGroupLeave(start, this.index, name);\n            return true;\n        }\n        return false;\n    }\n    eatExtendedAtom() {\n        return (this.eatDot() ||\n            this.eatReverseSolidusAtomEscape() ||\n            this.eatReverseSolidusFollowedByC() ||\n            this.eatCharacterClass() ||\n            this.eatUncapturingGroup() ||\n            this.eatCapturingGroup() ||\n            this.eatInvalidBracedQuantifier() ||\n            this.eatExtendedPatternCharacter());\n    }\n    eatReverseSolidusFollowedByC() {\n        if (this.currentCodePoint === ReverseSolidus &&\n            this.nextCodePoint === LatinSmallLetterC) {\n            this._lastIntValue = this.currentCodePoint;\n            this.advance();\n            this.onCharacter(this.index - 1, this.index, ReverseSolidus);\n            return true;\n        }\n        return false;\n    }\n    eatInvalidBracedQuantifier() {\n        if (this.eatBracedQuantifier(true)) {\n            this.raise(\"Nothing to repeat\");\n        }\n        return false;\n    }\n    eatSyntaxCharacter() {\n        if (isSyntaxCharacter(this.currentCodePoint)) {\n            this._lastIntValue = this.currentCodePoint;\n            this.advance();\n            return true;\n        }\n        return false;\n    }\n    eatPatternCharacter() {\n        const start = this.index;\n        const cp = this.currentCodePoint;\n        if (cp !== -1 && !isSyntaxCharacter(cp)) {\n            this.advance();\n            this.onCharacter(start, this.index, cp);\n            return true;\n        }\n        return false;\n    }\n    eatExtendedPatternCharacter() {\n        const start = this.index;\n        const cp = this.currentCodePoint;\n        if (cp !== -1 &&\n            cp !== CircumflexAccent &&\n            cp !== DollarSign &&\n            cp !== ReverseSolidus &&\n            cp !== FullStop &&\n            cp !== Asterisk &&\n            cp !== PlusSign &&\n            cp !== QuestionMark &&\n            cp !== LeftParenthesis &&\n            cp !== RightParenthesis &&\n            cp !== LeftSquareBracket &&\n            cp !== VerticalLine) {\n            this.advance();\n            this.onCharacter(start, this.index, cp);\n            return true;\n        }\n        return false;\n    }\n    groupSpecifier() {\n        this._lastStrValue = \"\";\n        if (this.eat(QuestionMark)) {\n            if (this.eatGroupName()) {\n                if (!this._groupNames.has(this._lastStrValue)) {\n                    this._groupNames.add(this._lastStrValue);\n                    return;\n                }\n                this.raise(\"Duplicate capture group name\");\n            }\n            this.raise(\"Invalid group\");\n        }\n    }\n    eatGroupName() {\n        this._lastStrValue = \"\";\n        if (this.eat(LessThanSign)) {\n            if (this.eatRegExpIdentifierName() && this.eat(GreaterThanSign)) {\n                return true;\n            }\n            this.raise(\"Invalid capture group name\");\n        }\n        return false;\n    }\n    eatRegExpIdentifierName() {\n        this._lastStrValue = \"\";\n        if (this.eatRegExpIdentifierStart()) {\n            this._lastStrValue += String.fromCodePoint(this._lastIntValue);\n            while (this.eatRegExpIdentifierPart()) {\n                this._lastStrValue += String.fromCodePoint(this._lastIntValue);\n            }\n            return true;\n        }\n        return false;\n    }\n    eatRegExpIdentifierStart() {\n        const start = this.index;\n        let cp = this.currentCodePoint;\n        this.advance();\n        if (cp === ReverseSolidus && this.eatRegExpUnicodeEscapeSequence()) {\n            cp = this._lastIntValue;\n        }\n        if (isRegExpIdentifierStart(cp)) {\n            this._lastIntValue = cp;\n            return true;\n        }\n        if (this.index !== start) {\n            this.rewind(start);\n        }\n        return false;\n    }\n    eatRegExpIdentifierPart() {\n        const start = this.index;\n        let cp = this.currentCodePoint;\n        this.advance();\n        if (cp === ReverseSolidus && this.eatRegExpUnicodeEscapeSequence()) {\n            cp = this._lastIntValue;\n        }\n        if (isRegExpIdentifierPart(cp)) {\n            this._lastIntValue = cp;\n            return true;\n        }\n        if (this.index !== start) {\n            this.rewind(start);\n        }\n        return false;\n    }\n    eatAtomEscape() {\n        if (this.eatBackreference() ||\n            this.eatCharacterClassEscape() ||\n            this.eatCharacterEscape() ||\n            (this._nFlag && this.eatKGroupName())) {\n            return true;\n        }\n        if (this.strict || this._uFlag) {\n            this.raise(\"Invalid escape\");\n        }\n        return false;\n    }\n    eatBackreference() {\n        const start = this.index;\n        if (this.eatDecimalEscape()) {\n            const n = this._lastIntValue;\n            if (n <= this._numCapturingParens) {\n                this.onBackreference(start - 1, this.index, n);\n                return true;\n            }\n            if (this.strict) {\n                this.raise(\"Invalid escape\");\n            }\n            this.rewind(start);\n        }\n        return false;\n    }\n    eatKGroupName() {\n        const start = this.index;\n        if (this.eat(LatinSmallLetterK)) {\n            if (this.eatGroupName()) {\n                const groupName = this._lastStrValue;\n                this._backreferenceNames.add(groupName);\n                this.onBackreference(start - 1, this.index, groupName);\n                return true;\n            }\n            this.raise(\"Invalid named reference\");\n        }\n        return false;\n    }\n    eatCharacterEscape() {\n        const start = this.index;\n        if (this.eatControlEscape() ||\n            this.eatCControlLetter() ||\n            this.eatZero() ||\n            this.eatHexEscapeSequence() ||\n            this.eatRegExpUnicodeEscapeSequence() ||\n            (!this.strict && this.eatLegacyOctalEscapeSequence()) ||\n            this.eatIdentityEscape()) {\n            this.onCharacter(start - 1, this.index, this._lastIntValue);\n            return true;\n        }\n        return false;\n    }\n    eatCControlLetter() {\n        const start = this.index;\n        if (this.eat(LatinSmallLetterC)) {\n            if (this.eatControlLetter()) {\n                return true;\n            }\n            this.rewind(start);\n        }\n        return false;\n    }\n    eatZero() {\n        if (this.currentCodePoint === DigitZero &&\n            !isDecimalDigit(this.nextCodePoint)) {\n            this._lastIntValue = 0;\n            this.advance();\n            return true;\n        }\n        return false;\n    }\n    eatControlEscape() {\n        if (this.eat(LatinSmallLetterT)) {\n            this._lastIntValue = CharacterTabulation;\n            return true;\n        }\n        if (this.eat(LatinSmallLetterN)) {\n            this._lastIntValue = LineFeed;\n            return true;\n        }\n        if (this.eat(LatinSmallLetterV)) {\n            this._lastIntValue = LineTabulation;\n            return true;\n        }\n        if (this.eat(LatinSmallLetterF)) {\n            this._lastIntValue = FormFeed;\n            return true;\n        }\n        if (this.eat(LatinSmallLetterR)) {\n            this._lastIntValue = CarriageReturn;\n            return true;\n        }\n        return false;\n    }\n    eatControlLetter() {\n        const cp = this.currentCodePoint;\n        if (isLatinLetter(cp)) {\n            this.advance();\n            this._lastIntValue = cp % 0x20;\n            return true;\n        }\n        return false;\n    }\n    eatRegExpUnicodeEscapeSequence() {\n        const start = this.index;\n        if (this.eat(LatinSmallLetterU)) {\n            if (this.eatFixedHexDigits(4)) {\n                const lead = this._lastIntValue;\n                if (this._uFlag && lead >= 0xd800 && lead <= 0xdbff) {\n                    const leadSurrogateEnd = this.index;\n                    if (this.eat(ReverseSolidus) &&\n                        this.eat(LatinSmallLetterU) &&\n                        this.eatFixedHexDigits(4)) {\n                        const trail = this._lastIntValue;\n                        if (trail >= 0xdc00 && trail <= 0xdfff) {\n                            this._lastIntValue =\n                                (lead - 0xd800) * 0x400 +\n                                    (trail - 0xdc00) +\n                                    0x10000;\n                            return true;\n                        }\n                    }\n                    this.rewind(leadSurrogateEnd);\n                    this._lastIntValue = lead;\n                }\n                return true;\n            }\n            if (this._uFlag &&\n                this.eat(LeftCurlyBracket) &&\n                this.eatHexDigits() &&\n                this.eat(RightCurlyBracket) &&\n                isValidUnicode(this._lastIntValue)) {\n                return true;\n            }\n            if (this.strict || this._uFlag) {\n                this.raise(\"Invalid unicode escape\");\n            }\n            this.rewind(start);\n        }\n        return false;\n    }\n    eatIdentityEscape() {\n        if (this._uFlag) {\n            if (this.eatSyntaxCharacter()) {\n                return true;\n            }\n            if (this.eat(Solidus)) {\n                this._lastIntValue = Solidus;\n                return true;\n            }\n            return false;\n        }\n        if (this.isValidIdentityEscape(this.currentCodePoint)) {\n            this._lastIntValue = this.currentCodePoint;\n            this.advance();\n            return true;\n        }\n        return false;\n    }\n    isValidIdentityEscape(cp) {\n        if (cp === -1) {\n            return false;\n        }\n        if (this.strict) {\n            return !isIdContinue(cp);\n        }\n        return (cp !== LatinSmallLetterC &&\n            (!this._nFlag || cp !== LatinSmallLetterK));\n    }\n    eatDecimalEscape() {\n        this._lastIntValue = 0;\n        let cp = this.currentCodePoint;\n        if (cp >= DigitOne && cp <= DigitNine) {\n            do {\n                this._lastIntValue = 10 * this._lastIntValue + (cp - DigitZero);\n                this.advance();\n            } while ((cp = this.currentCodePoint) >= DigitZero &&\n                cp <= DigitNine);\n            return true;\n        }\n        return false;\n    }\n    eatCharacterClassEscape() {\n        const start = this.index;\n        if (this.eat(LatinSmallLetterD)) {\n            this._lastIntValue = -1;\n            this.onEscapeCharacterSet(start - 1, this.index, \"digit\", false);\n            return true;\n        }\n        if (this.eat(LatinCapitalLetterD)) {\n            this._lastIntValue = -1;\n            this.onEscapeCharacterSet(start - 1, this.index, \"digit\", true);\n            return true;\n        }\n        if (this.eat(LatinSmallLetterS)) {\n            this._lastIntValue = -1;\n            this.onEscapeCharacterSet(start - 1, this.index, \"space\", false);\n            return true;\n        }\n        if (this.eat(LatinCapitalLetterS)) {\n            this._lastIntValue = -1;\n            this.onEscapeCharacterSet(start - 1, this.index, \"space\", true);\n            return true;\n        }\n        if (this.eat(LatinSmallLetterW)) {\n            this._lastIntValue = -1;\n            this.onEscapeCharacterSet(start - 1, this.index, \"word\", false);\n            return true;\n        }\n        if (this.eat(LatinCapitalLetterW)) {\n            this._lastIntValue = -1;\n            this.onEscapeCharacterSet(start - 1, this.index, \"word\", true);\n            return true;\n        }\n        let negate = false;\n        if (this._uFlag &&\n            this.ecmaVersion >= 2018 &&\n            (this.eat(LatinSmallLetterP) ||\n                (negate = this.eat(LatinCapitalLetterP)))) {\n            this._lastIntValue = -1;\n            if (this.eat(LeftCurlyBracket) &&\n                this.eatUnicodePropertyValueExpression() &&\n                this.eat(RightCurlyBracket)) {\n                this.onUnicodePropertyCharacterSet(start - 1, this.index, \"property\", this._lastKeyValue, this._lastValValue || null, negate);\n                return true;\n            }\n            this.raise(\"Invalid property name\");\n        }\n        return false;\n    }\n    eatUnicodePropertyValueExpression() {\n        const start = this.index;\n        if (this.eatUnicodePropertyName() && this.eat(EqualsSign)) {\n            this._lastKeyValue = this._lastStrValue;\n            if (this.eatUnicodePropertyValue()) {\n                this._lastValValue = this._lastStrValue;\n                if (isValidUnicodeProperty(this._lastKeyValue, this._lastValValue)) {\n                    return true;\n                }\n                this.raise(\"Invalid property name\");\n            }\n        }\n        this.rewind(start);\n        if (this.eatLoneUnicodePropertyNameOrValue()) {\n            const nameOrValue = this._lastStrValue;\n            if (isValidUnicodeProperty(\"General_Category\", nameOrValue)) {\n                this._lastKeyValue = \"General_Category\";\n                this._lastValValue = nameOrValue;\n                return true;\n            }\n            if (isValidUnicodePropertyName(nameOrValue)) {\n                this._lastKeyValue = nameOrValue;\n                this._lastValValue = \"\";\n                return true;\n            }\n            this.raise(\"Invalid property name\");\n        }\n        return false;\n    }\n    eatUnicodePropertyName() {\n        this._lastStrValue = \"\";\n        while (isUnicodePropertyNameCharacter(this.currentCodePoint)) {\n            this._lastStrValue += String.fromCodePoint(this.currentCodePoint);\n            this.advance();\n        }\n        return this._lastStrValue !== \"\";\n    }\n    eatUnicodePropertyValue() {\n        this._lastStrValue = \"\";\n        while (isUnicodePropertyValueCharacter(this.currentCodePoint)) {\n            this._lastStrValue += String.fromCodePoint(this.currentCodePoint);\n            this.advance();\n        }\n        return this._lastStrValue !== \"\";\n    }\n    eatLoneUnicodePropertyNameOrValue() {\n        return this.eatUnicodePropertyValue();\n    }\n    eatCharacterClass() {\n        const start = this.index;\n        if (this.eat(LeftSquareBracket)) {\n            const negate = this.eat(CircumflexAccent);\n            this.onCharacterClassEnter(start, negate);\n            this.classRanges();\n            if (!this.eat(RightSquareBracket)) {\n                this.raise(\"Unterminated character class\");\n            }\n            this.onCharacterClassLeave(start, this.index, negate);\n            return true;\n        }\n        return false;\n    }\n    classRanges() {\n        let start = this.index;\n        while (this.eatClassAtom()) {\n            const left = this._lastIntValue;\n            const hyphenStart = this.index;\n            if (this.eat(HyphenMinus)) {\n                this.onCharacter(hyphenStart, this.index, HyphenMinus);\n                if (this.eatClassAtom()) {\n                    const right = this._lastIntValue;\n                    if (left === -1 || right === -1) {\n                        if (this.strict) {\n                            this.raise(\"Invalid character class\");\n                        }\n                    }\n                    else if (left > right) {\n                        this.raise(\"Range out of order in character class\");\n                    }\n                    else {\n                        this.onCharacterClassRange(start, this.index, left, right);\n                    }\n                }\n            }\n            start = this.index;\n        }\n    }\n    eatClassAtom() {\n        const start = this.index;\n        if (this.eat(ReverseSolidus)) {\n            if (this.eatClassEscape()) {\n                return true;\n            }\n            if (this._uFlag) {\n                this.raise(\"Invalid escape\");\n            }\n            this.rewind(start);\n        }\n        const cp = this.currentCodePoint;\n        if (cp !== -1 && cp !== RightSquareBracket) {\n            this.advance();\n            this._lastIntValue = cp;\n            this.onCharacter(start, this.index, cp);\n            return true;\n        }\n        return false;\n    }\n    eatClassEscape() {\n        const start = this.index;\n        if (this.eat(LatinSmallLetterB)) {\n            this._lastIntValue = Backspace;\n            this.onCharacter(start - 1, this.index, Backspace);\n            return true;\n        }\n        if (this._uFlag && this.eat(HyphenMinus)) {\n            this._lastIntValue = HyphenMinus;\n            this.onCharacter(start - 1, this.index, HyphenMinus);\n            return true;\n        }\n        if (!this._uFlag && this.eat(LatinSmallLetterC)) {\n            if (this.eatClassControlLetter()) {\n                this.onCharacter(start - 1, this.index, this._lastIntValue);\n                return true;\n            }\n            this.rewind(start);\n        }\n        return this.eatCharacterClassEscape() || this.eatCharacterEscape();\n    }\n    eatClassControlLetter() {\n        const cp = this.currentCodePoint;\n        if (isDecimalDigit(cp) || cp === LowLine) {\n            this.advance();\n            this._lastIntValue = cp % 0x20;\n            return true;\n        }\n        return false;\n    }\n    eatHexEscapeSequence() {\n        const start = this.index;\n        if (this.eat(LatinSmallLetterX)) {\n            if (this.eatFixedHexDigits(2)) {\n                return true;\n            }\n            if (this._uFlag) {\n                this.raise(\"Invalid escape\");\n            }\n            this.rewind(start);\n        }\n        return false;\n    }\n    eatDecimalDigits() {\n        const start = this.index;\n        this._lastIntValue = 0;\n        while (isDecimalDigit(this.currentCodePoint)) {\n            this._lastIntValue =\n                10 * this._lastIntValue + digitToInt(this.currentCodePoint);\n            this.advance();\n        }\n        return this.index !== start;\n    }\n    eatHexDigits() {\n        const start = this.index;\n        this._lastIntValue = 0;\n        while (isHexDigit(this.currentCodePoint)) {\n            this._lastIntValue =\n                16 * this._lastIntValue + digitToInt(this.currentCodePoint);\n            this.advance();\n        }\n        return this.index !== start;\n    }\n    eatLegacyOctalEscapeSequence() {\n        if (this.eatOctalDigit()) {\n            const n1 = this._lastIntValue;\n            if (this.eatOctalDigit()) {\n                const n2 = this._lastIntValue;\n                if (n1 <= 3 && this.eatOctalDigit()) {\n                    this._lastIntValue = n1 * 64 + n2 * 8 + this._lastIntValue;\n                }\n                else {\n                    this._lastIntValue = n1 * 8 + n2;\n                }\n            }\n            else {\n                this._lastIntValue = n1;\n            }\n            return true;\n        }\n        return false;\n    }\n    eatOctalDigit() {\n        const cp = this.currentCodePoint;\n        if (isOctalDigit(cp)) {\n            this.advance();\n            this._lastIntValue = cp - DigitZero;\n            return true;\n        }\n        this._lastIntValue = 0;\n        return false;\n    }\n    eatFixedHexDigits(length) {\n        const start = this.index;\n        this._lastIntValue = 0;\n        for (let i = 0; i < length; ++i) {\n            const cp = this.currentCodePoint;\n            if (!isHexDigit(cp)) {\n                this.rewind(start);\n                return false;\n            }\n            this._lastIntValue = 16 * this._lastIntValue + digitToInt(cp);\n            this.advance();\n        }\n        return true;\n    }\n}\n\nconst DummyPattern = {};\nconst DummyFlags = {};\nconst DummyCapturingGroup = {};\nclass RegExpParserState {\n    constructor(options) {\n        this._node = DummyPattern;\n        this._flags = DummyFlags;\n        this._backreferences = [];\n        this._capturingGroups = [];\n        this.source = \"\";\n        this.strict = Boolean(options && options.strict);\n        this.ecmaVersion = (options && options.ecmaVersion) || 2018;\n    }\n    get pattern() {\n        if (this._node.type !== \"Pattern\") {\n            throw new Error(\"UnknownError\");\n        }\n        return this._node;\n    }\n    get flags() {\n        if (this._flags.type !== \"Flags\") {\n            throw new Error(\"UnknownError\");\n        }\n        return this._flags;\n    }\n    onFlags(start, end, global, ignoreCase, multiline, unicode, sticky, dotAll) {\n        this._flags = {\n            type: \"Flags\",\n            parent: null,\n            start,\n            end,\n            raw: this.source.slice(start, end),\n            global,\n            ignoreCase,\n            multiline,\n            unicode,\n            sticky,\n            dotAll,\n        };\n    }\n    onPatternEnter(start) {\n        this._node = {\n            type: \"Pattern\",\n            parent: null,\n            start,\n            end: start,\n            raw: \"\",\n            alternatives: [],\n        };\n        this._backreferences.length = 0;\n        this._capturingGroups.length = 0;\n    }\n    onPatternLeave(start, end) {\n        this._node.end = end;\n        this._node.raw = this.source.slice(start, end);\n        for (const reference of this._backreferences) {\n            const ref = reference.ref;\n            const group = typeof ref === \"number\"\n                ? this._capturingGroups[ref - 1]\n                : this._capturingGroups.find(g => g.name === ref);\n            reference.resolved = group;\n            group.references.push(reference);\n        }\n    }\n    onAlternativeEnter(start) {\n        const parent = this._node;\n        if (parent.type !== \"Assertion\" &&\n            parent.type !== \"CapturingGroup\" &&\n            parent.type !== \"Group\" &&\n            parent.type !== \"Pattern\") {\n            throw new Error(\"UnknownError\");\n        }\n        this._node = {\n            type: \"Alternative\",\n            parent,\n            start,\n            end: start,\n            raw: \"\",\n            elements: [],\n        };\n        parent.alternatives.push(this._node);\n    }\n    onAlternativeLeave(start, end) {\n        const node = this._node;\n        if (node.type !== \"Alternative\") {\n            throw new Error(\"UnknownError\");\n        }\n        node.end = end;\n        node.raw = this.source.slice(start, end);\n        this._node = node.parent;\n    }\n    onGroupEnter(start) {\n        const parent = this._node;\n        if (parent.type !== \"Alternative\") {\n            throw new Error(\"UnknownError\");\n        }\n        this._node = {\n            type: \"Group\",\n            parent,\n            start,\n            end: start,\n            raw: \"\",\n            alternatives: [],\n        };\n        parent.elements.push(this._node);\n    }\n    onGroupLeave(start, end) {\n        const node = this._node;\n        if (node.type !== \"Group\" || node.parent.type !== \"Alternative\") {\n            throw new Error(\"UnknownError\");\n        }\n        node.end = end;\n        node.raw = this.source.slice(start, end);\n        this._node = node.parent;\n    }\n    onCapturingGroupEnter(start, name) {\n        const parent = this._node;\n        if (parent.type !== \"Alternative\") {\n            throw new Error(\"UnknownError\");\n        }\n        this._node = {\n            type: \"CapturingGroup\",\n            parent,\n            start,\n            end: start,\n            raw: \"\",\n            name,\n            alternatives: [],\n            references: [],\n        };\n        parent.elements.push(this._node);\n        this._capturingGroups.push(this._node);\n    }\n    onCapturingGroupLeave(start, end) {\n        const node = this._node;\n        if (node.type !== \"CapturingGroup\" ||\n            node.parent.type !== \"Alternative\") {\n            throw new Error(\"UnknownError\");\n        }\n        node.end = end;\n        node.raw = this.source.slice(start, end);\n        this._node = node.parent;\n    }\n    onQuantifier(start, end, min, max, greedy) {\n        const parent = this._node;\n        if (parent.type !== \"Alternative\") {\n            throw new Error(\"UnknownError\");\n        }\n        const element = parent.elements.pop();\n        if (element == null ||\n            element.type === \"Quantifier\" ||\n            (element.type === \"Assertion\" && element.kind !== \"lookahead\")) {\n            throw new Error(\"UnknownError\");\n        }\n        const node = {\n            type: \"Quantifier\",\n            parent,\n            start: element.start,\n            end,\n            raw: this.source.slice(element.start, end),\n            min,\n            max,\n            greedy,\n            element,\n        };\n        parent.elements.push(node);\n        element.parent = node;\n    }\n    onLookaroundAssertionEnter(start, kind, negate) {\n        const parent = this._node;\n        if (parent.type !== \"Alternative\") {\n            throw new Error(\"UnknownError\");\n        }\n        this._node = {\n            type: \"Assertion\",\n            parent,\n            start,\n            end: start,\n            raw: \"\",\n            kind,\n            negate,\n            alternatives: [],\n        };\n        parent.elements.push(this._node);\n    }\n    onLookaroundAssertionLeave(start, end) {\n        const node = this._node;\n        if (node.type !== \"Assertion\" || node.parent.type !== \"Alternative\") {\n            throw new Error(\"UnknownError\");\n        }\n        node.end = end;\n        node.raw = this.source.slice(start, end);\n        this._node = node.parent;\n    }\n    onEdgeAssertion(start, end, kind) {\n        const parent = this._node;\n        if (parent.type !== \"Alternative\") {\n            throw new Error(\"UnknownError\");\n        }\n        parent.elements.push({\n            type: \"Assertion\",\n            parent,\n            start,\n            end,\n            raw: this.source.slice(start, end),\n            kind,\n        });\n    }\n    onWordBoundaryAssertion(start, end, kind, negate) {\n        const parent = this._node;\n        if (parent.type !== \"Alternative\") {\n            throw new Error(\"UnknownError\");\n        }\n        parent.elements.push({\n            type: \"Assertion\",\n            parent,\n            start,\n            end,\n            raw: this.source.slice(start, end),\n            kind,\n            negate,\n        });\n    }\n    onAnyCharacterSet(start, end, kind) {\n        const parent = this._node;\n        if (parent.type !== \"Alternative\") {\n            throw new Error(\"UnknownError\");\n        }\n        parent.elements.push({\n            type: \"CharacterSet\",\n            parent,\n            start,\n            end,\n            raw: this.source.slice(start, end),\n            kind,\n        });\n    }\n    onEscapeCharacterSet(start, end, kind, negate) {\n        const parent = this._node;\n        if (parent.type !== \"Alternative\" && parent.type !== \"CharacterClass\") {\n            throw new Error(\"UnknownError\");\n        }\n        parent.elements.push({\n            type: \"CharacterSet\",\n            parent,\n            start,\n            end,\n            raw: this.source.slice(start, end),\n            kind,\n            negate,\n        });\n    }\n    onUnicodePropertyCharacterSet(start, end, kind, key, value, negate) {\n        const parent = this._node;\n        if (parent.type !== \"Alternative\" && parent.type !== \"CharacterClass\") {\n            throw new Error(\"UnknownError\");\n        }\n        parent.elements.push({\n            type: \"CharacterSet\",\n            parent,\n            start,\n            end,\n            raw: this.source.slice(start, end),\n            kind,\n            key,\n            value,\n            negate,\n        });\n    }\n    onCharacter(start, end, value) {\n        const parent = this._node;\n        if (parent.type !== \"Alternative\" && parent.type !== \"CharacterClass\") {\n            throw new Error(\"UnknownError\");\n        }\n        parent.elements.push({\n            type: \"Character\",\n            parent,\n            start,\n            end,\n            raw: this.source.slice(start, end),\n            value,\n        });\n    }\n    onBackreference(start, end, ref) {\n        const parent = this._node;\n        if (parent.type !== \"Alternative\") {\n            throw new Error(\"UnknownError\");\n        }\n        const node = {\n            type: \"Backreference\",\n            parent,\n            start,\n            end,\n            raw: this.source.slice(start, end),\n            ref,\n            resolved: DummyCapturingGroup,\n        };\n        parent.elements.push(node);\n        this._backreferences.push(node);\n    }\n    onCharacterClassEnter(start, negate) {\n        const parent = this._node;\n        if (parent.type !== \"Alternative\") {\n            throw new Error(\"UnknownError\");\n        }\n        this._node = {\n            type: \"CharacterClass\",\n            parent,\n            start,\n            end: start,\n            raw: \"\",\n            negate,\n            elements: [],\n        };\n        parent.elements.push(this._node);\n    }\n    onCharacterClassLeave(start, end) {\n        const node = this._node;\n        if (node.type !== \"CharacterClass\" ||\n            node.parent.type !== \"Alternative\") {\n            throw new Error(\"UnknownError\");\n        }\n        node.end = end;\n        node.raw = this.source.slice(start, end);\n        this._node = node.parent;\n    }\n    onCharacterClassRange(start, end) {\n        const parent = this._node;\n        if (parent.type !== \"CharacterClass\") {\n            throw new Error(\"UnknownError\");\n        }\n        const elements = parent.elements;\n        const max = elements.pop();\n        const hyphen = elements.pop();\n        const min = elements.pop();\n        if (!min ||\n            !max ||\n            !hyphen ||\n            min.type !== \"Character\" ||\n            max.type !== \"Character\" ||\n            hyphen.type !== \"Character\" ||\n            hyphen.value !== HyphenMinus) {\n            throw new Error(\"UnknownError\");\n        }\n        const node = {\n            type: \"CharacterClassRange\",\n            parent,\n            start,\n            end,\n            raw: this.source.slice(start, end),\n            min,\n            max,\n        };\n        min.parent = node;\n        max.parent = node;\n        elements.push(node);\n    }\n}\nclass RegExpParser {\n    constructor(options) {\n        this._state = new RegExpParserState(options);\n        this._validator = new RegExpValidator(this._state);\n    }\n    parseLiteral(source, start = 0, end = source.length) {\n        this._state.source = source;\n        this._validator.validateLiteral(source, start, end);\n        const pattern = this._state.pattern;\n        const flags = this._state.flags;\n        const literal = {\n            type: \"RegExpLiteral\",\n            parent: null,\n            start,\n            end,\n            raw: source,\n            pattern,\n            flags,\n        };\n        pattern.parent = literal;\n        flags.parent = literal;\n        return literal;\n    }\n    parseFlags(source, start = 0, end = source.length) {\n        this._state.source = source;\n        this._validator.validateFlags(source, start, end);\n        return this._state.flags;\n    }\n    parsePattern(source, start = 0, end = source.length, uFlag = false) {\n        this._state.source = source;\n        this._validator.validatePattern(source, start, end, uFlag);\n        return this._state.pattern;\n    }\n}\n\nclass RegExpVisitor {\n    constructor(handlers) {\n        this._handlers = handlers;\n    }\n    visit(node) {\n        switch (node.type) {\n            case \"Alternative\":\n                this.visitAlternative(node);\n                break;\n            case \"Assertion\":\n                this.visitAssertion(node);\n                break;\n            case \"Backreference\":\n                this.visitBackreference(node);\n                break;\n            case \"CapturingGroup\":\n                this.visitCapturingGroup(node);\n                break;\n            case \"Character\":\n                this.visitCharacter(node);\n                break;\n            case \"CharacterClass\":\n                this.visitCharacterClass(node);\n                break;\n            case \"CharacterClassRange\":\n                this.visitCharacterClassRange(node);\n                break;\n            case \"CharacterSet\":\n                this.visitCharacterSet(node);\n                break;\n            case \"Flags\":\n                this.visitFlags(node);\n                break;\n            case \"Group\":\n                this.visitGroup(node);\n                break;\n            case \"Pattern\":\n                this.visitPattern(node);\n                break;\n            case \"Quantifier\":\n                this.visitQuantifier(node);\n                break;\n            case \"RegExpLiteral\":\n                this.visitRegExpLiteral(node);\n                break;\n            default:\n                throw new Error(`Unknown type: ${node.type}`);\n        }\n    }\n    visitAlternative(node) {\n        if (this._handlers.onAlternativeEnter) {\n            this._handlers.onAlternativeEnter(node);\n        }\n        node.elements.forEach(this.visit, this);\n        if (this._handlers.onAlternativeLeave) {\n            this._handlers.onAlternativeLeave(node);\n        }\n    }\n    visitAssertion(node) {\n        if (this._handlers.onAssertionEnter) {\n            this._handlers.onAssertionEnter(node);\n        }\n        if (node.kind === \"lookahead\" || node.kind === \"lookbehind\") {\n            node.alternatives.forEach(this.visit, this);\n        }\n        if (this._handlers.onAssertionLeave) {\n            this._handlers.onAssertionLeave(node);\n        }\n    }\n    visitBackreference(node) {\n        if (this._handlers.onBackreferenceEnter) {\n            this._handlers.onBackreferenceEnter(node);\n        }\n        if (this._handlers.onBackreferenceLeave) {\n            this._handlers.onBackreferenceLeave(node);\n        }\n    }\n    visitCapturingGroup(node) {\n        if (this._handlers.onCapturingGroupEnter) {\n            this._handlers.onCapturingGroupEnter(node);\n        }\n        node.alternatives.forEach(this.visit, this);\n        if (this._handlers.onCapturingGroupLeave) {\n            this._handlers.onCapturingGroupLeave(node);\n        }\n    }\n    visitCharacter(node) {\n        if (this._handlers.onCharacterEnter) {\n            this._handlers.onCharacterEnter(node);\n        }\n        if (this._handlers.onCharacterLeave) {\n            this._handlers.onCharacterLeave(node);\n        }\n    }\n    visitCharacterClass(node) {\n        if (this._handlers.onCharacterClassEnter) {\n            this._handlers.onCharacterClassEnter(node);\n        }\n        node.elements.forEach(this.visit, this);\n        if (this._handlers.onCharacterClassLeave) {\n            this._handlers.onCharacterClassLeave(node);\n        }\n    }\n    visitCharacterClassRange(node) {\n        if (this._handlers.onCharacterClassRangeEnter) {\n            this._handlers.onCharacterClassRangeEnter(node);\n        }\n        this.visitCharacter(node.min);\n        this.visitCharacter(node.max);\n        if (this._handlers.onCharacterClassRangeLeave) {\n            this._handlers.onCharacterClassRangeLeave(node);\n        }\n    }\n    visitCharacterSet(node) {\n        if (this._handlers.onCharacterSetEnter) {\n            this._handlers.onCharacterSetEnter(node);\n        }\n        if (this._handlers.onCharacterSetLeave) {\n            this._handlers.onCharacterSetLeave(node);\n        }\n    }\n    visitFlags(node) {\n        if (this._handlers.onFlagsEnter) {\n            this._handlers.onFlagsEnter(node);\n        }\n        if (this._handlers.onFlagsLeave) {\n            this._handlers.onFlagsLeave(node);\n        }\n    }\n    visitGroup(node) {\n        if (this._handlers.onGroupEnter) {\n            this._handlers.onGroupEnter(node);\n        }\n        node.alternatives.forEach(this.visit, this);\n        if (this._handlers.onGroupLeave) {\n            this._handlers.onGroupLeave(node);\n        }\n    }\n    visitPattern(node) {\n        if (this._handlers.onPatternEnter) {\n            this._handlers.onPatternEnter(node);\n        }\n        node.alternatives.forEach(this.visit, this);\n        if (this._handlers.onPatternLeave) {\n            this._handlers.onPatternLeave(node);\n        }\n    }\n    visitQuantifier(node) {\n        if (this._handlers.onQuantifierEnter) {\n            this._handlers.onQuantifierEnter(node);\n        }\n        this.visit(node.element);\n        if (this._handlers.onQuantifierLeave) {\n            this._handlers.onQuantifierLeave(node);\n        }\n    }\n    visitRegExpLiteral(node) {\n        if (this._handlers.onRegExpLiteralEnter) {\n            this._handlers.onRegExpLiteralEnter(node);\n        }\n        this.visitPattern(node.pattern);\n        this.visitFlags(node.flags);\n        if (this._handlers.onRegExpLiteralLeave) {\n            this._handlers.onRegExpLiteralLeave(node);\n        }\n    }\n}\n\nfunction parseRegExpLiteral(source, options) {\n    return new RegExpParser(options).parseLiteral(String(source));\n}\nfunction validateRegExpLiteral(source, options) {\n    return new RegExpValidator(options).validateLiteral(source);\n}\nfunction visitRegExpAST(node, handlers) {\n    new RegExpVisitor(handlers).visit(node);\n}\n\nexports.AST = ast;\nexports.RegExpParser = RegExpParser;\nexports.RegExpValidator = RegExpValidator;\nexports.parseRegExpLiteral = parseRegExpLiteral;\nexports.validateRegExpLiteral = validateRegExpLiteral;\nexports.visitRegExpAST = visitRegExpAST;\n//# sourceMappingURL=index.js.map\n"]}