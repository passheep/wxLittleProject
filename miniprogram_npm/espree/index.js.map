{"version":3,"sources":["espree.js","lib\\ast-node-types.js","lib\\espree.js","lib\\token-translator.js","package.json"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA,ACHA;AHUA,ACHA,ACHA,ACHA;AHUA,ACHA,ACHA,ACHA;AHUA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,AENA,ACHA,ACHA;AJaA,AENA,ACHA,ACHA;AJaA,AENA,ACHA,ACHA;AJaA,AENA,ACHA,ACHA;AJaA,AENA,ACHA,ACHA;AJaA,AENA,ACHA,ACHA;AJafile":"index.js","sourcesContent":["/**\n * @fileoverview Main Espree file that converts Acorn into Esprima output.\n *\n * This file contains code from the following MIT-licensed projects:\n * 1. Acorn\n * 2. Babylon\n * 3. Babel-ESLint\n *\n * This file also contains code from Esprima, which is BSD licensed.\n *\n * Acorn is Copyright 2012-2015 Acorn Contributors (https://github.com/marijnh/acorn/blob/master/AUTHORS)\n * Babylon is Copyright 2014-2015 various contributors (https://github.com/babel/babel/blob/master/packages/babylon/AUTHORS)\n * Babel-ESLint is Copyright 2014-2015 Sebastian McKenzie <sebmck@gmail.com>\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * * Redistributions of source code must retain the above copyright\n *   notice, this list of conditions and the following disclaimer.\n * * Redistributions in binary form must reproduce the above copyright\n *   notice, this list of conditions and the following disclaimer in the\n *   documentation and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *\n * Esprima is Copyright (c) jQuery Foundation, Inc. and Contributors, All Rights Reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n *   * Redistributions of source code must retain the above copyright\n *     notice, this list of conditions and the following disclaimer.\n *   * Redistributions in binary form must reproduce the above copyright\n *     notice, this list of conditions and the following disclaimer in the\n *     documentation and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n/* eslint no-undefined:0, no-use-before-define: 0 */\n\n\n\nconst acorn = require(\"acorn\");\nconst jsx = require(\"acorn-jsx\");\nconst astNodeTypes = require(\"./lib/ast-node-types\");\nconst espree = require(\"./lib/espree\");\n\n// To initialize lazily.\nconst parsers = {\n    _regular: null,\n    _jsx: null,\n\n    get regular() {\n        if (this._regular === null) {\n            this._regular = acorn.Parser.extend(espree());\n        }\n        return this._regular;\n    },\n\n    get jsx() {\n        if (this._jsx === null) {\n            this._jsx = acorn.Parser.extend(jsx(), espree());\n        }\n        return this._jsx;\n    },\n\n    get(options) {\n        const useJsx = Boolean(\n            options &&\n            options.ecmaFeatures &&\n            options.ecmaFeatures.jsx\n        );\n\n        return useJsx ? this.jsx : this.regular;\n    }\n};\n\n//------------------------------------------------------------------------------\n// Tokenizer\n//------------------------------------------------------------------------------\n\n/**\n * Tokenizes the given code.\n * @param {string} code The code to tokenize.\n * @param {Object} options Options defining how to tokenize.\n * @returns {Token[]} An array of tokens.\n * @throws {SyntaxError} If the input code is invalid.\n * @private\n */\nfunction tokenize(code, options) {\n    const Parser = parsers.get(options);\n\n    // Ensure to collect tokens.\n    if (!options || options.tokens !== true) {\n        options = Object.assign({}, options, { tokens: true }); // eslint-disable-line no-param-reassign\n    }\n\n    return new Parser(options, code).tokenize();\n}\n\n//------------------------------------------------------------------------------\n// Parser\n//------------------------------------------------------------------------------\n\n/**\n * Parses the given code.\n * @param {string} code The code to tokenize.\n * @param {Object} options Options defining how to tokenize.\n * @returns {ASTNode} The \"Program\" AST node.\n * @throws {SyntaxError} If the input code is invalid.\n */\nfunction parse(code, options) {\n    const Parser = parsers.get(options);\n\n    return new Parser(options, code).parse();\n}\n\n//------------------------------------------------------------------------------\n// Public\n//------------------------------------------------------------------------------\n\nexports.version = require(\"./package.json\").version;\n\nexports.tokenize = tokenize;\n\nexports.parse = parse;\n\n// Deep copy.\n/* istanbul ignore next */\nexports.Syntax = (function() {\n    let name,\n        types = {};\n\n    if (typeof Object.create === \"function\") {\n        types = Object.create(null);\n    }\n\n    for (name in astNodeTypes) {\n        if (astNodeTypes.hasOwnProperty(name)) {\n            types[name] = astNodeTypes[name];\n        }\n    }\n\n    if (typeof Object.freeze === \"function\") {\n        Object.freeze(types);\n    }\n\n    return types;\n}());\n\n/* istanbul ignore next */\nexports.VisitorKeys = (function() {\n    return require(\"eslint-visitor-keys\").KEYS;\n}());\n","/**\n * @fileoverview The AST node types produced by the parser.\n * @author Nicholas C. Zakas\n */\n\n\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\n// None!\n\n//------------------------------------------------------------------------------\n// Public\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    AssignmentExpression: \"AssignmentExpression\",\n    AssignmentPattern: \"AssignmentPattern\",\n    ArrayExpression: \"ArrayExpression\",\n    ArrayPattern: \"ArrayPattern\",\n    ArrowFunctionExpression: \"ArrowFunctionExpression\",\n    AwaitExpression: \"AwaitExpression\",\n    BlockStatement: \"BlockStatement\",\n    BinaryExpression: \"BinaryExpression\",\n    BreakStatement: \"BreakStatement\",\n    CallExpression: \"CallExpression\",\n    CatchClause: \"CatchClause\",\n    ClassBody: \"ClassBody\",\n    ClassDeclaration: \"ClassDeclaration\",\n    ClassExpression: \"ClassExpression\",\n    ConditionalExpression: \"ConditionalExpression\",\n    ContinueStatement: \"ContinueStatement\",\n    DoWhileStatement: \"DoWhileStatement\",\n    DebuggerStatement: \"DebuggerStatement\",\n    EmptyStatement: \"EmptyStatement\",\n    ExpressionStatement: \"ExpressionStatement\",\n    ForStatement: \"ForStatement\",\n    ForInStatement: \"ForInStatement\",\n    ForOfStatement: \"ForOfStatement\",\n    FunctionDeclaration: \"FunctionDeclaration\",\n    FunctionExpression: \"FunctionExpression\",\n    Identifier: \"Identifier\",\n    IfStatement: \"IfStatement\",\n    Literal: \"Literal\",\n    LabeledStatement: \"LabeledStatement\",\n    LogicalExpression: \"LogicalExpression\",\n    MemberExpression: \"MemberExpression\",\n    MetaProperty: \"MetaProperty\",\n    MethodDefinition: \"MethodDefinition\",\n    NewExpression: \"NewExpression\",\n    ObjectExpression: \"ObjectExpression\",\n    ObjectPattern: \"ObjectPattern\",\n    Program: \"Program\",\n    Property: \"Property\",\n    RestElement: \"RestElement\",\n    ReturnStatement: \"ReturnStatement\",\n    SequenceExpression: \"SequenceExpression\",\n    SpreadElement: \"SpreadElement\",\n    Super: \"Super\",\n    SwitchCase: \"SwitchCase\",\n    SwitchStatement: \"SwitchStatement\",\n    TaggedTemplateExpression: \"TaggedTemplateExpression\",\n    TemplateElement: \"TemplateElement\",\n    TemplateLiteral: \"TemplateLiteral\",\n    ThisExpression: \"ThisExpression\",\n    ThrowStatement: \"ThrowStatement\",\n    TryStatement: \"TryStatement\",\n    UnaryExpression: \"UnaryExpression\",\n    UpdateExpression: \"UpdateExpression\",\n    VariableDeclaration: \"VariableDeclaration\",\n    VariableDeclarator: \"VariableDeclarator\",\n    WhileStatement: \"WhileStatement\",\n    WithStatement: \"WithStatement\",\n    YieldExpression: \"YieldExpression\",\n    JSXIdentifier: \"JSXIdentifier\",\n    JSXNamespacedName: \"JSXNamespacedName\",\n    JSXMemberExpression: \"JSXMemberExpression\",\n    JSXEmptyExpression: \"JSXEmptyExpression\",\n    JSXExpressionContainer: \"JSXExpressionContainer\",\n    JSXElement: \"JSXElement\",\n    JSXClosingElement: \"JSXClosingElement\",\n    JSXOpeningElement: \"JSXOpeningElement\",\n    JSXAttribute: \"JSXAttribute\",\n    JSXSpreadAttribute: \"JSXSpreadAttribute\",\n    JSXText: \"JSXText\",\n    ExportDefaultDeclaration: \"ExportDefaultDeclaration\",\n    ExportNamedDeclaration: \"ExportNamedDeclaration\",\n    ExportAllDeclaration: \"ExportAllDeclaration\",\n    ExportSpecifier: \"ExportSpecifier\",\n    ImportDeclaration: \"ImportDeclaration\",\n    ImportSpecifier: \"ImportSpecifier\",\n    ImportDefaultSpecifier: \"ImportDefaultSpecifier\",\n    ImportNamespaceSpecifier: \"ImportNamespaceSpecifier\"\n};\n","\n\n/* eslint-disable no-param-reassign*/\nconst acorn = require(\"acorn\");\nconst jsx = require(\"acorn-jsx\");\nconst TokenTranslator = require(\"./token-translator\");\n\nconst DEFAULT_ECMA_VERSION = 5;\nconst STATE = Symbol(\"espree's internal state\");\nconst ESPRIMA_FINISH_NODE = Symbol(\"espree's esprimaFinishNode\");\nconst tokTypes = Object.assign({}, acorn.tokTypes, jsx.tokTypes);\n\n/**\n * Normalize ECMAScript version from the initial config\n * @param {number} ecmaVersion ECMAScript version from the initial config\n * @returns {number} normalized ECMAScript version\n */\nfunction normalizeEcmaVersion(ecmaVersion) {\n    if (typeof ecmaVersion === \"number\") {\n        let version = ecmaVersion;\n\n        // Calculate ECMAScript edition number from official year version starting with\n        // ES2015, which corresponds with ES6 (or a difference of 2009).\n        if (version >= 2015) {\n            version -= 2009;\n        }\n\n        switch (version) {\n            case 3:\n            case 5:\n            case 6:\n            case 7:\n            case 8:\n            case 9:\n            case 10:\n                return version;\n\n            default:\n                throw new Error(\"Invalid ecmaVersion.\");\n        }\n    } else {\n        return DEFAULT_ECMA_VERSION;\n    }\n}\n\n/**\n * Converts an Acorn comment to a Esprima comment.\n * @param {boolean} block True if it's a block comment, false if not.\n * @param {string} text The text of the comment.\n * @param {int} start The index at which the comment starts.\n * @param {int} end The index at which the comment ends.\n * @param {Location} startLoc The location at which the comment starts.\n * @param {Location} endLoc The location at which the comment ends.\n * @returns {Object} The comment object.\n * @private\n */\nfunction convertAcornCommentToEsprimaComment(block, text, start, end, startLoc, endLoc) {\n    const comment = {\n        type: block ? \"Block\" : \"Line\",\n        value: text\n    };\n\n    if (typeof start === \"number\") {\n        comment.start = start;\n        comment.end = end;\n        comment.range = [start, end];\n    }\n\n    if (typeof startLoc === \"object\") {\n        comment.loc = {\n            start: startLoc,\n            end: endLoc\n        };\n    }\n\n    return comment;\n}\n\nmodule.exports = () => Parser => class Espree extends Parser {\n    constructor(options, code) {\n        if (typeof options !== \"object\" || options === null) {\n            options = {};\n        }\n        if (typeof code !== \"string\" && !(code instanceof String)) {\n            code = String(code);\n        }\n\n        const ecmaFeatures = options.ecmaFeatures || {};\n        const ecmaVersion = normalizeEcmaVersion(options.ecmaVersion);\n        const isModule = options.sourceType === \"module\";\n        const tokenTranslator =\n            options.tokens === true\n                ? new TokenTranslator(tokTypes, code)\n                : null;\n\n        // Initialize acorn parser.\n        super({\n            ecmaVersion: isModule ? Math.max(6, ecmaVersion) : ecmaVersion,\n            sourceType: isModule ? \"module\" : \"script\",\n            ranges: options.range === true,\n            locations: options.loc === true,\n\n            // Truthy value is true for backward compatibility.\n            allowReturnOutsideFunction: Boolean(ecmaFeatures.globalReturn),\n\n            // Collect tokens\n            onToken: token => {\n                if (tokenTranslator) {\n\n                    // Use `tokens`, `ecmaVersion`, and `jsxAttrValueToken` in the state.\n                    tokenTranslator.onToken(token, this[STATE]);\n                }\n                if (token.type !== tokTypes.eof) {\n                    this[STATE].lastToken = token;\n                }\n            },\n\n            // Collect comments\n            onComment: (block, text, start, end, startLoc, endLoc) => {\n                if (this[STATE].comments) {\n                    const comment = convertAcornCommentToEsprimaComment(block, text, start, end, startLoc, endLoc);\n\n                    this[STATE].comments.push(comment);\n                }\n            }\n        }, code);\n\n        // Initialize internal state.\n        this[STATE] = {\n            tokens: tokenTranslator ? [] : null,\n            comments: options.comment === true ? [] : null,\n            impliedStrict: ecmaFeatures.impliedStrict === true && this.options.ecmaVersion >= 5,\n            ecmaVersion: this.options.ecmaVersion,\n            jsxAttrValueToken: false,\n            lastToken: null\n        };\n    }\n\n    tokenize() {\n        do {\n            this.next();\n        } while (this.type !== tokTypes.eof);\n\n        const extra = this[STATE];\n        const tokens = extra.tokens;\n\n        if (extra.comments) {\n            tokens.comments = extra.comments;\n        }\n\n        return tokens;\n    }\n\n    finishNode(...args) {\n        const result = super.finishNode(...args);\n\n        return this[ESPRIMA_FINISH_NODE](result);\n    }\n\n    finishNodeAt(...args) {\n        const result = super.finishNodeAt(...args);\n\n        return this[ESPRIMA_FINISH_NODE](result);\n    }\n\n    parse() {\n        const extra = this[STATE];\n        const program = super.parse();\n\n        program.sourceType = this.options.sourceType;\n\n        if (extra.comments) {\n            program.comments = extra.comments;\n        }\n        if (extra.tokens) {\n            program.tokens = extra.tokens;\n        }\n\n        /*\n         * Adjust opening and closing position of program to match Esprima.\n         * Acorn always starts programs at range 0 whereas Esprima starts at the\n         * first AST node's start (the only real difference is when there's leading\n         * whitespace or leading comments). Acorn also counts trailing whitespace\n         * as part of the program whereas Esprima only counts up to the last token.\n         */\n        if (program.range) {\n            program.range[0] = program.body.length ? program.body[0].range[0] : program.range[0];\n            program.range[1] = extra.lastToken ? extra.lastToken.range[1] : program.range[1];\n        }\n        if (program.loc) {\n            program.loc.start = program.body.length ? program.body[0].loc.start : program.loc.start;\n            program.loc.end = extra.lastToken ? extra.lastToken.loc.end : program.loc.end;\n        }\n\n        return program;\n    }\n\n    parseTopLevel(node) {\n        if (this[STATE].impliedStrict) {\n            this.strict = true;\n        }\n        return super.parseTopLevel(node);\n    }\n\n    /**\n     * Overwrites the default raise method to throw Esprima-style errors.\n     * @param {int} pos The position of the error.\n     * @param {string} message The error message.\n     * @throws {SyntaxError} A syntax error.\n     * @returns {void}\n     */\n    raise(pos, message) {\n        const loc = acorn.getLineInfo(this.input, pos);\n        const err = new SyntaxError(message);\n\n        err.index = pos;\n        err.lineNumber = loc.line;\n        err.column = loc.column + 1; // acorn uses 0-based columns\n        throw err;\n    }\n\n    /**\n     * Overwrites the default raise method to throw Esprima-style errors.\n     * @param {int} pos The position of the error.\n     * @param {string} message The error message.\n     * @throws {SyntaxError} A syntax error.\n     * @returns {void}\n     */\n    raiseRecoverable(pos, message) {\n        this.raise(pos, message);\n    }\n\n    /**\n     * Overwrites the default unexpected method to throw Esprima-style errors.\n     * @param {int} pos The position of the error.\n     * @throws {SyntaxError} A syntax error.\n     * @returns {void}\n     */\n    unexpected(pos) {\n        let message = \"Unexpected token\";\n\n        if (pos !== null && pos !== void 0) {\n            this.pos = pos;\n\n            if (this.options.locations) {\n                while (this.pos < this.lineStart) {\n                    this.lineStart = this.input.lastIndexOf(\"\\n\", this.lineStart - 2) + 1;\n                    --this.curLine;\n                }\n            }\n\n            this.nextToken();\n        }\n\n        if (this.end > this.start) {\n            message += ` ${this.input.slice(this.start, this.end)}`;\n        }\n\n        this.raise(this.start, message);\n    }\n\n    /*\n     * Esprima-FB represents JSX strings as tokens called \"JSXText\", but Acorn-JSX\n     * uses regular tt.string without any distinction between this and regular JS\n     * strings. As such, we intercept an attempt to read a JSX string and set a flag\n     * on extra so that when tokens are converted, the next token will be switched\n     * to JSXText via onToken.\n     */\n    jsx_readString(quote) { // eslint-disable-line camelcase\n        const result = super.jsx_readString(quote);\n\n        if (this.type === tokTypes.string) {\n            this[STATE].jsxAttrValueToken = true;\n        }\n        return result;\n    }\n\n    /**\n     * Performs last-minute Esprima-specific compatibility checks and fixes.\n     * @param {ASTNode} result The node to check.\n     * @returns {ASTNode} The finished node.\n     */\n    [ESPRIMA_FINISH_NODE](result) {\n\n        // Acorn doesn't count the opening and closing backticks as part of templates\n        // so we have to adjust ranges/locations appropriately.\n        if (result.type === \"TemplateElement\") {\n\n            // additional adjustment needed if ${ is the last token\n            const terminalDollarBraceL = this.input.slice(result.end, result.end + 2) === \"${\";\n\n            if (result.range) {\n                result.range[0]--;\n                result.range[1] += (terminalDollarBraceL ? 2 : 1);\n            }\n\n            if (result.loc) {\n                result.loc.start.column--;\n                result.loc.end.column += (terminalDollarBraceL ? 2 : 1);\n            }\n        }\n\n        if (result.type.indexOf(\"Function\") > -1 && !result.generator) {\n            result.generator = false;\n        }\n\n        return result;\n    }\n};\n","/**\n * @fileoverview Translates tokens between Acorn format and Esprima format.\n * @author Nicholas C. Zakas\n */\n/* eslint no-underscore-dangle: 0 */\n\n\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\n// none!\n\n//------------------------------------------------------------------------------\n// Private\n//------------------------------------------------------------------------------\n\n\n// Esprima Token Types\nconst Token = {\n    Boolean: \"Boolean\",\n    EOF: \"<end>\",\n    Identifier: \"Identifier\",\n    Keyword: \"Keyword\",\n    Null: \"Null\",\n    Numeric: \"Numeric\",\n    Punctuator: \"Punctuator\",\n    String: \"String\",\n    RegularExpression: \"RegularExpression\",\n    Template: \"Template\",\n    JSXIdentifier: \"JSXIdentifier\",\n    JSXText: \"JSXText\"\n};\n\n/**\n * Converts part of a template into an Esprima token.\n * @param {AcornToken[]} tokens The Acorn tokens representing the template.\n * @param {string} code The source code.\n * @returns {EsprimaToken} The Esprima equivalent of the template token.\n * @private\n */\nfunction convertTemplatePart(tokens, code) {\n    const firstToken = tokens[0],\n        lastTemplateToken = tokens[tokens.length - 1];\n\n    const token = {\n        type: Token.Template,\n        value: code.slice(firstToken.start, lastTemplateToken.end)\n    };\n\n    if (firstToken.loc) {\n        token.loc = {\n            start: firstToken.loc.start,\n            end: lastTemplateToken.loc.end\n        };\n    }\n\n    if (firstToken.range) {\n        token.start = firstToken.range[0];\n        token.end = lastTemplateToken.range[1];\n        token.range = [token.start, token.end];\n    }\n\n    return token;\n}\n\n/**\n * Contains logic to translate Acorn tokens into Esprima tokens.\n * @param {Object} acornTokTypes The Acorn token types.\n * @param {string} code The source code Acorn is parsing. This is necessary\n *      to correct the \"value\" property of some tokens.\n * @constructor\n */\nfunction TokenTranslator(acornTokTypes, code) {\n\n    // token types\n    this._acornTokTypes = acornTokTypes;\n\n    // token buffer for templates\n    this._tokens = [];\n\n    // track the last curly brace\n    this._curlyBrace = null;\n\n    // the source code\n    this._code = code;\n\n}\n\nTokenTranslator.prototype = {\n    constructor: TokenTranslator,\n\n    /**\n     * Translates a single Esprima token to a single Acorn token. This may be\n     * inaccurate due to how templates are handled differently in Esprima and\n     * Acorn, but should be accurate for all other tokens.\n     * @param {AcornToken} token The Acorn token to translate.\n     * @param {Object} extra Espree extra object.\n     * @returns {EsprimaToken} The Esprima version of the token.\n     */\n    translate(token, extra) {\n\n        const type = token.type,\n            tt = this._acornTokTypes;\n\n        if (type === tt.name) {\n            token.type = Token.Identifier;\n\n            // TODO: See if this is an Acorn bug\n            if (token.value === \"static\") {\n                token.type = Token.Keyword;\n            }\n\n            if (extra.ecmaVersion > 5 && (token.value === \"yield\" || token.value === \"let\")) {\n                token.type = Token.Keyword;\n            }\n\n        } else if (type === tt.semi || type === tt.comma ||\n                 type === tt.parenL || type === tt.parenR ||\n                 type === tt.braceL || type === tt.braceR ||\n                 type === tt.dot || type === tt.bracketL ||\n                 type === tt.colon || type === tt.question ||\n                 type === tt.bracketR || type === tt.ellipsis ||\n                 type === tt.arrow || type === tt.jsxTagStart ||\n                 type === tt.incDec || type === tt.starstar ||\n                 type === tt.jsxTagEnd || type === tt.prefix ||\n                 (type.binop && !type.keyword) ||\n                 type.isAssign) {\n\n            token.type = Token.Punctuator;\n            token.value = this._code.slice(token.start, token.end);\n        } else if (type === tt.jsxName) {\n            token.type = Token.JSXIdentifier;\n        } else if (type.label === \"jsxText\" || type === tt.jsxAttrValueToken) {\n            token.type = Token.JSXText;\n        } else if (type.keyword) {\n            if (type.keyword === \"true\" || type.keyword === \"false\") {\n                token.type = Token.Boolean;\n            } else if (type.keyword === \"null\") {\n                token.type = Token.Null;\n            } else {\n                token.type = Token.Keyword;\n            }\n        } else if (type === tt.num) {\n            token.type = Token.Numeric;\n            token.value = this._code.slice(token.start, token.end);\n        } else if (type === tt.string) {\n\n            if (extra.jsxAttrValueToken) {\n                extra.jsxAttrValueToken = false;\n                token.type = Token.JSXText;\n            } else {\n                token.type = Token.String;\n            }\n\n            token.value = this._code.slice(token.start, token.end);\n        } else if (type === tt.regexp) {\n            token.type = Token.RegularExpression;\n            const value = token.value;\n\n            token.regex = {\n                flags: value.flags,\n                pattern: value.pattern\n            };\n            token.value = `/${value.pattern}/${value.flags}`;\n        }\n\n        return token;\n    },\n\n    /**\n     * Function to call during Acorn's onToken handler.\n     * @param {AcornToken} token The Acorn token.\n     * @param {Object} extra The Espree extra object.\n     * @returns {void}\n     */\n    onToken(token, extra) {\n\n        const that = this,\n            tt = this._acornTokTypes,\n            tokens = extra.tokens,\n            templateTokens = this._tokens;\n\n        /**\n         * Flushes the buffered template tokens and resets the template\n         * tracking.\n         * @returns {void}\n         * @private\n         */\n        function translateTemplateTokens() {\n            tokens.push(convertTemplatePart(that._tokens, that._code));\n            that._tokens = [];\n        }\n\n        if (token.type === tt.eof) {\n\n            // might be one last curlyBrace\n            if (this._curlyBrace) {\n                tokens.push(this.translate(this._curlyBrace, extra));\n            }\n\n            return;\n        }\n\n        if (token.type === tt.backQuote) {\n\n            // if there's already a curly, it's not part of the template\n            if (this._curlyBrace) {\n                tokens.push(this.translate(this._curlyBrace, extra));\n                this._curlyBrace = null;\n            }\n\n            templateTokens.push(token);\n\n            // it's the end\n            if (templateTokens.length > 1) {\n                translateTemplateTokens();\n            }\n\n            return;\n        }\n        if (token.type === tt.dollarBraceL) {\n            templateTokens.push(token);\n            translateTemplateTokens();\n            return;\n        }\n        if (token.type === tt.braceR) {\n\n            // if there's already a curly, it's not part of the template\n            if (this._curlyBrace) {\n                tokens.push(this.translate(this._curlyBrace, extra));\n            }\n\n            // store new curly for later\n            this._curlyBrace = token;\n            return;\n        }\n        if (token.type === tt.template || token.type === tt.invalidTemplate) {\n            if (this._curlyBrace) {\n                templateTokens.push(this._curlyBrace);\n                this._curlyBrace = null;\n            }\n\n            templateTokens.push(token);\n            return;\n        }\n\n        if (this._curlyBrace) {\n            tokens.push(this.translate(this._curlyBrace, extra));\n            this._curlyBrace = null;\n        }\n\n        tokens.push(this.translate(token, extra));\n    }\n};\n\n//------------------------------------------------------------------------------\n// Public\n//------------------------------------------------------------------------------\n\nmodule.exports = TokenTranslator;\n","module.exports = {\n  \"_from\": \"espree@^5.0.1\",\n  \"_id\": \"espree@5.0.1\",\n  \"_inBundle\": false,\n  \"_integrity\": \"sha512-qWAZcWh4XE/RwzLJejfcofscgMc9CamR6Tn1+XRXNzrvUSSbiAjGOI/fggztjIi7y9VLPqnICMIPiGyr8JaZ0A==\",\n  \"_location\": \"/espree\",\n  \"_phantomChildren\": {},\n  \"_requested\": {\n    \"type\": \"range\",\n    \"registry\": true,\n    \"raw\": \"espree@^5.0.1\",\n    \"name\": \"espree\",\n    \"escapedName\": \"espree\",\n    \"rawSpec\": \"^5.0.1\",\n    \"saveSpec\": null,\n    \"fetchSpec\": \"^5.0.1\"\n  },\n  \"_requiredBy\": [\n    \"/eslint\"\n  ],\n  \"_resolved\": \"https://registry.npmjs.org/espree/-/espree-5.0.1.tgz\",\n  \"_shasum\": \"5d6526fa4fc7f0788a5cf75b15f30323e2f81f7a\",\n  \"_spec\": \"espree@^5.0.1\",\n  \"_where\": \"E:\\\\1-safe\\\\safety-vx\\\\node_modules\\\\eslint\",\n  \"author\": {\n    \"name\": \"Nicholas C. Zakas\",\n    \"email\": \"nicholas+npm@nczconsulting.com\"\n  },\n  \"bugs\": {\n    \"url\": \"http://github.com/eslint/espree.git\"\n  },\n  \"bundleDependencies\": false,\n  \"dependencies\": {\n    \"acorn\": \"^6.0.7\",\n    \"acorn-jsx\": \"^5.0.0\",\n    \"eslint-visitor-keys\": \"^1.0.0\"\n  },\n  \"deprecated\": false,\n  \"description\": \"An Esprima-compatible JavaScript parser built on Acorn\",\n  \"devDependencies\": {\n    \"browserify\": \"^7.0.0\",\n    \"chai\": \"^1.10.0\",\n    \"eslint\": \"^5.7.0\",\n    \"eslint-config-eslint\": \"^5.0.1\",\n    \"eslint-plugin-node\": \"^8.0.0\",\n    \"eslint-release\": \"^1.0.0\",\n    \"esprima\": \"latest\",\n    \"esprima-fb\": \"^8001.2001.0-dev-harmony-fb\",\n    \"json-diff\": \"~0.3.1\",\n    \"leche\": \"^1.0.1\",\n    \"mocha\": \"^2.0.1\",\n    \"nyc\": \"^13.0.1\",\n    \"regenerate\": \"~0.5.4\",\n    \"shelljs\": \"^0.3.0\",\n    \"shelljs-nodecli\": \"^0.1.1\",\n    \"unicode-6.3.0\": \"~0.1.0\"\n  },\n  \"engines\": {\n    \"node\": \">=6.0.0\"\n  },\n  \"files\": [\n    \"lib\",\n    \"espree.js\"\n  ],\n  \"homepage\": \"https://github.com/eslint/espree\",\n  \"keywords\": [\n    \"ast\",\n    \"ecmascript\",\n    \"javascript\",\n    \"parser\",\n    \"syntax\",\n    \"acorn\"\n  ],\n  \"license\": \"BSD-2-Clause\",\n  \"main\": \"espree.js\",\n  \"name\": \"espree\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/eslint/espree.git\"\n  },\n  \"scripts\": {\n    \"browserify\": \"node Makefile.js browserify\",\n    \"generate-alpharelease\": \"eslint-generate-prerelease alpha\",\n    \"generate-betarelease\": \"eslint-generate-prerelease beta\",\n    \"generate-rcrelease\": \"eslint-generate-prerelease rc\",\n    \"generate-regex\": \"node tools/generate-identifier-regex.js\",\n    \"generate-release\": \"eslint-generate-release\",\n    \"lint\": \"node Makefile.js lint\",\n    \"publish-release\": \"eslint-publish-release\",\n    \"test\": \"npm run-script lint && node Makefile.js test\"\n  },\n  \"version\": \"5.0.1\"\n}\n"]}