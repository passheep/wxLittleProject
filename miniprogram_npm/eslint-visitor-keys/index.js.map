{"version":3,"sources":["index.js","visitor-keys.json"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["/**\n * @author Toru Nagashima <https://github.com/mysticatea>\n * See LICENSE file in root directory for full license.\n */\n\n\nconst KEYS = require(\"./visitor-keys.json\");\n\n// Types.\nconst NODE_TYPES = Object.freeze(Object.keys(KEYS));\n\n// Freeze the keys.\nfor (const type of NODE_TYPES) {\n    Object.freeze(KEYS[type]);\n}\nObject.freeze(KEYS);\n\n// List to ignore keys.\nconst KEY_BLACKLIST = new Set([\n    \"parent\",\n    \"leadingComments\",\n    \"trailingComments\"\n]);\n\n/**\n * Check whether a given key should be used or not.\n * @param {string} key The key to check.\n * @returns {boolean} `true` if the key should be used.\n */\nfunction filterKey(key) {\n    return !KEY_BLACKLIST.has(key) && key[0] !== \"_\";\n}\n\n//------------------------------------------------------------------------------\n// Public interfaces\n//------------------------------------------------------------------------------\n\nmodule.exports = Object.freeze({\n\n    /**\n     * Visitor keys.\n     * @type {{ [type: string]: string[] | undefined }}\n     */\n    KEYS,\n\n    /**\n     * Get visitor keys of a given node.\n     * @param {Object} node The AST node to get keys.\n     * @returns {string[]} Visitor keys of the node.\n     */\n    getKeys(node) {\n        return Object.keys(node).filter(filterKey);\n    },\n\n    // Disable valid-jsdoc rule because it reports syntax error on the type of @returns.\n    // eslint-disable-next-line valid-jsdoc\n    /**\n     * Make the union set with `KEYS` and given keys.\n     * @param {Object} additionalKeys The additional keys.\n     * @returns {{ [type: string]: string[] | undefined }} The union set.\n     */\n    unionWith(additionalKeys) {\n        const retv = Object.assign({}, KEYS);\n\n        for (const type of Object.keys(additionalKeys)) {\n            if (retv.hasOwnProperty(type)) {\n                const keys = new Set(additionalKeys[type]);\n\n                for (const key of retv[type]) {\n                    keys.add(key);\n                }\n\n                retv[type] = Object.freeze(Array.from(keys));\n            } else {\n                retv[type] = Object.freeze(Array.from(additionalKeys[type]));\n            }\n        }\n\n        return Object.freeze(retv);\n    }\n});\n","module.exports = {\n    \"AssignmentExpression\": [\n        \"left\",\n        \"right\"\n    ],\n    \"AssignmentPattern\": [\n        \"left\",\n        \"right\"\n    ],\n    \"ArrayExpression\": [\n        \"elements\"\n    ],\n    \"ArrayPattern\": [\n        \"elements\"\n    ],\n    \"ArrowFunctionExpression\": [\n        \"params\",\n        \"body\"\n    ],\n    \"AwaitExpression\": [\n        \"argument\"\n    ],\n    \"BlockStatement\": [\n        \"body\"\n    ],\n    \"BinaryExpression\": [\n        \"left\",\n        \"right\"\n    ],\n    \"BreakStatement\": [\n        \"label\"\n    ],\n    \"CallExpression\": [\n        \"callee\",\n        \"arguments\"\n    ],\n    \"CatchClause\": [\n        \"param\",\n        \"body\"\n    ],\n    \"ClassBody\": [\n        \"body\"\n    ],\n    \"ClassDeclaration\": [\n        \"id\",\n        \"superClass\",\n        \"body\"\n    ],\n    \"ClassExpression\": [\n        \"id\",\n        \"superClass\",\n        \"body\"\n    ],\n    \"ConditionalExpression\": [\n        \"test\",\n        \"consequent\",\n        \"alternate\"\n    ],\n    \"ContinueStatement\": [\n        \"label\"\n    ],\n    \"DebuggerStatement\": [],\n    \"DoWhileStatement\": [\n        \"body\",\n        \"test\"\n    ],\n    \"EmptyStatement\": [],\n    \"ExportAllDeclaration\": [\n        \"source\"\n    ],\n    \"ExportDefaultDeclaration\": [\n        \"declaration\"\n    ],\n    \"ExportNamedDeclaration\": [\n        \"declaration\",\n        \"specifiers\",\n        \"source\"\n    ],\n    \"ExportSpecifier\": [\n        \"exported\",\n        \"local\"\n    ],\n    \"ExpressionStatement\": [\n        \"expression\"\n    ],\n    \"ExperimentalRestProperty\": [\n        \"argument\"\n    ],\n    \"ExperimentalSpreadProperty\": [\n        \"argument\"\n    ],\n    \"ForStatement\": [\n        \"init\",\n        \"test\",\n        \"update\",\n        \"body\"\n    ],\n    \"ForInStatement\": [\n        \"left\",\n        \"right\",\n        \"body\"\n    ],\n    \"ForOfStatement\": [\n        \"left\",\n        \"right\",\n        \"body\"\n    ],\n    \"FunctionDeclaration\": [\n        \"id\",\n        \"params\",\n        \"body\"\n    ],\n    \"FunctionExpression\": [\n        \"id\",\n        \"params\",\n        \"body\"\n    ],\n    \"Identifier\": [],\n    \"IfStatement\": [\n        \"test\",\n        \"consequent\",\n        \"alternate\"\n    ],\n    \"ImportDeclaration\": [\n        \"specifiers\",\n        \"source\"\n    ],\n    \"ImportDefaultSpecifier\": [\n        \"local\"\n    ],\n    \"ImportExpression\": [\n        \"source\"\n    ],\n    \"ImportNamespaceSpecifier\": [\n        \"local\"\n    ],\n    \"ImportSpecifier\": [\n        \"imported\",\n        \"local\"\n    ],\n    \"JSXAttribute\": [\n        \"name\",\n        \"value\"\n    ],\n    \"JSXClosingElement\": [\n        \"name\"\n    ],\n    \"JSXElement\": [\n        \"openingElement\",\n        \"children\",\n        \"closingElement\"\n    ],\n    \"JSXEmptyExpression\": [],\n    \"JSXExpressionContainer\": [\n        \"expression\"\n    ],\n    \"JSXIdentifier\": [],\n    \"JSXMemberExpression\": [\n        \"object\",\n        \"property\"\n    ],\n    \"JSXNamespacedName\": [\n        \"namespace\",\n        \"name\"\n    ],\n    \"JSXOpeningElement\": [\n        \"name\",\n        \"attributes\"\n    ],\n    \"JSXSpreadAttribute\": [\n        \"argument\"\n    ],\n    \"JSXText\": [],\n    \"JSXFragment\": [\n        \"openingFragment\",\n        \"children\",\n        \"closingFragment\"\n    ],\n    \"Literal\": [],\n    \"LabeledStatement\": [\n        \"label\",\n        \"body\"\n    ],\n    \"LogicalExpression\": [\n        \"left\",\n        \"right\"\n    ],\n    \"MemberExpression\": [\n        \"object\",\n        \"property\"\n    ],\n    \"MetaProperty\": [\n        \"meta\",\n        \"property\"\n    ],\n    \"MethodDefinition\": [\n        \"key\",\n        \"value\"\n    ],\n    \"NewExpression\": [\n        \"callee\",\n        \"arguments\"\n    ],\n    \"ObjectExpression\": [\n        \"properties\"\n    ],\n    \"ObjectPattern\": [\n        \"properties\"\n    ],\n    \"Program\": [\n        \"body\"\n    ],\n    \"Property\": [\n        \"key\",\n        \"value\"\n    ],\n    \"RestElement\": [\n        \"argument\"\n    ],\n    \"ReturnStatement\": [\n        \"argument\"\n    ],\n    \"SequenceExpression\": [\n        \"expressions\"\n    ],\n    \"SpreadElement\": [\n        \"argument\"\n    ],\n    \"Super\": [],\n    \"SwitchStatement\": [\n        \"discriminant\",\n        \"cases\"\n    ],\n    \"SwitchCase\": [\n        \"test\",\n        \"consequent\"\n    ],\n    \"TaggedTemplateExpression\": [\n        \"tag\",\n        \"quasi\"\n    ],\n    \"TemplateElement\": [],\n    \"TemplateLiteral\": [\n        \"quasis\",\n        \"expressions\"\n    ],\n    \"ThisExpression\": [],\n    \"ThrowStatement\": [\n        \"argument\"\n    ],\n    \"TryStatement\": [\n        \"block\",\n        \"handler\",\n        \"finalizer\"\n    ],\n    \"UnaryExpression\": [\n        \"argument\"\n    ],\n    \"UpdateExpression\": [\n        \"argument\"\n    ],\n    \"VariableDeclaration\": [\n        \"declarations\"\n    ],\n    \"VariableDeclarator\": [\n        \"id\",\n        \"init\"\n    ],\n    \"WhileStatement\": [\n        \"test\",\n        \"body\"\n    ],\n    \"WithStatement\": [\n        \"object\",\n        \"body\"\n    ],\n    \"YieldExpression\": [\n        \"argument\"\n    ]\n}\n"]}