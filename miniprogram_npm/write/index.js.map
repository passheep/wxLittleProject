{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["/*!\n * write <https://github.com/jonschlinkert/write>\n *\n * Copyright (c) 2014-2017, Jon Schlinkert.\n * Released under the MIT License.\n */\n\n\n\nvar fs = require('fs');\nvar path = require('path');\nvar mkdirp = require('mkdirp');\n\n/**\n * Asynchronously writes data to a file, replacing the file if it already\n * exists and creating any intermediate directories if they don't already\n * exist. Data can be a string or a buffer. Returns a promise if a callback\n * function is not passed.\n *\n * ```js\n * var writeFile = require('write');\n * writeFile('foo.txt', 'This is content...', function(err) {\n *   if (err) console.log(err);\n * });\n *\n * // promise\n * writeFile('foo.txt', 'This is content...')\n *   .then(function() {\n *     // do stuff\n *   });\n * ```\n * @name writeFile\n * @param {string|Buffer|integer} `filepath` filepath or file descriptor.\n * @param {string|Buffer|Uint8Array} `data` String to write to disk.\n * @param {object} `options` Options to pass to [fs.writeFile][fs]{#fs_fs_writefile_file_data_options_callback} and/or [mkdirp][]\n * @param {Function} `callback` (optional) If no callback is provided, a promise is returned.\n * @api public\n */\n\nfunction writeFile(filepath, data, options, cb) {\n  if (typeof options === 'function') {\n    cb = options;\n    options = {};\n  }\n\n  if (typeof cb !== 'function') {\n    return writeFile.promise.apply(null, arguments);\n  }\n\n  if (typeof filepath !== 'string') {\n    cb(new TypeError('expected filepath to be a string'));\n    return;\n  }\n\n  mkdirp(path.dirname(filepath), options, function(err) {\n    if (err) {\n      cb(err);\n      return;\n    }\n    fs.writeFile(filepath, data, options, cb);\n  });\n};\n\n/**\n * The promise version of [writeFile](#writefile). Returns a promise.\n *\n * ```js\n * var writeFile = require('write');\n * writeFile.promise('foo.txt', 'This is content...')\n *   .then(function() {\n *     // do stuff\n *   });\n * ```\n * @name .promise\n * @param {string|Buffer|integer} `filepath` filepath or file descriptor.\n * @param {string|Buffer|Uint8Array} `val` String or buffer to write to disk.\n * @param {object} `options` Options to pass to [fs.writeFile][fs]{#fs_fs_writefile_file_data_options_callback} and/or [mkdirp][]\n * @return {Promise}\n * @api public\n */\n\nwriteFile.promise = function(filepath, val, options) {\n  if (typeof filepath !== 'string') {\n    return Promise.reject(new TypeError('expected filepath to be a string'));\n  }\n\n  return new Promise(function(resolve, reject) {\n    mkdirp(path.dirname(filepath), options, function(err) {\n      if (err) {\n        reject(err);\n        return;\n      }\n\n      fs.writeFile(filepath, val, options, function(err) {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(val);\n      });\n    });\n  });\n};\n\n/**\n * The synchronous version of [writeFile](#writefile). Returns undefined.\n *\n * ```js\n * var writeFile = require('write');\n * writeFile.sync('foo.txt', 'This is content...');\n * ```\n * @name .sync\n * @param {string|Buffer|integer} `filepath` filepath or file descriptor.\n * @param {string|Buffer|Uint8Array} `data` String or buffer to write to disk.\n * @param {object} `options` Options to pass to [fs.writeFileSync][fs]{#fs_fs_writefilesync_file_data_options} and/or [mkdirp][]\n * @return {undefined}\n * @api public\n */\n\nwriteFile.sync = function(filepath, data, options) {\n  if (typeof filepath !== 'string') {\n    throw new TypeError('expected filepath to be a string');\n  }\n  mkdirp.sync(path.dirname(filepath), options);\n  fs.writeFileSync(filepath, data, options);\n};\n\n/**\n * Uses `fs.createWriteStream` to write data to a file, replacing the\n * file if it already exists and creating any intermediate directories\n * if they don't already exist. Data can be a string or a buffer. Returns\n * a new [WriteStream](https://nodejs.org/api/fs.html#fs_class_fs_writestream)\n * object.\n *\n * ```js\n * var fs = require('fs');\n * var writeFile = require('write');\n * fs.createReadStream('README.md')\n *   .pipe(writeFile.stream('a/b/c/other-file.md'))\n *   .on('close', function() {\n *     // do stuff\n *   });\n * ```\n * @name .stream\n * @param {string|Buffer|integer} `filepath` filepath or file descriptor.\n * @param {object} `options` Options to pass to [mkdirp][] and [fs.createWriteStream][fs]{#fs_fs_createwritestream_path_options}\n * @return {Stream} Returns a new [WriteStream](https://nodejs.org/api/fs.html#fs_class_fs_writestream) object. (See [Writable Stream](https://nodejs.org/api/stream.html#stream_class_stream_writable)).\n * @api public\n */\n\nwriteFile.stream = function(filepath, options) {\n  mkdirp.sync(path.dirname(filepath), options);\n  return fs.createWriteStream(filepath, options);\n};\n\n/**\n * Expose `writeFile`\n */\n\nmodule.exports = writeFile;\n"]}