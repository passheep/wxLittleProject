{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\nconst isFullwidthCodePoint = require('is-fullwidth-code-point');\nconst astralRegex = require('astral-regex');\nconst ansiStyles = require('ansi-styles');\n\nconst ESCAPES = [\n\t'\\u001B',\n\t'\\u009B'\n];\n\nconst END_CODE = 39;\n\nconst wrapAnsi = code => `${ESCAPES[0]}[${code}m`;\n\nmodule.exports = (str, begin, end) => {\n\tconst arr = [...str.normalize()];\n\n\tend = typeof end === 'number' ? end : arr.length;\n\n\tlet insideEscape = false;\n\tlet escapeCode = null;\n\tlet visible = 0;\n\tlet output = '';\n\n\tfor (const [i, x] of arr.entries()) {\n\t\tlet leftEscape = false;\n\n\t\tif (ESCAPES.includes(x)) {\n\t\t\tinsideEscape = true;\n\t\t\tconst code = /\\d[^m]*/.exec(str.slice(i, i + 18));\n\t\t\tescapeCode = code === END_CODE ? null : code;\n\t\t} else if (insideEscape && x === 'm') {\n\t\t\tinsideEscape = false;\n\t\t\tleftEscape = true;\n\t\t}\n\n\t\tif (!insideEscape && !leftEscape) {\n\t\t\t++visible;\n\t\t}\n\n\t\tif (!astralRegex({exact: true}).test(x) && isFullwidthCodePoint(x.codePointAt())) {\n\t\t\t++visible;\n\t\t}\n\n\t\tif (visible > begin && visible <= end) {\n\t\t\toutput += x;\n\t\t} else if (visible === begin && !insideEscape && escapeCode !== null && escapeCode !== END_CODE) {\n\t\t\toutput += wrapAnsi(escapeCode);\n\t\t} else if (visible >= end) {\n\t\t\tif (escapeCode !== null) {\n\t\t\t\toutput += wrapAnsi(ansiStyles.codes.get(parseInt(escapeCode, 10)) || END_CODE);\n\t\t\t}\n\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn output;\n};\n"]}